{"version":3,"file":"chunk-525dc8c4.js","sources":["../../../../pages/community/component/PostSection/component/Title.tsx","../../../../pages/community/component/PostSection/component/PreviewText.tsx","../../../../pages/community/component/PostSection/component/PostItemDetail.tsx","../../../../pages/community/component/PostSection/component/Subject.tsx","../../../../pages/community/useIntersectionObserver.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport DOMPurify from 'isomorphic-dompurify';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../../../../renderer/store';\r\n\r\nexport { Title };\r\n\r\nfunction Title(props: { title: string }) {\r\n    const { title } = props;\r\n    const keyword = useSelector((state: RootState) => state.postSlice.KEYWORD);\r\n\r\n    const [decoTitle, setDecoTitle] = useState<string>(title);\r\n\r\n    useEffect(() => {\r\n        if (keyword && keyword !== '') {\r\n            // 키워드에 문자가 있으면\r\n            if (title.includes(keyword)) {\r\n                // 제목에 키워드가 있으면\r\n                const regex = new RegExp(keyword, 'gi');\r\n                const replaceWord = title.replace(regex, `<span style=\"color: blue;\">${keyword}</span>`);\r\n\r\n                setDecoTitle(replaceWord);\r\n            } else {\r\n                setDecoTitle(title);\r\n            }\r\n        } else {\r\n            setDecoTitle(title);\r\n        }\r\n    }, [title, keyword]);\r\n\r\n    return (\r\n        <>\r\n            <dt className=\"sr-only\">제목</dt>\r\n            {keyword && keyword !== '' ? (\r\n                <dd\r\n                    className=\"txt-postitem-title\"\r\n                    dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(decoTitle) }}\r\n                />\r\n            ) : (\r\n                <dd className=\"txt-postitem-title\">{title}</dd>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport DOMPurify from 'isomorphic-dompurify';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../../../../renderer/store';\r\n\r\nexport { PreviewText };\r\n\r\nfunction PreviewText(props: { content: string }) {\r\n    const { content } = props;\r\n    const keyword = useSelector((state: RootState) => state.postSlice.KEYWORD);\r\n\r\n    const [decoContent, setDecoContent] = useState<string>(content);\r\n\r\n    useEffect(() => {\r\n        if (keyword && keyword !== '') {\r\n            if (content.includes(keyword)) {\r\n                const regex = new RegExp(keyword, 'gi');\r\n                const replaceWord = content.replace(regex, `<span style=\"color: blue;\">${keyword}</span>`);\r\n\r\n                setDecoContent(replaceWord);\r\n            } else {\r\n                setDecoContent(content); // 검색 할때마다 새롭게 그려야 하기 때문에 초기화 해줘야 함\r\n            }\r\n        } else {\r\n            setDecoContent(content);\r\n        }\r\n    }, [content, keyword]);\r\n\r\n    return (\r\n        <>\r\n            <dt className=\"sr-only\">내용</dt>\r\n            {keyword && keyword !== '' ? (\r\n                <dd\r\n                    className=\"txt-postitem-content\"\r\n                    dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(decoContent) }}\r\n                />\r\n            ) : (\r\n                <dd className=\"txt-postitem-content\">{content}</dd>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { CommentInPost } from '../../../../../server/models/Post';\r\nimport { isSameDay } from '../../../../../components/Date/isSameDay';\r\n\r\nexport { PostItemDetail };\r\n\r\nfunction PostItemDetail(props: {\r\n    like?: Array<{ user: string }>;\r\n    comments?: Array<CommentInPost>;\r\n    registeredAt: string;\r\n    owner: string;\r\n}) {\r\n    const { like, comments, registeredAt, owner } = props;\r\n\r\n    return (\r\n        <>\r\n            <dt className=\"sr-only\">상세 내용</dt>\r\n            <dd>\r\n                <dl className=\"container-post-subinfo\">\r\n                    <LikeCount like={like} />\r\n                    <CommentCount comments={comments} />\r\n                    <Time registeredAt={registeredAt} />\r\n                    <Owner owner={owner} />\r\n                </dl>\r\n            </dd>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction LikeCount(props: { like?: Array<{ user: string }> }) {\r\n    return (\r\n        <>\r\n            <dt className=\"sr-only\">좋아요 개수</dt>\r\n            <dd className=\"container-count-like\">\r\n                <span>{props.like?.length || 0}</span>\r\n            </dd>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction CommentCount(props: { comments?: Array<CommentInPost> }) {\r\n    return (\r\n        <>\r\n            <dt className=\"sr-only\">댓글 개수</dt>\r\n            <dd className=\"container-count-comment\">\r\n                <span>{props.comments?.length || 0}</span>\r\n            </dd>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction Time(props: { registeredAt: string }) {\r\n    const { registeredAt } = props;\r\n\r\n    const date = isSameDay(registeredAt)\r\n        ? `${registeredAt.split('. ').at(-1)?.split(':')[0]}:${registeredAt.split('. ').at(-1)?.split(':')[1]}`\r\n        : registeredAt.slice(0, 13);\r\n\r\n    return (\r\n        <>\r\n            <dt className=\"sr-only\">작성 시간</dt>\r\n            <dd className=\"container-post-time\">\r\n                <time dateTime=\"\">{date}</time>\r\n            </dd>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction Owner(props: { owner: string }) {\r\n    return (\r\n        <>\r\n            <dt className=\"sr-only\">작성자</dt>\r\n            <dd className=\"txt-post-owner\">{props.owner}</dd>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nexport { Subject };\r\n\r\nfunction Subject(props: { subject: string }) {\r\n    return (\r\n        <>\r\n            <dt className=\"sr-only\">말머리</dt>\r\n            <dd className=\"txt-subject-in-community\">{props.subject}</dd>\r\n        </>\r\n    );\r\n}\r\n","import { useRef, useEffect } from 'react';\r\n\r\nexport default function useIntersectionObserver(callback: () => void) {\r\n    const observer = useRef<IntersectionObserver | null>(null);\r\n\r\n    useEffect(() => {\r\n        const handleIntersect: IntersectionObserverCallback = (entries) => {\r\n            if (entries.at(-1)?.isIntersecting) {\r\n                callback();\r\n            }\r\n        };\r\n\r\n        const root = document.querySelector('.main-community');\r\n        observer.current = new IntersectionObserver(handleIntersect, {\r\n            root: root,\r\n            rootMargin: '0px',\r\n            threshold: 0.5,\r\n        });\r\n\r\n        return () => {\r\n            observer.current?.disconnect();\r\n        };\r\n    }, [callback]);\r\n\r\n    const observe = (element: HTMLLIElement | null) => {\r\n        if (element && observer.current) observer.current.observe(element);\r\n    };\r\n\r\n    const unobserve = (element: HTMLLIElement | null) => {\r\n        if (element && observer.current) observer.current.unobserve(element);\r\n    };\r\n\r\n    return [observe, unobserve];\r\n}\r\n"],"names":["Title","props","title","keyword","useSelector","state","decoTitle","setDecoTitle","useState","useEffect","regex","replaceWord","jsxs","Fragment","jsx","DOMPurify","PreviewText","content","decoContent","setDecoContent","PostItemDetail","like","comments","registeredAt","owner","LikeCount","CommentCount","Time","Owner","_a","date","isSameDay","_b","Subject","useIntersectionObserver","callback","observer","useRef","handleIntersect","entries","root","element"],"mappings":"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"}