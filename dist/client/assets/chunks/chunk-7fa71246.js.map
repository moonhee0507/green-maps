{"version":3,"file":"chunk-7fa71246.js","sources":["../../../../components/validate/isEmptyString.ts","../../../../pages/community/create/component/SubmitButton.tsx","../../../../components/topBar/topBar.tsx"],"sourcesContent":["export default function isEmptyString(str: string): boolean {\r\n    return str.trim().length === 0;\r\n}\r\n","import React, { useCallback, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useAppSelector } from '../../../../renderer/store/hooks';\r\nimport { API_URL } from '../../../../renderer/CONSTANT_URL';\r\nimport { EDIT_MODE } from '../../../../renderer/_reducers/_slices/postSlice';\r\nimport isEmptyString from '../../../../components/validate/isEmptyString';\r\n\r\nexport { SubmitButton };\r\n\r\nfunction SubmitButton() {\r\n    const dispatch = useDispatch();\r\n\r\n    const editMode = useAppSelector((state) => state.postSlice.editMode);\r\n\r\n    const postId = useAppSelector((state) => state.postSlice.postId);\r\n    const subject = useAppSelector((state) => state.postSlice.SUBJECT);\r\n    const title = useAppSelector((state) => state.postSlice.TITLE);\r\n    const content = useAppSelector((state) => state.postSlice.CONTENT);\r\n\r\n    const getUserInfo = useCallback(async () => {\r\n        const res = await fetch(`${API_URL}/users/`, {\r\n            credentials: 'include',\r\n            method: 'GET',\r\n        });\r\n        const data = await res.json();\r\n\r\n        return data.user;\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        getUserInfo().then((info) => {\r\n            if (info) {\r\n                dispatch({ type: 'postSlice/OWNER_STATE', NICKNAME: info.nickName });\r\n            } else {\r\n                console.log('사용자 정보가 없습니다. 로그인 하세요.');\r\n            }\r\n        });\r\n    }, [getUserInfo]);\r\n\r\n    const handleSubmit = async () => {\r\n        if (isEmptyString(subject)) {\r\n            alert(\"말머리를 선택해주세요.\");\r\n        } else if (isEmptyString(title)) {\r\n            alert(\"제목을 입력해주세요.\");\r\n        } else if (isEmptyString(content)) {\r\n            alert(\"내용을 입력해주세요.\");\r\n        } else {\r\n            try {\r\n                const body = {\r\n                    subject: subject,\r\n                    title: title,\r\n                    content: content,\r\n                };\r\n    \r\n                const res = await fetch(`${API_URL}/posts/${editMode ? postId : ''}`, {\r\n                    credentials: 'include',\r\n                    method: editMode ? 'PATCH' : 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify(body),\r\n                });\r\n                const data = await res.json();\r\n    \r\n                if (data.success) {\r\n                    alert('게시글이 등록되었습니다.');\r\n                } else {\r\n                    alert('다시 시도해주세요.');\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            } finally {\r\n                dispatch({ type: 'postSlice/SUBJECT_STATE', SUBJECT: '' });\r\n                dispatch(EDIT_MODE(false));\r\n                history.back();\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <button type=\"button\" onClick={handleSubmit}>\r\n            등록\r\n        </button>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { ButtonGoBack } from '../button/buttonGoBack';\r\nimport { SubmitButton } from '../../pages/community/create/component/SubmitButton';\r\n\r\nexport { TopBar };\r\n\r\nfunction TopBar(props: { title: string }) {\r\n    const [title] = useState(props.title);\r\n\r\n    return (\r\n        <div className=\"top-bar\">\r\n            <ButtonGoBack />\r\n            <h2 className=\"top-title\">{title}</h2>\r\n            {title === '글 쓰기' || title === '글 수정' ? <SubmitButton /> : null}\r\n        </div>\r\n    );\r\n}\r\n"],"names":["isEmptyString","str","SubmitButton","dispatch","useDispatch","editMode","useAppSelector","state","postId","subject","title","content","getUserInfo","useCallback","API_URL","useEffect","info","handleSubmit","body","err","EDIT_MODE","TopBar","props","useState","jsxs","jsx","ButtonGoBack"],"mappings":"2KAAA,SAAwBA,EAAcC,EAAsB,CACjD,OAAAA,EAAI,OAAO,SAAW,CACjC,CCOA,SAASC,GAAe,CACpB,MAAMC,EAAWC,IAEXC,EAAWC,EAAgBC,GAAUA,EAAM,UAAU,QAAQ,EAE7DC,EAASF,EAAgBC,GAAUA,EAAM,UAAU,MAAM,EACzDE,EAAUH,EAAgBC,GAAUA,EAAM,UAAU,OAAO,EAC3DG,EAAQJ,EAAgBC,GAAUA,EAAM,UAAU,KAAK,EACvDI,EAAUL,EAAgBC,GAAUA,EAAM,UAAU,OAAO,EAE3DK,EAAcC,EAAAA,YAAY,UAKf,MAJD,MAAM,MAAM,GAAGC,WAAkB,CACzC,YAAa,UACb,OAAQ,KAAA,CACX,GACsB,QAEX,KACb,CAAE,CAAA,EAELC,EAAAA,UAAU,IAAM,CACAH,EAAA,EAAE,KAAMI,GAAS,CACrBA,EACAb,EAAS,CAAE,KAAM,wBAAyB,SAAUa,EAAK,SAAU,EAEnE,QAAQ,IAAI,wBAAwB,CACxC,CACH,CAAA,EACF,CAACJ,CAAW,CAAC,EAEhB,MAAMK,EAAe,SAAY,CACzB,GAAAjB,EAAcS,CAAO,EACrB,MAAM,cAAc,UACbT,EAAcU,CAAK,EAC1B,MAAM,aAAa,UACZV,EAAcW,CAAO,EAC5B,MAAM,aAAa,MAEf,IAAA,CACA,MAAMO,EAAO,CACT,QAAAT,EACA,MAAAC,EACA,QAAAC,CAAA,GAWS,MARD,MAAM,MAAM,GAAGG,WAAiBT,EAAWG,EAAS,KAAM,CAClE,YAAa,UACb,OAAQH,EAAW,QAAU,OAC7B,QAAS,CACL,eAAgB,kBACpB,EACA,KAAM,KAAK,UAAUa,CAAI,CAAA,CAC5B,GACsB,QAEd,QACL,MAAM,eAAe,EAErB,MAAM,YAAY,QAEjBC,GACL,QAAQ,MAAMA,CAAG,CAAA,QACnB,CACEhB,EAAS,CAAE,KAAM,0BAA2B,QAAS,EAAI,CAAA,EAChDA,EAAAiB,EAAU,EAAK,CAAC,EACzB,QAAQ,KAAK,CACjB,CACJ,EAGJ,aACK,SAAO,CAAA,KAAK,SAAS,QAASH,EAAc,SAE7C,IAAA,CAAA,CAER,CC9EA,SAASI,EAAOC,EAA0B,CACtC,KAAM,CAACZ,CAAK,EAAIa,EAAA,SAASD,EAAM,KAAK,EAGhC,OAAAE,EAAA,KAAC,MAAI,CAAA,UAAU,UACX,SAAA,CAAAC,EAAA,IAACC,EAAa,EAAA,EACbD,EAAA,IAAA,KAAA,CAAG,UAAU,YAAa,SAAMf,EAAA,EAChCA,IAAU,QAAUA,IAAU,OAASe,EAAAA,IAACvB,GAAa,CAAA,EAAK,IAC/D,CAAA,CAAA,CAER"}