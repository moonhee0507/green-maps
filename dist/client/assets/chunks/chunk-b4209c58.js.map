{"version":3,"file":"chunk-b4209c58.js","sources":["../../../../pages/my-lists/bookmark/BookmarkListMain/BookmarkList/formatDistance.ts","../../../../pages/my-lists/bookmark/BookmarkListMain/BookmarkList/Distance.tsx"],"sourcesContent":["export default function formatDistance(distance: number): string {\r\n    if (distance < 1000) {\r\n        let arrDistance = distance.toLocaleString('ko-KR').split('');\r\n        arrDistance.pop();\r\n        return arrDistance.join('') + 'm';\r\n    } else {\r\n        // (distance / 1000).toFixed(2) + 'km'\r\n        let arrDistance = (distance / 1000).toLocaleString('ko-KR').split('');\r\n        arrDistance.pop();\r\n        return arrDistance.join('') + 'km';\r\n    }\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport formatDistance from './formatDistance';\r\nimport { API_URL } from '../../../../../renderer/CONSTANT_URL';\r\n\r\nexport { Distance };\r\n\r\nfunction Distance({ location }: { location: number[] }) {\r\n    const [currentLocation, setCurrentLocation] = useState<number[] | null>(null);\r\n    const [distance, setDistance] = useState<number>(0);\r\n\r\n    useEffect(() => {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition((position) => {\r\n                const lat = position.coords.latitude;\r\n                const lng = position.coords.longitude;\r\n\r\n                setCurrentLocation([lng, lat]);\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    // 현재 위치가 결정되면 거리 구하기\r\n    useEffect(() => {\r\n        if (currentLocation !== null && location.every((v) => v !== 0)) {\r\n            getDistance().then((result) => {\r\n                setDistance(result.distance);\r\n            });\r\n        }\r\n        async function getDistance() {\r\n            const res = await fetch(`${API_URL}/map/distance`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ currentLocation: currentLocation, targetLocation: location }),\r\n            });\r\n\r\n            const data = await res.json();\r\n\r\n            return data;\r\n        }\r\n    }, [currentLocation, location]);\r\n\r\n    return <span className=\"txt-distance\">{formatDistance(distance)}</span>;\r\n}\r\n"],"names":["formatDistance","distance","arrDistance","Distance","location","currentLocation","setCurrentLocation","useState","setDistance","useEffect","position","lat","lng","v","getDistance","result","API_URL"],"mappings":"uFAAA,SAAwBA,EAAeC,EAA0B,CAC7D,GAAIA,EAAW,IAAM,CACjB,IAAIC,EAAcD,EAAS,eAAe,OAAO,EAAE,MAAM,EAAE,EAC3D,OAAAC,EAAY,IAAI,EACTA,EAAY,KAAK,EAAE,EAAI,QAC3B,CAEH,IAAIA,GAAeD,EAAW,KAAM,eAAe,OAAO,EAAE,MAAM,EAAE,EACpE,OAAAC,EAAY,IAAI,EACTA,EAAY,KAAK,EAAE,EAAI,KAEtC,CCLA,SAASC,EAAS,CAAE,SAAAC,GAAoC,CACpD,KAAM,CAACC,EAAiBC,CAAkB,EAAIC,WAA0B,IAAI,EACtE,CAACN,EAAUO,CAAW,EAAID,WAAiB,CAAC,EAElDE,OAAAA,EAAAA,UAAU,IAAM,CACR,UAAU,aACA,UAAA,YAAY,mBAAoBC,GAAa,CAC7C,MAAAC,EAAMD,EAAS,OAAO,SACtBE,EAAMF,EAAS,OAAO,UAETJ,EAAA,CAACM,EAAKD,CAAG,CAAC,CAAA,CAChC,CAET,EAAG,CAAE,CAAA,EAGLF,EAAAA,UAAU,IAAM,CACRJ,IAAoB,MAAQD,EAAS,MAAOS,GAAMA,IAAM,CAAC,GAC7CC,EAAA,EAAE,KAAMC,GAAW,CAC3BP,EAAYO,EAAO,QAAQ,CAAA,CAC9B,EAEL,eAAeD,GAAc,CAWlB,OAFM,MARD,MAAM,MAAM,GAAGE,iBAAwB,CAC/C,OAAQ,OACR,QAAS,CACL,eAAgB,kBACpB,EACA,KAAM,KAAK,UAAU,CAAE,gBAAAX,EAAkC,eAAgBD,EAAU,CAAA,CACtF,GAEsB,MAG3B,CAAA,EACD,CAACC,EAAiBD,CAAQ,CAAC,QAEtB,OAAK,CAAA,UAAU,eAAgB,SAAAJ,EAAeC,CAAQ,CAAE,CAAA,CACpE"}