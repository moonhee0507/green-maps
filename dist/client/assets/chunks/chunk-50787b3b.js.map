{"version":3,"file":"chunk-50787b3b.js","sources":["../../../../pages/search/restaurant/reviews/create/ReviewForm/component/PictureSection.tsx","../../../../pages/search/restaurant/reviews/create/ReviewForm/component/WriteSection.tsx","../../../../components/image/uploadImageToStorage.ts","../../../../pages/search/restaurant/reviews/create/ReviewForm/component/SubmitButton.tsx","../../../../pages/search/restaurant/reviews/create/ReviewForm/ReviewForm.tsx"],"sourcesContent":["import React, { ChangeEvent, useEffect, useRef, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport randomizeFileName from '../../../../../../../components/image/randomizeFileName';\r\nimport { IMG_URL } from '../../../../../../../renderer/CONSTANT_URL';\r\nimport type { PhotoInReview } from '../../../../../../../server/models/Review';\r\n\r\n/**\r\n * @SelectedImage\r\n * [0]: ObjectURL\r\n * [1]: file.type\r\n */\r\nexport type SelectedImage = [string, string];\r\nexport type RandomFileName = string;\r\n\r\nexport function PictureSection({ photos }: { photos?: PhotoInReview }) {\r\n    const fileInput = useRef<HTMLInputElement>(null);\r\n\r\n    const handleClick = () => {\r\n        if (images.length > 0) {\r\n            setImages([]);\r\n        } else {\r\n            fileInput.current?.click();\r\n        }\r\n    };\r\n\r\n    const [images, setImages] = useState<Array<SelectedImage>>(() => {\r\n        const inEditPage = window.location.pathname.includes('/edit');\r\n\r\n        if (inEditPage && photos && photos.length > 0) {\r\n            const temp: Array<SelectedImage> = [];\r\n\r\n            for (let photo of photos) {\r\n                temp.push([`${IMG_URL}/${photo.src}`, photo.src.split('.').at(-1) as string]);\r\n            }\r\n\r\n            return temp;\r\n        } else {\r\n            return [];\r\n        }\r\n    });\r\n\r\n    const handleFileInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const files: any = event.target.files;\r\n\r\n        if (event.target.files !== null) {\r\n            const temp: Array<SelectedImage> = [];\r\n            for (let file of files) {\r\n                temp.push([URL.createObjectURL(file), file.type]);\r\n            }\r\n            setImages(temp);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * store에는 직렬화 불가능한 File 객체가 저장되지 않기 때문에\r\n     * ObjectURL로 저장\r\n     */\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (images) {\r\n            const temp: Array<RandomFileName> = [];\r\n            for (let image of images) {\r\n                const fileName = randomizeFileName() + '.' + image[1]?.replace('image/', '');\r\n                temp.push(fileName);\r\n            }\r\n\r\n            dispatch({ type: 'reviewSlice/IMAGE_STATE', FILE_INFO: images, RANDOM_NAME: temp });\r\n        }\r\n    }, [images]);\r\n\r\n    return (\r\n        <fieldset className=\"section-add-picture\">\r\n            <legend className=\"sr-only\">사진 첨부</legend>\r\n            <div className=\"container-notice\">\r\n                <em>음식 사진이나 메뉴판 사진을 첨부해주세요. (최대 3장)</em>\r\n            </div>\r\n            <ul className=\"container-picture\">\r\n                <li className={`list-add-picture ${images.length > 0 ? 'reset' : ''}`} onClick={handleClick}>\r\n                    <label className=\"sr-only\" htmlFor=\"fileInput\"></label>\r\n                    <input\r\n                        type=\"file\"\r\n                        id=\"fileInput\"\r\n                        accept=\"image/*\"\r\n                        onChange={handleFileInputChange}\r\n                        style={{ display: 'none' }}\r\n                        multiple\r\n                        ref={fileInput}\r\n                    />\r\n                </li>\r\n                <li className=\"list-picture\" area-label=\"추가한 이미지 리스트\">\r\n                    {images.length > 0 ? <img src={images[0][0]} alt=\"첫번째 이미지\" /> : null}\r\n                </li>\r\n                <li className=\"list-picture\" area-label=\"추가한 이미지 리스트\">\r\n                    {images.length > 1 ? <img src={images[1][0]} alt=\"두번째 이미지\" /> : null}\r\n                </li>\r\n                <li className=\"list-picture\" area-label=\"추가한 이미지 리스트\">\r\n                    {images.length > 2 ? <img src={images[2][0]} alt=\"세번째 이미지\" /> : null}\r\n                </li>\r\n            </ul>\r\n        </fieldset>\r\n    );\r\n}\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nexport { WriteSection };\r\n\r\nfunction WriteSection({ title, content }: { title: string; content?: string }) {\r\n    const dispatch = useDispatch();\r\n\r\n    const [value, setValue] = useState<string>(() => {\r\n        const editPage = window.location.pathname.includes('/edit');\r\n\r\n        if (editPage) {\r\n            dispatch({\r\n                type: 'reviewSlice/TXT_REVIEW_STATE',\r\n                CONTENT: content,\r\n            });\r\n\r\n            return content as string;\r\n        } else {\r\n            return '';\r\n        }\r\n    });\r\n\r\n    function handleChange(event: ChangeEvent<{ value: string }>): void {\r\n        setValue(event.currentTarget.value);\r\n\r\n        dispatch({\r\n            type: 'reviewSlice/TXT_REVIEW_STATE',\r\n            CONTENT: event.currentTarget.value,\r\n        });\r\n    }\r\n\r\n    return (\r\n        <fieldset className=\"section-write-review\">\r\n            <legend className=\"sr-only\">글 작성</legend>\r\n\r\n            <label className=\"sr-only\" htmlFor=\"restaurantInput\">\r\n                식당이름\r\n            </label>\r\n            <input type=\"text\" value={title} id=\"restaurantInput\" readOnly />\r\n\r\n            <label htmlFor=\"txtReview\" className=\"sr-only\">\r\n                리뷰 작성란\r\n            </label>\r\n            <textarea\r\n                id=\"txtReview\"\r\n                placeholder={'채식에 대한 이야기를 자유롭게 공유해주세요.\\n(10자이상 100자 이내)'}\r\n                autoComplete=\"on\"\r\n                maxLength={100}\r\n                minLength={10}\r\n                required\r\n                onChange={handleChange}\r\n                value={value}\r\n            />\r\n        </fieldset>\r\n    );\r\n}\r\n","import {\r\n    RandomFileName,\r\n    SelectedImage,\r\n} from '../../pages/search/restaurant/reviews/create/ReviewForm/component/PictureSection';\r\n\r\n/**\r\n * @SelectedImage\r\n * [0]: ObjectURL\r\n * [1]: file.type\r\n */\r\n\r\nexport default async function uploadImageToStorage(\r\n    selectedImages: Array<SelectedImage>,\r\n    randomFileNames: Array<RandomFileName>\r\n) {\r\n    if (selectedImages.length === randomFileNames.length) {\r\n        for (let i = 0; i < selectedImages.length; i++) {\r\n            /**\r\n             * 스토어에 저장되어 있는 ObjectURL을 File 객체로 변환\r\n             */\r\n            const file = await fetch(selectedImages[i][0])\r\n                .then((res) => res.blob())\r\n                .then((blob) => new File([blob], `${randomFileNames[i]}`, { type: `${blob.type}` }));\r\n\r\n            const body = {\r\n                name: `client/${randomFileNames[i]}`,\r\n                type: file.type,\r\n            };\r\n\r\n            try {\r\n                // signed url 얻어오기\r\n                const resUrl = await fetch(\r\n                    `${\r\n                        process.env.NODE_ENV === 'production'\r\n                            ? 'https://api.green-maps.site/v1'\r\n                            : 'https://localhost:5000/v1'\r\n                    }/images/client`,\r\n                    {\r\n                        credentials: 'include',\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                        },\r\n                        body: JSON.stringify(body),\r\n                    }\r\n                );\r\n\r\n                /**\r\n                 * @data {success: true, signedUrl: 'https://버킷네임.s3.지역.amazon…c0be46ae2&X-Amz-SignedHeaders=host&x-id=PutObject'}\r\n                 */\r\n                const data = await resUrl.json();\r\n                const signedUrl = data.signedUrl;\r\n\r\n                // 가져온 url로 PUT 요청 보내기\r\n                /**\r\n                 * Response 객체{ body: (...), bodyUser: boolean, headers: { ok: boolean, redirected: boolean, status: number, url: signedUrl } }\r\n                 */\r\n                await fetch(signedUrl, {\r\n                    method: 'PUT',\r\n                    headers: {\r\n                        'Content-Type': file.type,\r\n                    },\r\n                    body: file,\r\n                });\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        }\r\n    } else throw Error('이미지 네이밍 처리에 오류가 발생했습니다.');\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppSelector } from '../../../../../../../renderer/store/hooks';\r\nimport { RandomFileName, SelectedImage } from './PictureSection';\r\nimport { API_URL } from '../../../../../../../renderer/CONSTANT_URL';\r\nimport { PhotoInReview } from '../../../../../../../server/models/Review';\r\nimport store from '../../../../../../../renderer/store';\r\nimport uploadImageToStorage from '../../../../../../../components/image/uploadImageToStorage';\r\nimport imgLoading from '/images/spinner.webp';\r\nimport type { UserInfo } from '../../../../../../../server/models/User';\r\n\r\ntype SelectedImages = Array<SelectedImage>;\r\ntype RandomFileNames = Array<RandomFileName>;\r\n\r\nexport { SubmitButton };\r\n\r\nfunction SubmitButton({\r\n    restaurantId,\r\n    reviewId,\r\n    userInfo,\r\n}: {\r\n    restaurantId: string;\r\n    reviewId?: string;\r\n    userInfo: UserInfo | null;\r\n}) {\r\n    const [editPage] = useState(window.location.pathname.includes('/edit'));\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const app = document.querySelector('.app');\r\n        const LoadingElement = () => {\r\n            const imgElement = document.createElement('img');\r\n\r\n            imgElement.src = imgLoading;\r\n            imgElement.alt = '좌표 생성 로딩';\r\n            imgElement.style.width = '50px';\r\n            imgElement.style.position = 'absolute';\r\n            imgElement.style.top = '50%';\r\n            imgElement.style.left = '50%';\r\n            imgElement.style.transform = 'translate(-50%, -50%)';\r\n            imgElement.id = '__LOADING__';\r\n\r\n            return imgElement;\r\n        };\r\n\r\n        if (isLoading) {\r\n            if (app !== null) {\r\n                app.appendChild(LoadingElement());\r\n            }\r\n        } else {\r\n            if (app !== null) {\r\n                const LoadingElement = document.getElementById('__LOADING__');\r\n                if (LoadingElement) {\r\n                    app.removeChild(LoadingElement);\r\n                }\r\n            }\r\n        }\r\n    }, [isLoading]);\r\n\r\n    const content = useAppSelector((state) => state.reviewSlice.CONTENT);\r\n    const randomFileNames: RandomFileNames = useAppSelector((state) => state.reviewSlice.image.RANDOM_NAME);\r\n\r\n    async function handleSubmit() {\r\n        try {\r\n            setIsLoading(true);\r\n\r\n            let photo: PhotoInReview = [];\r\n\r\n            const selectedImages: SelectedImages = store.getState().reviewSlice.image.FILE_INFO;\r\n\r\n            if (selectedImages.length > 0) {\r\n                // 새로운 이미지로 바꾸는 경우\r\n                if (!selectedImages[0][0].includes('amazon')) {\r\n                    await uploadImageToStorage(selectedImages, randomFileNames);\r\n\r\n                    const temp = [];\r\n                    for (let i = 0; i < selectedImages.length; i++) {\r\n                        temp.push({ src: `client/${randomFileNames[i]}`, pick: true });\r\n                    }\r\n\r\n                    photo = temp;\r\n                    // 이미지 교체 안하는 경우\r\n                } else if (selectedImages[0][0].includes('amazon')) {\r\n                    const temp = [];\r\n                    for (let selectedImage of selectedImages) {\r\n                        temp.push({ src: 'client/' + selectedImage[0].split('client/').at(-1), pick: true });\r\n                    }\r\n\r\n                    photo = temp;\r\n                }\r\n            }\r\n\r\n            let body;\r\n\r\n            if (!editPage) {\r\n                body = {\r\n                    owner: userInfo ? userInfo.userId : '',\r\n                    restaurant: restaurantId,\r\n                    photo: photo,\r\n                    content: content,\r\n                };\r\n            } else {\r\n                body = {\r\n                    restaurant: restaurantId,\r\n                    photo: photo,\r\n                    content: content,\r\n                };\r\n            }\r\n\r\n            try {\r\n                const res = await fetch(`${API_URL}/reviews/${editPage ? reviewId + '/edit' : ''}`, {\r\n                    credentials: 'include',\r\n                    method: editPage ? 'PATCH' : 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify(body),\r\n                });\r\n\r\n                const data = await res.json();\r\n\r\n                if (data.success === true) {\r\n                    alert('리뷰가 등록되었습니다.');\r\n                } else {\r\n                    alert('리뷰 등록에 실패했습니다.\\n다시 시도해주세요.');\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n            } finally {\r\n                window.history.back();\r\n            }\r\n        } catch (err) {\r\n            console.error('handleSubmit Error');\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <button type=\"button\" onClick={handleSubmit} className=\"styled-button review\">\r\n                {editPage ? '수정 완료' : '작성 완료'}\r\n            </button>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { PictureSection } from './component/PictureSection';\r\nimport { WriteSection } from './component/WriteSection';\r\nimport { SubmitButton } from './component/SubmitButton';\r\nimport type { PhotoInReview } from '../../../../../../server/models/Review';\r\nimport type { UserInfo } from '../../../../../../server/models/User';\r\n\r\nexport { ReviewForm };\r\n\r\nfunction ReviewForm({\r\n    restaurantId,\r\n    reviewId,\r\n    title,\r\n    photos,\r\n    content,\r\n    userInfo,\r\n}: {\r\n    restaurantId: string;\r\n    reviewId?: string;\r\n    title: string;\r\n    photos?: PhotoInReview;\r\n    content?: string;\r\n    userInfo: UserInfo | null;\r\n}) {\r\n    return (\r\n        <main className=\"wrapper-review\">\r\n            <form>\r\n                <PictureSection photos={photos} />\r\n                <WriteSection title={title} content={content} />\r\n                <SubmitButton restaurantId={restaurantId} reviewId={reviewId} userInfo={userInfo} />\r\n            </form>\r\n        </main>\r\n    );\r\n}\r\n"],"names":["PictureSection","photos","fileInput","useRef","handleClick","images","setImages","_a","useState","temp","photo","IMG_URL","handleFileInputChange","event","files","file","dispatch","useDispatch","useEffect","image","fileName","randomizeFileName","jsxs","jsx","WriteSection","title","content","value","setValue","handleChange","uploadImageToStorage","selectedImages","randomFileNames","i","res","blob","body","signedUrl","err","SubmitButton","restaurantId","reviewId","userInfo","editPage","isLoading","setIsLoading","app","LoadingElement","imgElement","imgLoading","useAppSelector","state","handleSubmit","store","selectedImage","API_URL","e","Fragment","ReviewForm"],"mappings":"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"}