{"version":3,"file":"chunk-a67e663c.js","sources":["../../../../pages/my-lists/ModalGroup/GroupOrderModal.tsx","../../../../pages/my-lists/ModalGroup/AddGroupModal/GroupNameInput.tsx","../../../../pages/my-lists/ModalGroup/AddGroupModal/CompleteButton.tsx","../../../../pages/my-lists/ModalGroup/AddGroupModal/AddGroupModal.tsx","../../../../pages/my-lists/ModalGroup/MoveListModal/Form/List.tsx","../../../../pages/my-lists/ModalGroup/MoveListModal/Form/ButtonGroup.tsx","../../../../pages/my-lists/ModalGroup/MoveListModal/MoveListModal.tsx","../../../../pages/my-lists/ModalGroup/WhereToCopyModal/GroupNameList.tsx","../../../../pages/my-lists/ModalGroup/WhereToCopyModal/CloseButton.tsx","../../../../pages/my-lists/ModalGroup/WhereToCopyModal/WhereToCopyModal.tsx","../../../../pages/my-lists/ModalGroup/DeleteMultiLike/Form/ListItem.tsx","../../../../pages/my-lists/ModalGroup/DeleteMultiLike/Form/List.tsx","../../../../pages/my-lists/ModalGroup/DeleteMultiLike/Form/ButtonGroup.tsx","../../../../pages/my-lists/ModalGroup/DeleteMultiLike/Form/Form.tsx","../../../../pages/my-lists/ModalGroup/DeleteMultiLike/CloseButton.tsx","../../../../pages/my-lists/ModalGroup/DeleteMultiLike/DeleteMultiLike.tsx","../../../../pages/my-lists/ModalGroup/ModalGroup.tsx"],"sourcesContent":["import React, { MouseEvent, useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../renderer/store/hooks';\r\nimport { ORDER_MODAL, ORDER_STANDARD } from '../../../renderer/_reducers/_slices/myListSlice';\r\nimport imgClose from '/images/icon-plus.svg';\r\n\r\nexport { GroupOrderModal };\r\n\r\nfunction GroupOrderModal() {\r\n    const dispatch = useAppDispatch();\r\n    const orderStandard = useAppSelector((state) => state.myListSlice.groupNameOrder);\r\n    const orderModalOn = useAppSelector((state) => state.myListSlice.orderModalOn);\r\n    const [show, setShow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (orderModalOn === true) setShow(true);\r\n        else setShow(false);\r\n    }, [orderModalOn]);\r\n\r\n    function handleOrder(event: MouseEvent<HTMLButtonElement>) {\r\n        dispatch(ORDER_STANDARD(event.currentTarget.innerText));\r\n        handleClose();\r\n    }\r\n\r\n    function handleClose() {\r\n        const app = document.querySelector('.app');\r\n        app?.classList.remove('modal-mode');\r\n\r\n        dispatch(ORDER_MODAL(false));\r\n    }\r\n\r\n    return (\r\n        <article className={`modal-group-item ${show ? 'on' : ''}`}>\r\n            <h4>정렬기준</h4>\r\n            <div className=\"container-button\">\r\n                <button\r\n                    type=\"button\"\r\n                    onClick={handleOrder}\r\n                    className={`button-groupname-order ${orderStandard === '등록순' ? 'on' : ''}`}\r\n                >\r\n                    등록순\r\n                </button>\r\n                <button\r\n                    type=\"button\"\r\n                    onClick={handleOrder}\r\n                    className={`button-groupname-order ${orderStandard === '이름순' ? 'on' : ''}`}\r\n                >\r\n                    이름순\r\n                </button>\r\n            </div>\r\n            <button type=\"button\" className=\"button-close\" onClick={handleClose}>\r\n                <img src={imgClose} alt=\"X 아이콘\" className=\"img-close\" />\r\n            </button>\r\n        </article>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../renderer/store/hooks';\r\nimport { SET_GROUP_NAME } from '../../../../renderer/_reducers/_slices/myListSlice';\r\n\r\nexport { GroupNameInput };\r\n\r\nfunction GroupNameInput() {\r\n    const dispatch = useAppDispatch();\r\n    const groupName = useAppSelector((state) => state.myListSlice.groupName);\r\n    const [inputValue, setInputValue] = useState<string>('');\r\n\r\n    useEffect(() => {\r\n        if (groupName === '') {\r\n            setInputValue('');\r\n        }\r\n    }, [groupName]);\r\n\r\n    function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n        setInputValue(event.target.value);\r\n        dispatch(SET_GROUP_NAME(event.target.value));\r\n    }\r\n    return (\r\n        <>\r\n            <label htmlFor=\"groupName\" className=\"sr-only\">\r\n                그룹명\r\n            </label>\r\n            <input\r\n                type=\"text\"\r\n                id=\"groupName\"\r\n                placeholder=\"그룹명을 입력해 주세요.\"\r\n                maxLength={20}\r\n                minLength={1}\r\n                onChange={handleChange}\r\n                value={inputValue}\r\n            />\r\n        </>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppSelector } from '../../../../renderer/store/hooks';\r\nimport { API_URL } from '../../../../renderer/CONSTANT_URL';\r\nimport type { UserInfo } from '../../../../server/models/User';\r\n\r\nexport { CompleteButton };\r\n\r\nfunction CompleteButton({ userInfo }: { userInfo: UserInfo | null }) {\r\n    const [show, setShow] = useState({ disabled: true });\r\n    const groupName = useAppSelector((state) => state.myListSlice.groupName);\r\n    const groupIcon = useAppSelector((state) => state.myListSlice.selectedIcon);\r\n\r\n    useEffect(() => {\r\n        if (groupName !== null) {\r\n            if (groupName.length !== 0) setShow({ disabled: false });\r\n            else setShow({ disabled: true });\r\n        } else {\r\n            setShow({ disabled: true });\r\n        }\r\n    }, [groupName]);\r\n\r\n    async function handleClick() {\r\n        if (userInfo !== null) {\r\n            const { userId } = userInfo;\r\n\r\n            const res = await fetch(`${API_URL}/bookmark/create`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ userId: userId, name: groupName, groupIcon: groupIcon }),\r\n            });\r\n\r\n            const data = await res.json();\r\n\r\n            if (data.success === true) {\r\n                window.location.reload();\r\n            } else {\r\n                alert('다시 시도해주세요.');\r\n            }\r\n        } else {\r\n            alert('로그아웃 되었습니다.\\n다시 로그인해주세요.');\r\n            window.location.href = '/login';\r\n        }\r\n    }\r\n    return (\r\n        <button type=\"button\" className={`button-groupname-complete ${show ? 'on' : ''}`} onClick={handleClick}>\r\n            완료\r\n        </button>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../renderer/store/hooks';\r\nimport { ADD_GROUP_MODAL, SET_GROUP_NAME, ICON_STANDARD } from '../../../../renderer/_reducers/_slices/myListSlice';\r\nimport { GroupNameInput } from './GroupNameInput';\r\nimport { IconSelection } from './IconSelection';\r\nimport { CompleteButton } from './CompleteButton';\r\nimport imgClose from '/images/icon-plus.svg';\r\nimport type { UserInfo } from '../../../../server/models/User';\r\n\r\nexport function AddGroupModal({ userInfo }: { userInfo: UserInfo | null }) {\r\n    const dispatch = useAppDispatch();\r\n    const addGroupModalOn = useAppSelector((state) => state.myListSlice.addGroupModalOn);\r\n\r\n    const [show, setShow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (addGroupModalOn === true) setShow(true);\r\n        else setShow(false);\r\n    }, [addGroupModalOn]);\r\n\r\n    function handleClose() {\r\n        const app = document.querySelector('.app');\r\n        app?.classList.remove('modal-mode');\r\n\r\n        dispatch(ADD_GROUP_MODAL(false));\r\n        dispatch(SET_GROUP_NAME('')); // 새그룹추가 모달 인풋창 초기화\r\n        dispatch(ICON_STANDARD('/images/icon-star.svg'));\r\n    }\r\n\r\n    return (\r\n        <article className={`modal-group-item ${show ? 'on' : ''}`}>\r\n            <h4>새 그룹 추가</h4>\r\n            <form>\r\n                <GroupNameInput />\r\n                <IconSelection />\r\n                <CompleteButton userInfo={userInfo} />\r\n            </form>\r\n            <button type=\"button\" className=\"button-close\" onClick={handleClose}>\r\n                <img src={imgClose} alt=\"X 아이콘\" className=\"img-close\" />\r\n            </button>\r\n        </article>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../../renderer/store/hooks';\r\nimport {\r\n    INCREASE_CHECKED,\r\n    DECREASE_CHECKED,\r\n    PUSH_RESTAURANT_LIST,\r\n    DELETE_RESTAURANT_LIST,\r\n} from '../../../../../renderer/_reducers/_slices/myListSlice';\r\nimport type { Restaurant } from '../../../../../server/models/Restaurant';\r\nimport type { Bookmark } from '../../../../../server/models/User';\r\n\r\nexport { List };\r\n\r\nfunction List({ bookmarkList }: { bookmarkList: Bookmark[] }) {\r\n    return (\r\n        <div>\r\n            {bookmarkList.length > 0 ? (\r\n                bookmarkList.map((list) => {\r\n                    return <ListItem key={Math.random()} list={list._id as Restaurant} />;\r\n                })\r\n            ) : (\r\n                <div className=\"style-wrapper-no-review\">\r\n                    <div className=\"txt-no-review\">😭</div>\r\n                    <p>목록이 없어요.</p>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction ListItem({ list }: { list: Restaurant }) {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const { _id, title, address, category } = list;\r\n    const [isChecked, setIsChecked] = useState(false);\r\n    const restaurantToMove = useAppSelector((state) => state.myListSlice.restaurantToMove);\r\n\r\n    // 전체해제를 countChecked로 감시\r\n    const countChecked = useAppSelector((state) => state.myListSlice.countChecked);\r\n    useEffect(() => {\r\n        if (countChecked === 0) {\r\n            setIsChecked(false);\r\n        }\r\n    }, [countChecked]);\r\n\r\n    const handleCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setIsChecked(event.target.checked);\r\n        if (event.target.checked) {\r\n            dispatch(INCREASE_CHECKED(1));\r\n            dispatch(PUSH_RESTAURANT_LIST([...restaurantToMove, _id]));\r\n        } else {\r\n            dispatch(DECREASE_CHECKED(1));\r\n            const newArray = [...restaurantToMove];\r\n            const index = newArray.indexOf(_id);\r\n            newArray.splice(index, 1);\r\n            dispatch(DELETE_RESTAURANT_LIST(newArray));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <label className=\"label-bookmarklist\">\r\n            <input\r\n                type=\"checkbox\"\r\n                className=\"checkbox-bookmarklist\"\r\n                checked={isChecked}\r\n                onChange={handleCheckboxChange}\r\n            />\r\n            <div className=\"wrapper-bookmarklist-edit\">\r\n                <dl>\r\n                    <dl className=\"container-title-category\">\r\n                        <dt className=\"sr-only\">식당 이름</dt>\r\n                        <dd className=\"txt-title\">{title}</dd>\r\n                        <dt className=\"sr-only\">업종</dt>\r\n                        <dd className=\"txt-category\">{category}</dd>\r\n                    </dl>\r\n                    <dl>\r\n                        <dt className=\"sr-only\">주소</dt>\r\n                        <dd className=\"txt-address\">{address}</dd>\r\n                    </dl>\r\n                </dl>\r\n            </div>\r\n        </label>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../../renderer/store/hooks';\r\nimport {\r\n    COPY_MODAL,\r\n    MOVE_LIST_MODAL,\r\n    RESET_CHECKED,\r\n    RESET_RESTAURANT_LIST,\r\n} from '../../../../../renderer/_reducers/_slices/myListSlice';\r\nimport { API_URL } from '../../../../../renderer/CONSTANT_URL';\r\n\r\nexport { ButtonGroup };\r\n\r\nfunction ButtonGroup() {\r\n    const dispatch = useAppDispatch();\r\n    const countChecked = useAppSelector((state) => state.myListSlice.countChecked);\r\n    const restaurantToDelete = useAppSelector((state) => state.myListSlice.restaurantToMove);\r\n\r\n    function handleCopy() {\r\n        dispatch(MOVE_LIST_MODAL(false));\r\n        dispatch(COPY_MODAL(true));\r\n    }\r\n\r\n    async function handleDelete() {\r\n        if (restaurantToDelete.length > 0) {\r\n            const deletePromise = restaurantToDelete.map((item) => deleteBookmarks(item));\r\n\r\n            try {\r\n                // Promise.all은 deletePromise 배열 내 모든 값의 fulfill 혹은 첫 reject를 기다린다.\r\n                const result = await Promise.all(deletePromise);\r\n\r\n                result.forEach((_, i) => {\r\n                    if (i === result.length - 1) window.location.reload();\r\n                });\r\n            } catch (err) {\r\n                console.error('삭제 중 오류가 발생했습니다.', err);\r\n            }\r\n        }\r\n    }\r\n\r\n    async function deleteBookmarks(id: string) {\r\n        const res = await fetch(`${API_URL}/users/bookmark/${id}`, {\r\n            credentials: 'include',\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n\r\n        const data = await res.json();\r\n\r\n        return data;\r\n    }\r\n\r\n    function clearCheckbox() {\r\n        dispatch(RESET_CHECKED()); // 체크박스 해제\r\n        dispatch(RESET_RESTAURANT_LIST([])); // 리스트 비우기\r\n    }\r\n\r\n    return (\r\n        <div className=\"container-button-move\">\r\n            <button type=\"reset\" onClick={clearCheckbox}>\r\n                선택 해제\r\n            </button>\r\n            <button type=\"button\" onClick={handleCopy} disabled={countChecked ? false : true}>\r\n                <span className=\"txt-copy-del\">복사</span>\r\n                <span>{countChecked}</span>\r\n            </button>\r\n            <button type=\"button\" disabled={countChecked ? false : true} onClick={handleDelete}>\r\n                <span className=\"txt-copy-del\">삭제</span>\r\n                <span>{countChecked}</span>\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport store from '../../../../renderer/store';\r\nimport { useAppDispatch, useAppSelector } from '../../../../renderer/store/hooks';\r\nimport {\r\n    MOVE_LIST_MODAL,\r\n    RESET_CHECKED,\r\n    RESET_RESTAURANT_LIST,\r\n} from '../../../../renderer/_reducers/_slices/myListSlice';\r\nimport { List } from './Form/List';\r\nimport { ButtonGroup } from './Form/ButtonGroup';\r\nimport { API_URL } from '../../../../renderer/CONSTANT_URL';\r\nimport appModalMode from '../../../../components/modal/appModalMode';\r\nimport imgClose from '/images/icon-plus.svg';\r\nimport type { Bookmark, UserInfo } from '../../../../server/models/User';\r\n\r\nexport function MoveListModal({ userInfo }: { userInfo: UserInfo | null }) {\r\n    const [show, setShow] = useState(false);\r\n    const [bookmarkListInSameGroup, setBookmarkListInSameGroup] = useState<Bookmark[]>([]);\r\n\r\n    const moveListModalOn = useAppSelector((state) => state.myListSlice.moveListModalOn);\r\n\r\n    useEffect(() => {\r\n        if (moveListModalOn === true) setShow(true);\r\n        else setShow(false);\r\n    }, [moveListModalOn]);\r\n\r\n    const groupName = useAppSelector((state) => state.myListSlice.targetGroup);\r\n\r\n    useEffect(() => {\r\n        if (userInfo !== null) {\r\n            getBookmarkList().then((data) => {\r\n                if (data.success) {\r\n                    const groupName = store.getState().myListSlice.targetGroup;\r\n                    const sameGroup = data.bookmarkList.filter((list) => list.groupName === groupName);\r\n                    setBookmarkListInSameGroup(sameGroup);\r\n                }\r\n            });\r\n        }\r\n    }, [groupName]);\r\n\r\n    async function getBookmarkList() {\r\n        const res = await fetch(`${API_URL}/users/bookmark`, {\r\n            credentials: 'include',\r\n            method: 'GET',\r\n        });\r\n        const data = (await res.json()) as { success: boolean; bookmarkList: Bookmark[]; message?: string };\r\n\r\n        return data;\r\n    }\r\n\r\n    return (\r\n        <article className={`modal-group-item ${show ? 'on' : ''}`}>\r\n            <h4>목록 편집</h4>\r\n            <Form bookmarkList={bookmarkListInSameGroup} />\r\n            <CloseButton />\r\n        </article>\r\n    );\r\n}\r\n\r\nfunction Form({ bookmarkList }: { bookmarkList: Bookmark[] }) {\r\n    return (\r\n        <form>\r\n            <List bookmarkList={bookmarkList} />\r\n            <ButtonGroup />\r\n        </form>\r\n    );\r\n}\r\n\r\nfunction CloseButton() {\r\n    const dispatch = useAppDispatch();\r\n\r\n    function handleClose() {\r\n        appModalMode(false);\r\n\r\n        dispatch(MOVE_LIST_MODAL(false));\r\n        dispatch(RESET_CHECKED());\r\n        dispatch(RESET_RESTAURANT_LIST([]));\r\n    }\r\n\r\n    return (\r\n        <button type=\"button\" className=\"button-close\" onClick={handleClose}>\r\n            <img src={imgClose} alt=\"X 아이콘\" className=\"img-close\" />\r\n        </button>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Bookmark, UserInfo } from '../../../../server/models/User';\r\nimport { GroupList } from '../../../../server/models/Bookmark';\r\nimport { useAppSelector } from '../../../../renderer/store/hooks';\r\nimport { API_URL } from '../../../../renderer/CONSTANT_URL';\r\n\r\nexport { GroupNameList };\r\n\r\nfunction GroupNameList({\r\n    userInfo,\r\n    groupInfo,\r\n    lists,\r\n}: {\r\n    userInfo: UserInfo | null;\r\n    groupInfo: GroupList;\r\n    lists: Bookmark[];\r\n}) {\r\n    const { name, registeredAt, groupIcon } = groupInfo;\r\n    const [date] = useState<string>(registeredAt.slice(0, 13));\r\n    const [count, setCount] = useState<number>(0);\r\n    const [user, setUser] = useState<UserInfo | null>(null);\r\n\r\n    useEffect(() => {\r\n        if (lists.length === 0) setCount(0);\r\n        if (lists.length > 0) {\r\n            const sameName = lists.filter((list) => list.groupName === name);\r\n            setCount(sameName.length);\r\n        }\r\n\r\n        if (userInfo !== null) {\r\n            setUser(userInfo);\r\n        }\r\n    }, []);\r\n\r\n    const restaurantToMove = useAppSelector((state) => state.myListSlice.restaurantToMove);\r\n\r\n    function handleCopy() {\r\n        if (user !== null) {\r\n            submit(user.userId, name, restaurantToMove);\r\n        }\r\n    }\r\n\r\n    async function submit(userId: string, newGroupName: string, selectedRestaurant: string[]) {\r\n        const res = await fetch(`${API_URL}/users/update/bookmark`, {\r\n            credentials: 'include',\r\n            method: 'PATCH',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                userId: userId,\r\n                newGroupName: newGroupName,\r\n                selectedRestaurant: selectedRestaurant,\r\n            }),\r\n        });\r\n\r\n        const data = await res.json();\r\n\r\n        if (data.success) {\r\n            alert('복사가 완료되었습니다.\\n복사가 완료된 원본은 삭제됩니다.');\r\n            window.location.href = '/my-lists';\r\n        } else {\r\n            console.error(data);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <li className=\"li-bookmarkgroup copy\">\r\n            <button onClick={handleCopy}>\r\n                <div className=\"style-wrapper-groupname\">\r\n                    <div className=\"style-wrapper-groupname-info\">\r\n                        <div className=\"container-groupicon\">\r\n                            <img src={groupIcon} alt=\"그룹 아이콘\" />\r\n                        </div>\r\n                        <div>\r\n                            <p className=\"txt-groupname\">{name}</p>\r\n                            <p className=\"txt-restaurant-count\">\r\n                                개수 <span className=\"num-restaurant-count\">{count}</span>\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"txt-group-date\">{date}</div>\r\n                </div>\r\n            </button>\r\n        </li>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { useAppDispatch } from '../../../../renderer/store/hooks';\r\nimport {\r\n    COPY_MODAL,\r\n    MOVE_LIST_MODAL,\r\n    RESET_CHECKED,\r\n    RESET_RESTAURANT_LIST,\r\n} from '../../../../renderer/_reducers/_slices/myListSlice';\r\nimport closeImg from '/images/icon-plus.svg';\r\n\r\nexport { CloseButton };\r\n\r\nfunction CloseButton() {\r\n    const dispatch = useAppDispatch();\r\n\r\n    function handleClose() {\r\n        dispatch(COPY_MODAL(false));\r\n        dispatch(MOVE_LIST_MODAL(true));\r\n        dispatch(RESET_CHECKED());\r\n        dispatch(RESET_RESTAURANT_LIST([]));\r\n    }\r\n\r\n    return (\r\n        <button type=\"button\" className=\"button-close\" onClick={handleClose}>\r\n            <img src={closeImg} alt=\"X 아이콘\" className=\"img-close\" />\r\n        </button>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Bookmark, UserInfo } from '../../../../server/models/User';\r\nimport { useAppSelector } from '../../../../renderer/store/hooks';\r\nimport { GroupNameList } from './GroupNameList';\r\nimport { CloseButton } from './CloseButton';\r\nimport { API_URL } from '../../../../renderer/CONSTANT_URL';\r\nimport type { GroupList } from '../../../../server/models/Bookmark';\r\n\r\nexport { WhereToCopyModal };\r\n\r\nfunction WhereToCopyModal({ userInfo }: { userInfo: UserInfo | null }) {\r\n    const copyModalOn = useAppSelector((state) => state.myListSlice.copyModalOn);\r\n    const targetGroup = useAppSelector((state) => state.myListSlice.targetGroup);\r\n\r\n    const [show, setShow] = useState(false);\r\n    const [groupList, setGroupList] = useState<GroupList[]>([]);\r\n    const [bookmarkList, setBookmarkList] = useState<Bookmark[]>([]);\r\n\r\n    useEffect(() => {\r\n        if (copyModalOn === true) setShow(true);\r\n        else setShow(false);\r\n    }, [copyModalOn]);\r\n\r\n    useEffect(() => {\r\n        if (userInfo !== null) {\r\n            getBookmarkGroupList(userInfo.userId).then((data) => {\r\n                if (data.success) {\r\n                    setGroupList(data.groupList);\r\n                }\r\n            });\r\n\r\n            setBookmarkList(userInfo.bookmarkList);\r\n        }\r\n    }, []);\r\n\r\n    async function getBookmarkGroupList(userId: string) {\r\n        const res = await fetch(`${API_URL}/bookmark/${userId}`);\r\n        const data = await res.json();\r\n\r\n        return data;\r\n    }\r\n\r\n    return (\r\n        <article className={`modal-group-item ${show ? 'on' : ''}`}>\r\n            <h4>복사할 그룹 선택</h4>\r\n            {groupList.length - 1 > 0 ? (\r\n                <ul className=\"ul-groupname\">\r\n                    {groupList\r\n                        .filter((groupInfo) => groupInfo.name !== targetGroup) // 현재 그룹 제외\r\n                        .map((groupInfo) => {\r\n                            return (\r\n                                <GroupNameList\r\n                                    key={Math.random()}\r\n                                    groupInfo={groupInfo}\r\n                                    lists={bookmarkList}\r\n                                    userInfo={userInfo}\r\n                                />\r\n                            );\r\n                        })}\r\n                </ul>\r\n            ) : (\r\n                <div className=\"style-wrapper-no-review\">\r\n                    <div className=\"txt-no-review\">😭</div>\r\n                    <p>다른 그룹이 없어요.</p>\r\n                </div>\r\n            )}\r\n            <CloseButton />\r\n        </article>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../../renderer/store/hooks';\r\nimport {\r\n    DECREASE_CHECKED,\r\n    DELETE_RESTAURANT_LIST,\r\n    INCREASE_CHECKED,\r\n    PUSH_RESTAURANT_LIST,\r\n} from '../../../../../renderer/_reducers/_slices/myListSlice';\r\nimport type { Restaurant } from '../../../../../server/models/Restaurant';\r\n\r\nexport { ListItem };\r\n\r\nfunction ListItem({ list }: { list: Restaurant }) {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const { _id, title, address, category } = list;\r\n    const [isChecked, setIsChecked] = useState(false);\r\n    const restaurantToDelete = useAppSelector((state) => state.myListSlice.restaurantToMove);\r\n\r\n    // 전체해제를 countChecked로 감시\r\n    const countChecked = useAppSelector((state) => state.myListSlice.countChecked);\r\n    useEffect(() => {\r\n        if (countChecked === 0) {\r\n            setIsChecked(false);\r\n        }\r\n    }, [countChecked]);\r\n\r\n    const handleCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setIsChecked(event.target.checked);\r\n\r\n        if (event.target.checked) {\r\n            dispatch(INCREASE_CHECKED(1));\r\n            dispatch(PUSH_RESTAURANT_LIST([...restaurantToDelete, _id]));\r\n        } else {\r\n            dispatch(DECREASE_CHECKED(1));\r\n            const newArray = [...restaurantToDelete];\r\n            const index = newArray.indexOf(_id);\r\n            newArray.splice(index, 1);\r\n            dispatch(DELETE_RESTAURANT_LIST(newArray));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <label className=\"label-bookmarklist\">\r\n            <input\r\n                type=\"checkbox\"\r\n                className=\"checkbox-bookmarklist\"\r\n                checked={isChecked}\r\n                onChange={handleCheckboxChange}\r\n            />\r\n            <div className=\"wrapper-bookmarklist-edit\">\r\n                <dl>\r\n                    <dl className=\"container-title-category\">\r\n                        <dt className=\"sr-only\">식당 이름</dt>\r\n                        <dd className=\"txt-title\">{title}</dd>\r\n                        <dt className=\"sr-only\">업종</dt>\r\n                        <dd className=\"txt-category\">{category}</dd>\r\n                    </dl>\r\n                    <dl>\r\n                        <dt className=\"sr-only\">주소</dt>\r\n                        <dd className=\"txt-address\">{address}</dd>\r\n                    </dl>\r\n                </dl>\r\n            </div>\r\n        </label>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { ListItem } from './ListItem';\r\nimport type { Like } from '../../../../../server/models/User';\r\nimport type { Restaurant } from '../../../../../server/models/Restaurant';\r\n\r\nexport { List };\r\n\r\nfunction List({ likeList }: { likeList: Like[] }) {\r\n    return (\r\n        <div>\r\n            {likeList.length > 0 ? (\r\n                likeList.map((list) => {\r\n                    return <ListItem key={Math.random()} list={list._id as Restaurant} />;\r\n                })\r\n            ) : (\r\n                <div className=\"style-wrapper-no-review\">\r\n                    <div className=\"txt-no-review\">😭</div>\r\n                    <p>목록이 없어요.</p>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../../renderer/store/hooks';\r\nimport { RESET_CHECKED, RESET_RESTAURANT_LIST } from '../../../../../renderer/_reducers/_slices/myListSlice';\r\nimport { API_URL } from '../../../../../renderer/CONSTANT_URL';\r\n\r\nexport { ButtonGroup };\r\n\r\nfunction ButtonGroup() {\r\n    const dispatch = useAppDispatch();\r\n    const countChecked = useAppSelector((state) => state.myListSlice.countChecked);\r\n    const restaurantToDelete = useAppSelector((state) => state.myListSlice.restaurantToMove);\r\n\r\n    async function handleDelete() {\r\n        if (restaurantToDelete.length > 0) {\r\n            const deletePromise = restaurantToDelete.map((item) => deleteLikeList(item));\r\n\r\n            try {\r\n                // Promise.all은 deletePromise 배열 내 모든 값의 fulfill 혹은 첫 reject를 기다린다.\r\n                const result = await Promise.all(deletePromise);\r\n\r\n                result.forEach((_, i) => {\r\n                    if (i === result.length - 1) window.location.reload();\r\n                });\r\n            } catch (err) {\r\n                console.error('삭제 중 오류가 발생했습니다.', err);\r\n            }\r\n        }\r\n    }\r\n\r\n    async function deleteLikeList(id: string) {\r\n        const res = await fetch(`${API_URL}/users/like/${id}`, {\r\n            credentials: 'include',\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n\r\n        const data = await res.json();\r\n\r\n        return data;\r\n    }\r\n\r\n    function clearCheckbox() {\r\n        dispatch(RESET_CHECKED()); // 체크박스 해제\r\n        dispatch(RESET_RESTAURANT_LIST([])); // 리스트 비우기\r\n    }\r\n\r\n    return (\r\n        <div className=\"container-button-move like\">\r\n            <button type=\"reset\" onClick={clearCheckbox}>\r\n                선택 해제\r\n            </button>\r\n            <button type=\"button\" disabled={countChecked ? false : true} onClick={handleDelete}>\r\n                <span className=\"txt-copy-del\">삭제</span>\r\n                <span>{countChecked}</span>\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { List } from './List';\r\nimport { ButtonGroup } from './ButtonGroup';\r\nimport type { Like } from '../../../../../server/models/User';\r\n\r\nexport { Form };\r\n\r\nfunction Form({ likeList }: { likeList: Like[] }) {\r\n    return (\r\n        <form>\r\n            <List likeList={likeList} />\r\n            <ButtonGroup />\r\n        </form>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { useAppDispatch } from '../../../../renderer/store/hooks';\r\nimport {\r\n    DELETE_LIKELIST_MODAL,\r\n    RESET_CHECKED,\r\n    RESET_RESTAURANT_LIST,\r\n} from '../../../../renderer/_reducers/_slices/myListSlice';\r\nimport imgClose from '/images/icon-plus.svg';\r\n\r\nexport { CloseButton };\r\n\r\nfunction CloseButton() {\r\n    const dispatch = useAppDispatch();\r\n\r\n    function handleClose() {\r\n        const app = document.querySelector('.app');\r\n        app?.classList.remove('modal-mode');\r\n\r\n        dispatch(DELETE_LIKELIST_MODAL(false));\r\n        dispatch(RESET_CHECKED());\r\n        dispatch(RESET_RESTAURANT_LIST([]));\r\n    }\r\n\r\n    return (\r\n        <button type=\"button\" className=\"button-close\" onClick={handleClose}>\r\n            <img src={imgClose} alt=\"X 아이콘\" className=\"img-close\" />\r\n        </button>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppSelector } from '../../../../renderer/store/hooks';\r\nimport { API_URL } from '../../../../renderer/CONSTANT_URL';\r\nimport { Form } from './Form/Form';\r\nimport { CloseButton } from './CloseButton';\r\nimport type { Like, UserInfo } from '../../../../server/models/User';\r\n\r\nexport { DeleteMultiLike };\r\n\r\nfunction DeleteMultiLike({ userInfo }: { userInfo: UserInfo | null }) {\r\n    const [show, setShow] = useState(false);\r\n    const [likeList, setLikeList] = useState<Like[]>([]);\r\n\r\n    const deleteLikeListModelOn = useAppSelector((state) => state.myListSlice.deleteLikeListModalOn);\r\n\r\n    useEffect(() => {\r\n        if (deleteLikeListModelOn) setShow(true);\r\n        else setShow(false);\r\n    }, [deleteLikeListModelOn]);\r\n\r\n    useEffect(() => {\r\n        if (userInfo !== null) {\r\n            getLikeList().then((data) => {\r\n                if (data.success) {\r\n                    setLikeList(data.likeList);\r\n                }\r\n            });\r\n        }\r\n    }, [userInfo]);\r\n\r\n    async function getLikeList() {\r\n        const res = await fetch(`${API_URL}/users/like`, {\r\n            credentials: 'include',\r\n            method: 'GET',\r\n        });\r\n        const data = (await res.json()) as { success: boolean; likeList: Like[] };\r\n\r\n        return data;\r\n    }\r\n\r\n    return (\r\n        <article className={`modal-group-item ${show ? 'on' : ''}`}>\r\n            <h4>목록 삭제</h4>\r\n            <Form likeList={likeList} />\r\n            <CloseButton />\r\n        </article>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../renderer/store/hooks';\r\nimport {\r\n    ADD_GROUP_MODAL,\r\n    ORDER_MODAL,\r\n    SET_GROUP_NAME,\r\n    ICON_STANDARD,\r\n    MOVE_LIST_MODAL,\r\n    RESET_CHECKED,\r\n    COPY_MODAL,\r\n    RESET_RESTAURANT_LIST,\r\n    DELETE_LIKELIST_MODAL,\r\n} from '../../../renderer/_reducers/_slices/myListSlice';\r\nimport { GroupOrderModal } from './GroupOrderModal';\r\nimport { AddGroupModal } from './AddGroupModal/AddGroupModal';\r\nimport { MoveListModal } from './MoveListModal/MoveListModal';\r\nimport { WhereToCopyModal } from './WhereToCopyModal/WhereToCopyModal';\r\nimport type { UserInfo } from '../../../server/models/User';\r\nimport { DeleteMultiLike } from './DeleteMultiLike/DeleteMultiLike';\r\n\r\nexport function ModalGroup({ userInfo }: { userInfo: UserInfo | null }) {\r\n    const on = useAppSelector(\r\n        (state) =>\r\n            state.myListSlice.orderModalOn ||\r\n            state.myListSlice.addGroupModalOn ||\r\n            state.myListSlice.moveListModalOn ||\r\n            state.myListSlice.copyModalOn ||\r\n            state.myListSlice.deleteLikeListModalOn\r\n    );\r\n    const [show, setShow] = useState(false);\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        if (on === true) setShow(true);\r\n        else setShow(false);\r\n    }, [on]);\r\n\r\n    useEffect(() => {\r\n        if (show) {\r\n            document.addEventListener('click', handleClose);\r\n        }\r\n\r\n        return () => {\r\n            document.removeEventListener('click', handleClose);\r\n        };\r\n    }, [show]);\r\n\r\n    function handleClose(event: any) {\r\n        if (event.target.className === 'app modal-mode') {\r\n            const app = document.querySelector('.app');\r\n            app?.classList.remove('modal-mode');\r\n\r\n            dispatch(ORDER_MODAL(false));\r\n            dispatch(ADD_GROUP_MODAL(false));\r\n            dispatch(MOVE_LIST_MODAL(false));\r\n            dispatch(COPY_MODAL(false));\r\n            dispatch(DELETE_LIKELIST_MODAL(false));\r\n\r\n            // 새그룹추가 모달 인풋창 초기화\r\n            dispatch(SET_GROUP_NAME(''));\r\n            // 선택 아이콘 초기화\r\n            dispatch(ICON_STANDARD('/images/icon-star.svg'));\r\n            // 체크박스 카운트 초기화\r\n            dispatch(RESET_CHECKED());\r\n            // 체크된 식당의 Id 배열 초기화\r\n            dispatch(RESET_RESTAURANT_LIST([]));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={`modal-group ${show ? 'on' : ''}`}>\r\n            <GroupOrderModal />\r\n            <AddGroupModal userInfo={userInfo} />\r\n            <MoveListModal userInfo={userInfo} />\r\n            <WhereToCopyModal userInfo={userInfo} />\r\n            <DeleteMultiLike userInfo={userInfo} />\r\n        </div>\r\n    );\r\n}\r\n"],"names":["GroupOrderModal","dispatch","useAppDispatch","orderStandard","useAppSelector","state","orderModalOn","show","setShow","useState","useEffect","handleOrder","event","ORDER_STANDARD","handleClose","app","ORDER_MODAL","jsx","jsxs","imgClose","GroupNameInput","groupName","inputValue","setInputValue","handleChange","SET_GROUP_NAME","Fragment","CompleteButton","userInfo","groupIcon","handleClick","userId","API_URL","AddGroupModal","addGroupModalOn","ADD_GROUP_MODAL","ICON_STANDARD","IconSelection","List","bookmarkList","list","ListItem","_id","title","address","category","isChecked","setIsChecked","restaurantToMove","countChecked","handleCheckboxChange","INCREASE_CHECKED","PUSH_RESTAURANT_LIST","DECREASE_CHECKED","newArray","index","DELETE_RESTAURANT_LIST","ButtonGroup","restaurantToDelete","handleCopy","MOVE_LIST_MODAL","COPY_MODAL","handleDelete","deletePromise","item","deleteBookmarks","result","_","i","err","id","clearCheckbox","RESET_CHECKED","RESET_RESTAURANT_LIST","MoveListModal","bookmarkListInSameGroup","setBookmarkListInSameGroup","moveListModalOn","getBookmarkList","data","store","sameGroup","Form","CloseButton","appModalMode","GroupNameList","groupInfo","lists","name","registeredAt","date","count","setCount","user","setUser","sameName","submit","newGroupName","selectedRestaurant","closeImg","WhereToCopyModal","copyModalOn","targetGroup","groupList","setGroupList","setBookmarkList","getBookmarkGroupList","likeList","deleteLikeList","DELETE_LIKELIST_MODAL","DeleteMultiLike","setLikeList","deleteLikeListModelOn","getLikeList","ModalGroup","on"],"mappings":"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"}