{"version":3,"file":"chunk-c1371adf.js","sources":["../../../../node_modules/react-redux/es/hooks/useStore.js","../../../../node_modules/react-redux/es/hooks/useDispatch.js","../../../../renderer/store/hooks.ts","../../../../components/button/buttonGoBack.tsx"],"sourcesContent":["import { ReactReduxContext } from '../components/Context';\nimport { useReduxContext as useDefaultReduxContext, createReduxContextHook } from './useReduxContext';\n/**\r\n * Hook factory, which creates a `useStore` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useStore` hook bound to the specified context.\r\n */\n\nexport function createStoreHook(context = ReactReduxContext) {\n  const useReduxContext = // @ts-ignore\n  context === ReactReduxContext ? useDefaultReduxContext : // @ts-ignore\n  createReduxContextHook(context);\n  return function useStore() {\n    const {\n      store\n    } = useReduxContext(); // @ts-ignore\n\n    return store;\n  };\n}\n/**\r\n * A hook to access the redux store.\r\n *\r\n * @returns {any} the redux store\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useStore } from 'react-redux'\r\n *\r\n * export const ExampleComponent = () => {\r\n *   const store = useStore()\r\n *   return <div>{store.getState()}</div>\r\n * }\r\n */\n\nexport const useStore = /*#__PURE__*/createStoreHook();","import { ReactReduxContext } from '../components/Context';\nimport { useStore as useDefaultStore, createStoreHook } from './useStore';\n/**\r\n * Hook factory, which creates a `useDispatch` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useDispatch` hook bound to the specified context.\r\n */\n\nexport function createDispatchHook(context = ReactReduxContext) {\n  const useStore = // @ts-ignore\n  context === ReactReduxContext ? useDefaultStore : createStoreHook(context);\n  return function useDispatch() {\n    const store = useStore(); // @ts-ignore\n\n    return store.dispatch;\n  };\n}\n/**\r\n * A hook to access the redux `dispatch` function.\r\n *\r\n * @returns {any|function} redux store's `dispatch` function\r\n *\r\n * @example\r\n *\r\n * import React, { useCallback } from 'react'\r\n * import { useDispatch } from 'react-redux'\r\n *\r\n * export const CounterComponent = ({ value }) => {\r\n *   const dispatch = useDispatch()\r\n *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])\r\n *   return (\r\n *     <div>\r\n *       <span>{value}</span>\r\n *       <button onClick={increaseCounter}>Increase counter</button>\r\n *     </div>\r\n *   )\r\n * }\r\n */\n\nexport const useDispatch = /*#__PURE__*/createDispatchHook();","import { useDispatch, useSelector } from 'react-redux';\r\nimport type { TypedUseSelectorHook } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './index.js';\r\n\r\n// 일반 `useDispatch`, `useSelector`를 앱 전체에서 사용\r\nexport const useAppDispatch: () => AppDispatch = useDispatch;\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import React from 'react';\r\nimport { useAppSelector } from '../../renderer/store/hooks';\r\n\r\nexport { ButtonGoBack };\r\n\r\nfunction ButtonGoBack() {\r\n    const isLoggingIn = useAppSelector((state) => state.loginSlice.isLoggingIn); // 로그인 중에는 톱바의 뒤로가기 비활성화\r\n    const isSigningUp = useAppSelector((state) => state.signupSlice.isSigningUp);\r\n\r\n    function goBack() {\r\n        if (window.location.pathname.includes('/community/search/')) {\r\n            window.location.href = '/community';\r\n        } else {\r\n            window.history.back();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <button\r\n            className=\"button-back\"\r\n            onClick={goBack}\r\n            aria-label=\"뒤로가기\"\r\n            style={isLoggingIn || isSigningUp ? { visibility: 'hidden' } : {}}\r\n        />\r\n    );\r\n}\r\n"],"names":["createStoreHook","context","ReactReduxContext","useReduxContext","useDefaultReduxContext","createReduxContextHook","store","useStore","createDispatchHook","useDefaultStore","useDispatch","useAppDispatch","useAppSelector","useSelector","ButtonGoBack","isLoggingIn","state","isSigningUp","goBack","jsx"],"mappings":"qGASO,SAASA,EAAgBC,EAAUC,EAAmB,CAC3D,MAAMC,EACNF,IAAYC,EAAoBE,EAChCC,EAAuBJ,CAAO,EAC9B,OAAO,UAAoB,CACzB,KAAM,CACJ,MAAAK,CACD,EAAGH,EAAe,EAEnB,OAAOG,CACX,CACA,CAiBY,MAACC,EAAwBP,EAAe,EC5B7C,SAASQ,EAAmBP,EAAUC,EAAmB,CAC9D,MAAMK,EACNN,IAAYC,EAAoBO,EAAkBT,EAAgBC,CAAO,EACzE,OAAO,UAAuB,CAG5B,OAFcM,IAED,QACjB,CACA,CAuBY,MAACG,EAA2BF,EAAkB,ECnC7CG,EAAoCD,EACpCE,EAAkDC,ECD/D,SAASC,GAAe,CACpB,MAAMC,EAAcH,EAAgBI,GAAUA,EAAM,WAAW,WAAW,EACpEC,EAAcL,EAAgBI,GAAUA,EAAM,YAAY,WAAW,EAE3E,SAASE,GAAS,CACV,OAAO,SAAS,SAAS,SAAS,oBAAoB,EACtD,OAAO,SAAS,KAAO,aAEvB,OAAO,QAAQ,MAEvB,CAGI,OAAAC,EAAA,IAAC,SAAA,CACG,UAAU,cACV,QAASD,EACT,aAAW,OACX,MAAOH,GAAeE,EAAc,CAAE,WAAY,UAAa,CAAC,CAAA,CAAA,CAG5E","x_google_ignoreList":[0,1]}