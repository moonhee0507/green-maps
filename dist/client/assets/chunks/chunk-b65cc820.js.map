{"version":3,"file":"chunk-b65cc820.js","sources":["../../../../pages/community/component/ButtonGroup/ButtonGroup.tsx","../../../../pages/community/component/CommunityDetail/CommunityDetail.tsx","../../../../pages/community/component/PostSection/NoticePostOnly.tsx","../../../../pages/community/component/PostSection/PostListItem.tsx","../../../../pages/community/component/PostSection/PostList.tsx","../../../../pages/community/component/PostSection/PostSection.tsx","../../../../pages/community/Community.tsx","../../../../pages/community/CommunityMain.tsx"],"sourcesContent":["import React from 'react';\r\n\r\nexport { ButtonGroup };\r\n\r\nfunction ButtonGroup({ isLoggedIn }: { isLoggedIn: boolean }) {\r\n    function goToWrite() {\r\n        if (isLoggedIn) {\r\n            window.location.href = `/community/create`;\r\n        } else {\r\n            if (confirm('로그인이 필요한 서비스입니다.\\n로그인 하시겠습니까?')) {\r\n                window.location.href = `/login`;\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <button type=\"button\" className=\"link-create\" onClick={goToWrite}>\r\n            글쓰기\r\n        </button>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { SubjectBox } from './SubjectBox';\r\nimport { useSelector } from 'react-redux';\r\nimport { API_URL } from '../../../../renderer/CONSTANT_URL';\r\nimport type { Post } from '../../../../server/models/Post';\r\nimport type { RootState } from '../../../../renderer/store';\r\n\r\nexport { CommunityDetail };\r\n\r\nfunction CommunityDetail(props: { posts: Array<Post> }) {\r\n    const total = useSelector((state: RootState) => state.postSlice.post.TOTAL);\r\n    const subject = useSelector((state: RootState) => state.postSlice.SUBJECT);\r\n\r\n    const [todayCount, setTodayCount] = useState<number>(0);\r\n\r\n    useEffect(() => {\r\n        getTodayCount(subject).then((res: { todayCount: number }) => setTodayCount(res.todayCount));\r\n\r\n        async function getTodayCount(subjectName: string) {\r\n            const encodeSubjectName = encodeURIComponent(subjectName);\r\n            const res = await fetch(`${API_URL}/today/${encodeSubjectName}`, {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            });\r\n            const count = await res.json();\r\n            return count;\r\n        }\r\n    }, [props.posts]);\r\n\r\n    return (\r\n        <div className=\"container-newpost-selectbox\">\r\n            <p className=\"txt-postinfo\">\r\n                새글 <span>{todayCount}</span>/{total}\r\n            </p>\r\n            <SubjectBox />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { API_URL } from '../../../../renderer/CONSTANT_URL';\r\nimport type { Post } from '../../../../server/models/Post';\r\n\r\nexport { NoticePostOnly };\r\n\r\nfunction NoticePostOnly() {\r\n    const [notices, setNotices] = useState<Post[] | null>(null);\r\n\r\n    const ulElement = useRef<HTMLUListElement>(null);\r\n\r\n    useEffect(() => {\r\n        getNotice().then((data) => {\r\n            if (data.total >= 1) {\r\n                setNotices(data.lists);\r\n            } else {\r\n                setNotices(null);\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    async function getNotice() {\r\n        const subjectName = '공지사항';\r\n\r\n        const res = await fetch(`${API_URL}/subjects/${encodeURIComponent(subjectName)}`, {\r\n            headers: {\r\n                'Cache-Control': 'max-age=31536000',\r\n            },\r\n        });\r\n        const data = await res.json();\r\n\r\n        return data;\r\n    }\r\n\r\n    return (\r\n        <article className=\"article-notice\">\r\n            <h3 className=\"sr-only\">공지사항</h3>\r\n            {notices !== null ? (\r\n                <ul className=\"ul-notice\" ref={ulElement}>\r\n                    {notices.map((notice, index) => {\r\n                        return <NoticeListItem key={Math.random()} posts={notice} />;\r\n                    })}\r\n                </ul>\r\n            ) : null}\r\n        </article>\r\n    );\r\n}\r\n\r\nfunction NoticeListItem({ posts }: { posts: Post }) {\r\n    const { _id, title, registeredAt, updatedAt } = posts;\r\n\r\n    // 1줄 말줄임 처리하기\r\n    return (\r\n        <li className=\"li-notice\">\r\n            <a href={`/community/${_id}`}>\r\n                <p className=\"txt-title\">\r\n                    <span>[공지사항] </span>\r\n                    <em>{title}</em>\r\n                </p>\r\n            </a>\r\n        </li>\r\n    );\r\n}\r\n","import React, { ForwardedRef, forwardRef } from 'react';\r\nimport { Title } from './component/Title';\r\nimport { PreviewText } from './component/PreviewText';\r\nimport { PostItemDetail } from './component/PostItemDetail';\r\nimport { Subject } from './component/Subject';\r\nimport type { Post } from '../../../../server/models/Post';\r\n\r\nexport default forwardRef(PostListItem);\r\n\r\nfunction PostListItem(props: { postInfo: Post }, ref: ForwardedRef<HTMLLIElement>) {\r\n    const { _id, subject, owner, title, content, photo, like, registeredAt, comments } = props.postInfo;\r\n    const removeTagContent = removeUnnecessaryString(content);\r\n    const imageSize = '80px';\r\n\r\n    return (\r\n        <li ref={ref}>\r\n            <a\r\n                href={`/community/${_id}`}\r\n                style={{\r\n                    width: '100%',\r\n                    display: 'flex',\r\n                    padding: '20px',\r\n                }}\r\n            >\r\n                <dl\r\n                    style={{\r\n                        width: `calc(100% - ${photo && photo.length > 0 ? imageSize : '0px'})`,\r\n                    }}\r\n                >\r\n                    <Subject subject={subject} />\r\n                    <Title title={title} />\r\n                    <PreviewText content={removeTagContent} />\r\n                    <PostItemDetail owner={owner} like={like} registeredAt={registeredAt} comments={comments} />\r\n                </dl>\r\n                {photo && photo.length > 0 ? (\r\n                    <dd>\r\n                        <img\r\n                            src={photo[0].src}\r\n                            alt=\"\"\r\n                            style={{\r\n                                width: imageSize,\r\n                                height: imageSize,\r\n                                objectFit: 'cover',\r\n                            }}\r\n                        />\r\n                    </dd>\r\n                ) : null}\r\n            </a>\r\n        </li>\r\n    );\r\n}\r\n\r\n/**\r\n * Tag와 &nbsp;같은 특수문자 제거 함수\r\n */\r\nfunction removeUnnecessaryString(html: string): string {\r\n    return html.replaceAll(/<[^>]*>/g, '').replaceAll(/&[a-zA-Z0-9]*;/g, '');\r\n}\r\n","import React, { useEffect, useRef } from 'react';\r\nimport PostListItem from './PostListItem';\r\nimport useIntersectionObserver from '../../useIntersectionObserver';\r\nimport { useDispatch, useStore } from 'react-redux';\r\nimport type { Post } from '../../../../server/models/Post';\r\n\r\nexport { PostList };\r\n\r\nfunction PostList(props: { posts: Array<Post>; limit: number }) {\r\n    const { posts, limit } = props;\r\n    const target = useRef<HTMLLIElement>(null);\r\n\r\n    const store = useStore<any>();\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [observe, unobserve] = useIntersectionObserver(() => {\r\n        // 현재 페이지가 마지막 페이지가 아닐 때만 페이지 증가\r\n        const lastPage = Math.ceil(store.getState().postSlice.post.TOTAL / limit);\r\n        const currentPage = store.getState().postSlice.post.CURRENT_PAGE;\r\n\r\n        if (currentPage < lastPage) {\r\n            dispatch({\r\n                type: 'postSlice/POST_IN_PAGE',\r\n                TOTAL: store.getState().postSlice.post.TOTAL,\r\n                CURRENT_PAGE: store.getState().postSlice.post.CURRENT_PAGE + 1,\r\n            });\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        const lastPage = Math.ceil(store.getState().postSlice.post.TOTAL / limit);\r\n        const currentPage = store.getState().postSlice.post.CURRENT_PAGE;\r\n\r\n        if (currentPage === lastPage) {\r\n            unobserve(target.current);\r\n            // console.log(`currentPage가 ${currentPage}이고 lastPage가 ${lastPage}여서 감시 중단`);\r\n        } else if (currentPage < lastPage) {\r\n            observe(target.current);\r\n            // console.log(`currentPage가 ${currentPage}이고 lastPage가 ${lastPage}여서 감시 계속 =======`);\r\n        }\r\n    }, [observe, unobserve]);\r\n\r\n    return (\r\n        <ul className=\"wrapper-posts\">\r\n            {posts.map((post, i) => {\r\n                if (i === posts.length - 1) {\r\n                    return <PostListItem key={post._id} postInfo={post} ref={target} />;\r\n                } else return <PostListItem key={post._id} postInfo={post} />;\r\n            })}\r\n        </ul>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { NoticePostOnly } from './NoticePostOnly';\r\nimport { PostList } from './PostList';\r\nimport type { Post } from '../../../../server/models/Post';\r\n\r\nexport { PostSection };\r\n\r\nfunction PostSection(props: { posts: Array<Post>; limit: number }) {\r\n    const { posts, limit } = props;\r\n\r\n    return (\r\n        <section>\r\n            <h3 className=\"sr-only\">게시글 목록</h3>\r\n            <NoticePostOnly />\r\n            <PostList posts={posts} limit={limit} />\r\n        </section>\r\n    );\r\n}\r\n","import React, { useRef, useState } from 'react';\r\nimport { CommunityDetail } from './component/CommunityDetail/CommunityDetail.js';\r\nimport { PostSection } from './component/PostSection/PostSection.js';\r\nimport type { Post } from '../../server/models/Post.js';\r\n\r\nexport { Community };\r\n\r\nexport type PostProps = {\r\n    total: number;\r\n    countLimit?: number;\r\n    currentPage?: number;\r\n    lists: Array<Post>;\r\n};\r\n\r\nfunction Community({ posts, limit, isLoggedIn }: { posts: Array<Post>; limit: number; isLoggedIn: boolean }) {\r\n    const mainElement = useRef<HTMLElement>(null);\r\n    const [scroll, setScroll] = useState(false);\r\n\r\n    function clickGoUpButton() {\r\n        mainElement?.current?.scrollTo({ top: 0, left: 0, behavior: 'auto' });\r\n    }\r\n\r\n    function handleScroll() {\r\n        if (mainElement?.current?.scrollTop === 0) setScroll(false);\r\n        else setScroll(true);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <main className=\"main-community\" ref={mainElement} onScroll={handleScroll}>\r\n                <CommunityDetail posts={posts} />\r\n                <PostSection posts={posts} limit={limit} />\r\n            </main>\r\n            {scroll && (\r\n                <button id=\"buttonGoUp\" onClick={clickGoUpButton} type=\"button\">\r\n                    맨위로\r\n                </button>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { ButtonGroup } from './component/ButtonGroup/ButtonGroup';\r\nimport { Community } from './Community';\r\nimport type { Post } from '../../server/models/Post';\r\n\r\nexport default function CommunityMain({\r\n    isLoggedIn,\r\n    posts,\r\n    limit,\r\n}: {\r\n    isLoggedIn: boolean;\r\n    posts: Array<Post>;\r\n    limit: number;\r\n}) {\r\n    return (\r\n        <>\r\n            <ButtonGroup isLoggedIn={isLoggedIn} />\r\n            <Community posts={posts} limit={limit} isLoggedIn={isLoggedIn} />\r\n        </>\r\n    );\r\n}\r\n"],"names":["ButtonGroup","isLoggedIn","goToWrite","jsx","CommunityDetail","props","total","useSelector","state","subject","todayCount","setTodayCount","useState","useEffect","getTodayCount","res","subjectName","encodeSubjectName","API_URL","jsxs","SubjectBox","NoticePostOnly","notices","setNotices","ulElement","useRef","getNotice","data","notice","index","NoticeListItem","posts","_id","title","registeredAt","updatedAt","PostListItem","forwardRef","ref","owner","content","photo","like","comments","removeTagContent","removeUnnecessaryString","imageSize","Subject","Title","PreviewText","PostItemDetail","html","PostList","limit","target","store","useStore","dispatch","useDispatch","observe","unobserve","useIntersectionObserver","lastPage","currentPage","post","i","PostSection","Community","mainElement","scroll","setScroll","clickGoUpButton","_a","handleScroll","Fragment","CommunityMain"],"mappings":"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"}