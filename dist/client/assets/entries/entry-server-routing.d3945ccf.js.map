{"version":3,"mappings":"2qXAGAA,EAAaC,CAAgB,ECE7B,MAAMC,EAAWC,EAAc,CAAE,YAAa,EAAM,GACpD,eAAeC,GAAiB,CAC5B,MAAMC,EAAcC,IACpB,OAAAC,EAAaF,EAAa,CAAE,YAAa,GAAM,qBAAsB,IAAI,CAAE,EAC3EE,EAAaF,EAAa,MAAMG,EAAoBH,EAAY,OAAO,CAAC,EACxEI,IACOJ,CACX,CACA,SAASI,GAAoB,CACzB,MAAMC,EAAaP,EAAc,CAAE,YAAa,EAAM,GACtDQ,EAAYT,IAAaQ,EAAY,gDAAgDR,YAAmBQ,4FAAqG,CACjN,CACA,eAAeF,EAAoBI,EAAQ,CACvC,MAAMC,EAAsB,GACtB,CAAE,aAAAC,EAAc,YAAAC,CAAW,EAAK,MAAMC,EAAgB,EAAI,EAChE,OAAAT,EAAaM,EAAqB,CAC9B,cAAeC,EACf,aAAcC,CACtB,CAAK,EACDR,EAAaM,EAAqB,MAAMI,EAAwBH,EAAcC,EAAaH,CAAM,CAAC,EAClGE,EACK,OAAQI,GAAMA,EAAE,WAAa,cAAc,EAC3C,QAASA,GAAM,CAChB,IAAIC,EACJC,EAAc,EAAG,GAAAD,EAAKD,EAAE,eAAiB,MAAQC,IAAO,SAAkBA,EAAG,gBAAiB,oCAAoCD,EAAE,qSAAsS,CAAE,eAAgB,GAAO,SAAU,EAAM,EAC3d,CAAK,EACML,CACX,CC/BAQ,IAMAC,EAA4B,EAAoB,EAChDC,IACA,eAAeA,GAAU,CACrB,IAAIJ,EAAIK,EACR,MAAMnB,EAAc,MAAMD,IAC1B,MAAMqB,EAA0BpB,EAAa,EAAK,EAClDqB,EAAWrB,EAAa,gBAAgB,EACxC,OAAQmB,GAAML,EAAKd,EAAY,SAAS,kBAAoB,MAAQmB,IAAO,OAAS,OAASA,EAAG,KAAKL,EAAId,CAAW,EACxH","names":["setPageFiles","pageFilesExports","urlFirst","getCurrentUrl","getPageContext","pageContext","getPageContextSerializedInHtml","objectAssign","loadPageFilesClient","assertPristineUrl","urlCurrent","assertUsage","pageId","pageContextAddendum","pageFilesAll","pageConfigs","getPageFilesAll","loadPageFilesClientSide","p","_a","assertWarning","assertServerRouting","onClientEntry_ServerRouting","hydrate","_b","executeOnRenderClientHook","assertHook"],"sources":["../../../../node_modules/vite-plugin-ssr/dist/esm/client/pageFiles.js","../../../../node_modules/vite-plugin-ssr/dist/esm/client/getPageContext.js","../../../../node_modules/vite-plugin-ssr/dist/esm/client/entry.js"],"sourcesContent":["import { setPageFiles } from '../shared/getPageFiles';\n// @ts-ignore\nimport * as pageFilesExports from 'virtual:vite-plugin-ssr:importUserCode:client:server-routing';\nsetPageFiles(pageFilesExports);\n","import { assertUsage, assertWarning, getCurrentUrl, objectAssign } from './utils';\nimport { getPageContextSerializedInHtml } from './getPageContextSerializedInHtml';\nimport { getPageFilesAll } from '../shared/getPageFiles';\nimport { loadPageFilesClientSide } from './loadPageFilesClientSide';\nexport { getPageContext };\nconst urlFirst = getCurrentUrl({ withoutHash: true });\nasync function getPageContext() {\n    const pageContext = getPageContextSerializedInHtml();\n    objectAssign(pageContext, { isHydration: true, isBackwardNavigation: null });\n    objectAssign(pageContext, await loadPageFilesClient(pageContext._pageId));\n    assertPristineUrl();\n    return pageContext;\n}\nfunction assertPristineUrl() {\n    const urlCurrent = getCurrentUrl({ withoutHash: true });\n    assertUsage(urlFirst === urlCurrent, `URL manipulated before hydration finished (\\`${urlFirst}\\` to \\`${urlCurrent}\\`). Ensure the hydration finishes with \\`onHydrationEnd()\\` before manipulating the URL.`);\n}\nasync function loadPageFilesClient(pageId) {\n    const pageContextAddendum = {};\n    const { pageFilesAll, pageConfigs } = await getPageFilesAll(true);\n    objectAssign(pageContextAddendum, {\n        _pageFilesAll: pageFilesAll,\n        _pageConfigs: pageConfigs\n    });\n    objectAssign(pageContextAddendum, await loadPageFilesClientSide(pageFilesAll, pageConfigs, pageId));\n    pageFilesAll\n        .filter((p) => p.fileType !== '.page.server')\n        .forEach((p) => {\n        var _a;\n        assertWarning(!((_a = p.fileExports) === null || _a === void 0 ? void 0 : _a.onBeforeRender), `\\`export { onBeforeRender }\\` of ${p.filePath} is loaded in the browser but never executed (because you are using Server-side Routing). In order to reduce the size of you browser-side JavaScript, define \\`onBeforeRender()\\` in \\`.page.server.js\\` instead. See https://vite-plugin-ssr.com/onBeforeRender-isomorphic#server-routing`, { showStackTrace: false, onlyOnce: true });\n    });\n    return pageContextAddendum;\n}\n","import { assertServerRouting } from '../utils/assertRoutingType';\nassertServerRouting();\nimport './pageFiles';\nimport { getPageContext } from './getPageContext';\nimport { executeOnRenderClientHook } from './executeOnRenderClientHook';\nimport { assertHook } from '../shared/getHook';\nimport { onClientEntry_ServerRouting } from './utils';\nonClientEntry_ServerRouting(import.meta.env.PROD);\nhydrate();\nasync function hydrate() {\n    var _a, _b;\n    const pageContext = await getPageContext();\n    await executeOnRenderClientHook(pageContext, false);\n    assertHook(pageContext, 'onHydrationEnd'); // TODO\n    await ((_b = (_a = pageContext.exports).onHydrationEnd) === null || _b === void 0 ? void 0 : _b.call(_a, pageContext));\n}\n"],"file":"assets/entries/entry-server-routing.d3945ccf.js"}