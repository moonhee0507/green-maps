{"version":3,"file":"pages_community_post_index.page.0fb7e712.js","sources":["../../../../pages/community/post/ContentSection/TextArea/TextArea.tsx","../../../../pages/community/post/ContentSection/PostLikeButton.tsx","../../../../pages/community/post/ContentSection/MoreButton.tsx","../../../../pages/community/post/ContentSection/ContentSection.tsx","../../../../pages/community/post/CommentSection/WriteComment/SubmitButton.tsx","../../../../pages/community/post/CommentSection/WriteComment/WriteComment.tsx","../../../../pages/community/post/CommentSection/Notice.tsx","../../../../pages/community/post/CommentSection/CommentList/MoreButton.tsx","../../../../pages/community/post/CommentSection/CommentList/CommentList.tsx","../../../../pages/community/post/CommentSection/CommentSection.tsx","../../../../pages/community/post/ModalGroup/EditDeleteNotifyModal/EditDeleteNotifyModal.tsx","../../../../pages/community/post/ModalGroup/ModalGroup.tsx","../../../../pages/community/post/index.page.tsx"],"sourcesContent":["import React from 'react';\r\nimport DOMPurify from 'isomorphic-dompurify';\r\n\r\nexport { TextArea };\r\n\r\nfunction TextArea(props: { content: string }) {\r\n    const htmlString = props.content;\r\n\r\n    return typeof window !== 'undefined' ? (\r\n        <div\r\n            dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(htmlString) }}\r\n            style={{ wordBreak: 'keep-all', marginTop: '40px' }}\r\n        />\r\n    ) : (\r\n        <div style={{ wordBreak: 'keep-all', marginTop: '40px' }} />\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { API_URL } from '../../../../renderer/CONSTANT_URL';\r\nimport imgHeart from '/images/icon-heart.svg';\r\n\r\nexport { PostLikeButton };\r\n\r\nfunction PostLikeButton(props: { postId: string; like: Array<{ user: string }> | undefined }) {\r\n    const { postId, like } = props;\r\n    const [userId, setUserId] = useState<string | null>(null);\r\n    const [likeCount, setLikeCount] = useState<number>(like ? like.length : 0);\r\n    const [buttonOn, setButtonOn] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        getUserId();\r\n        async function getUserId() {\r\n            try {\r\n                const res = await fetch(`${API_URL}/users`);\r\n                const data = await res.json();\r\n\r\n                if (data.success) {\r\n                    setUserId(data.user.userId);\r\n                } else {\r\n                    setUserId(null);\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (like) {\r\n            setButtonOn(like.some((userInfo) => userInfo.user === userId));\r\n        }\r\n    }, [userId]);\r\n\r\n    function handleClick() {\r\n        buttonOn ? delLike() : addLike();\r\n        setButtonOn(buttonOn ? false : true);\r\n    }\r\n\r\n    async function addLike() {\r\n        const res = await fetch(`${API_URL}/posts/${postId}/like`, {\r\n            credentials: 'include',\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ user: userId }),\r\n        });\r\n\r\n        if (res.ok) setLikeCount(likeCount + 1);\r\n        else throw new Error();\r\n    }\r\n\r\n    async function delLike() {\r\n        const res = await fetch(`${API_URL}/posts/${postId}/like`, {\r\n            credentials: 'include',\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ user: userId }),\r\n        });\r\n\r\n        if (res.ok) setLikeCount(likeCount - 1);\r\n        else throw new Error();\r\n    }\r\n\r\n    return (\r\n        <button className=\"button-like\" type=\"button\" onClick={handleClick} style={{ margin: '60px auto 0px' }}>\r\n            <img src={imgHeart} alt=\"좋아요 이미지\" className={`img-like review ${buttonOn ? 'on' : ''}`} />\r\n            <span style={{ minWidth: '20px' }}>{likeCount}</span>\r\n        </button>\r\n    );\r\n}\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { useAppDispatch } from '../../../../renderer/store/hooks';\r\nimport {\r\n    EDIT_DELETE_NOTIFY_MODAL,\r\n    SET_POST_ID,\r\n    SAME_USER_OWNER,\r\n    SET_ACCESS_TARGET,\r\n} from '../../../../renderer/_reducers/_slices/postSlice';\r\nimport appModalMode from '../../../../components/modal/appModalMode';\r\nimport type { UserInfo } from '../../../../server/models/User';\r\n\r\nexport { MoreButton };\r\n\r\nfunction MoreButton({ userInfo, owner, postId }: { userInfo: UserInfo | null; owner: string; postId: string }) {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const moreButtonRef = useRef<HTMLButtonElement>(null);\r\n    const [user, setUser] = useState<UserInfo | null>(null);\r\n    const [nickname, setNickname] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (userInfo !== null) setUser(userInfo);\r\n        if (typeof owner === 'string') {\r\n            setNickname(owner);\r\n        }\r\n    }, [userInfo]);\r\n\r\n    function handleClick() {\r\n        appModalMode(true);\r\n\r\n        dispatch(EDIT_DELETE_NOTIFY_MODAL(true));\r\n        dispatch(SAME_USER_OWNER(user?.nickName === nickname));\r\n        dispatch(SET_POST_ID(postId));\r\n        dispatch(SET_ACCESS_TARGET('post'));\r\n    }\r\n\r\n    return (\r\n        <button\r\n            type=\"button\"\r\n            aria-label=\"더보기 버튼\"\r\n            className=\"button-more postitem\"\r\n            onClick={handleClick}\r\n            ref={moreButtonRef}\r\n        />\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { TextArea } from './TextArea/TextArea';\r\nimport type { Post, CommentInPost } from '../../../../server/models/Post';\r\nimport { PostLikeButton } from './PostLikeButton';\r\nimport { isSameDay } from '../../../../components/Date/isSameDay';\r\nimport { MoreButton } from './MoreButton';\r\nimport { UserInfo } from '../../../../server/models/User';\r\n\r\nexport { ContentSection };\r\n\r\nfunction ContentSection({ userInfo, postInfo }: { userInfo: UserInfo | null; postInfo: Post }) {\r\n    const { subject, content, like, owner, photo, registeredAt, comments, title, _id } = postInfo;\r\n\r\n    const [nickname, setNickname] = useState<string>('');\r\n\r\n    useEffect(() => {\r\n        if (typeof owner !== 'undefined' && typeof owner.user_id === 'object') {\r\n            setNickname(owner.user_id.nickName);\r\n        }\r\n    }, [owner]);\r\n\r\n    return (\r\n        <section className=\"section-post-content\">\r\n            <h3 aria-label=\"게시글 제목\" className=\"txt-post-title\">\r\n                {title}\r\n            </h3>\r\n            <div>\r\n                <p aria-label=\"작성자\" className=\"txt-post-owner\">\r\n                    {nickname}\r\n                </p>\r\n                <div className=\"container-post-subinfo\">\r\n                    <LikeCount like={like} />\r\n                    <CommentCount comments={comments} />\r\n                    <Time registeredAt={registeredAt} />\r\n                </div>\r\n            </div>\r\n            <TextArea content={content} />\r\n            <PostLikeButton postId={_id} like={like} />\r\n            <MoreButton userInfo={userInfo} owner={nickname} postId={_id} />\r\n        </section>\r\n    );\r\n}\r\n\r\nfunction LikeCount(props: { like?: Array<{ user: string }> }) {\r\n    return (\r\n        <>\r\n            <dt className=\"sr-only\">좋아요 개수</dt>\r\n            <dd className=\"container-count-like\">\r\n                <span>{props.like?.length || 0}</span>\r\n            </dd>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction CommentCount(props: { comments?: Array<CommentInPost> }) {\r\n    return (\r\n        <>\r\n            <dt className=\"sr-only\">댓글 개수</dt>\r\n            <dd className=\"container-count-comment\">\r\n                <span>{props.comments?.length || 0}</span>\r\n            </dd>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction Time(props: { registeredAt: string }) {\r\n    const { registeredAt } = props;\r\n\r\n    const date = isSameDay(registeredAt)\r\n        ? `${registeredAt.split('. ').at(-1)?.split(':')[0]}:${registeredAt.split('. ').at(-1)?.split(':')[1]}`\r\n        : registeredAt.slice(0, 13);\r\n\r\n    return (\r\n        <>\r\n            <dt className=\"sr-only\">작성 시간</dt>\r\n            <dd className=\"container-post-time\">\r\n                <time dateTime=\"\">{date}</time>\r\n            </dd>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { API_URL } from '../../../../../renderer/CONSTANT_URL';\r\nimport type { UserInfo } from '../../../../../server/models/User';\r\n\r\nexport { SubmitButton };\r\n\r\nfunction SubmitButton({ postId, content }: { postId: string; content: string | null }) {\r\n    const handleClick = async () => {\r\n        const res = await fetch(`${API_URL}/users/`, {\r\n            credentials: 'include',\r\n            method: 'GET',\r\n        });\r\n        const data = (await res.json()) as {\r\n            success: boolean;\r\n            message?: string;\r\n            errorMessage?: string;\r\n            user?: UserInfo;\r\n        };\r\n\r\n        if (data.success && data.user) {\r\n            submit(data.user._id);\r\n        } else {\r\n            if (confirm('로그인이 필요한 서비스입니다.\\n로그인 하시겠습니까?')) {\r\n                window.location.href = `/login`;\r\n            }\r\n        }\r\n    };\r\n\r\n    async function submit(user_id: string) {\r\n        try {\r\n            if (content !== null && content.length > 0) {\r\n                const body = {\r\n                    user_id: user_id,\r\n                    content: content,\r\n                };\r\n\r\n                const res = await fetch(`${API_URL}/posts/${postId}/comment`, {\r\n                    credentials: 'include',\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify(body),\r\n                });\r\n\r\n                const data = await res.json();\r\n\r\n                if (data.success === true) {\r\n                    window.location.reload();\r\n                }\r\n            }\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <button\r\n            type=\"button\"\r\n            onClick={handleClick}\r\n            disabled={content !== null && content.length > 0 ? false : true}\r\n            aria-label=\"댓글 등록 버튼\"\r\n        />\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { SubmitButton } from './SubmitButton';\r\n\r\nexport { WriteComment };\r\n\r\nfunction WriteComment({ postId }: { postId: string }) {\r\n    const [content, setContent] = useState<string | null>(null);\r\n\r\n    function handleChange(event: React.ChangeEvent<HTMLTextAreaElement>) {\r\n        setContent(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <form className=\"form-create-comment\">\r\n            <label htmlFor=\"comment\" className=\"sr-only\">\r\n                댓글 작성하기\r\n            </label>\r\n            <textarea id=\"comment\" onChange={handleChange} minLength={1} maxLength={100} />\r\n            <SubmitButton postId={postId} content={content} />\r\n        </form>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nexport { Notice };\r\n\r\nfunction Notice() {\r\n    return (\r\n        <div className=\"container-notice comment\">\r\n            <em>게시글과 관련없는 홍보성 댓글과 저속한 표현의 비방성 댓글은 삭제될 수 있습니다.</em>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { useAppDispatch } from '../../../../../renderer/store/hooks';\r\nimport {\r\n    EDIT_DELETE_NOTIFY_MODAL,\r\n    SAME_USER_OWNER,\r\n    SET_ACCESS_TARGET,\r\n    SET_COMMENT_ID,\r\n    SET_POST_ID,\r\n} from '../../../../../renderer/_reducers/_slices/postSlice';\r\nimport type { UserInfo } from '../../../../../server/models/User';\r\nimport type { CommentInPost } from '../../../../../server/models/Post';\r\n\r\nexport { MoreButton };\r\n\r\nfunction MoreButton({\r\n    userInfo,\r\n    postId,\r\n    comment,\r\n}: {\r\n    userInfo: UserInfo | null;\r\n    postId: string;\r\n    comment: CommentInPost;\r\n}) {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const moreButtonRef = useRef<HTMLButtonElement>(null);\r\n    const [user, setUser] = useState<UserInfo | null>(null);\r\n    const [nickname, setNickname] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (userInfo !== null) setUser(userInfo);\r\n        if (typeof comment.owner.user_id === 'object') {\r\n            setNickname(comment.owner.user_id.nickName);\r\n        }\r\n    }, [userInfo, comment]);\r\n\r\n    const handleClick = () => {\r\n        const app = document.querySelector('.app');\r\n        app?.classList.add('modal-mode');\r\n\r\n        dispatch(EDIT_DELETE_NOTIFY_MODAL(true));\r\n        dispatch(SAME_USER_OWNER(user?.nickName === nickname));\r\n        dispatch(SET_ACCESS_TARGET('comment'));\r\n        dispatch(SET_POST_ID(postId));\r\n        dispatch(SET_COMMENT_ID(comment._id));\r\n    };\r\n\r\n    return (\r\n        <button\r\n            type=\"button\"\r\n            aria-label=\"더보기 버튼\"\r\n            className=\"button-more commentitem\"\r\n            onClick={handleClick}\r\n            ref={moreButtonRef}\r\n        />\r\n    );\r\n}\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { isSameDay } from '../../../../../components/Date/isSameDay';\r\nimport { MoreButton } from './MoreButton';\r\nimport type { UserInfo } from '../../../../../server/models/User';\r\nimport type { CommentInPost } from '../../../../../server/models/Post';\r\nimport { useAppSelector } from '../../../../../renderer/store/hooks';\r\nimport { API_URL } from '../../../../../renderer/CONSTANT_URL';\r\n\r\nexport { CommentList };\r\n\r\nfunction CommentList({\r\n    userInfo,\r\n    postId,\r\n    comments,\r\n}: {\r\n    userInfo: UserInfo | null;\r\n    postId: string;\r\n    comments?: Array<CommentInPost>;\r\n}) {\r\n    return comments && comments.length > 0 ? (\r\n        <ul>\r\n            {comments.map((comment, i) => {\r\n                return (\r\n                    <CommentListItem\r\n                        key={comment._id}\r\n                        userInfo={userInfo}\r\n                        postId={postId}\r\n                        comment={comment}\r\n                        isLast={i === comments.length - 1}\r\n                    />\r\n                );\r\n            })}\r\n        </ul>\r\n    ) : (\r\n        <div className=\"style-wrapper-no-review\">\r\n            <div className=\"txt-no-review\">😭</div>\r\n            <p>댓글이 없어요.</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction CommentListItem({\r\n    userInfo,\r\n    postId,\r\n    comment,\r\n    isLast,\r\n}: {\r\n    userInfo: UserInfo | null;\r\n    postId: string;\r\n    comment: CommentInPost;\r\n    isLast: boolean;\r\n}) {\r\n    const targetCommentId = useAppSelector((state) => state.postSlice.commentId); // 클릭한 코멘트의 id\r\n\r\n    const { _id, owner, content, like, registeredAt, updatedAt } = comment;\r\n    const editMode = useAppSelector((state) => state.postSlice.editCommentMode);\r\n\r\n    const [nickname, setNickname] = useState<string>('');\r\n\r\n    useEffect(() => {\r\n        if (typeof owner !== 'undefined' && typeof owner.user_id === 'object') {\r\n            setNickname(owner.user_id.nickName);\r\n        }\r\n    }, [owner]);\r\n\r\n    const date = isSameDay(registeredAt)\r\n        ? `${registeredAt.split('. ').at(-1)?.split(':')[0]}:${registeredAt.split('. ').at(-1)?.split(':')[1]}`\r\n        : registeredAt.slice(0, 13);\r\n\r\n    const listElement = useRef<HTMLLIElement>(null);\r\n\r\n    useEffect(() => {\r\n        if (isLast && listElement.current) {\r\n            listElement.current.scrollIntoView(false);\r\n        }\r\n    }, [isLast]);\r\n\r\n    return (\r\n        <li className=\"li-commentitem\" ref={listElement}>\r\n            <dl className=\"wrapper-commentitem\">\r\n                <dl className=\"container-owner-date\">\r\n                    <dt className=\"sr-only\">댓글 작성자</dt>\r\n                    <dd className=\"txt-owner\">{nickname}</dd>\r\n                    <dt className=\"sr-only\">게시 시간</dt>\r\n                    <dd className=\"txt-date\">{date}</dd>\r\n                </dl>\r\n                <dl>\r\n                    <dt className=\"sr-only\">댓글 내용</dt>\r\n                    {editMode && targetCommentId === _id ? (\r\n                        <TextareaForEdit content={content} />\r\n                    ) : (\r\n                        <dd className=\"txt-content\">{content}</dd>\r\n                    )}\r\n                </dl>\r\n            </dl>\r\n            {editMode && targetCommentId === _id ? (\r\n                <EditCommentButton postId={postId} commentId={comment._id} />\r\n            ) : (\r\n                <MoreButton userInfo={userInfo} postId={postId} comment={comment} />\r\n            )}\r\n        </li>\r\n    );\r\n}\r\n\r\nfunction TextareaForEdit({ content }: { content: string }) {\r\n    const [value, setValue] = useState<string>(content);\r\n\r\n    function handleChange(event: React.ChangeEvent<HTMLTextAreaElement>) {\r\n        setValue(event.target.value);\r\n    }\r\n\r\n    return <textarea id=\"editCommentTextarea\" onChange={handleChange} minLength={1} maxLength={100} value={value} />;\r\n}\r\n\r\nfunction EditCommentButton({ postId, commentId }: { postId: string; commentId: string }) {\r\n    function handleClick() {\r\n        const textarea = document.getElementById('editCommentTextarea') as HTMLTextAreaElement;\r\n\r\n        if (textarea !== null) {\r\n            editComment(textarea.value);\r\n        }\r\n    }\r\n\r\n    async function editComment(content: string) {\r\n        const res = await fetch(`${API_URL}/comments/${commentId}?postId=${postId}`, {\r\n            credentials: 'include',\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ content: content }),\r\n        });\r\n\r\n        const data = await res.json();\r\n\r\n        if (data.success) {\r\n            alert('댓글이 수정되었습니다.');\r\n        } else {\r\n            alert('다시 시도해주세요.');\r\n        }\r\n\r\n        window.location.reload();\r\n    }\r\n    return (\r\n        <button type=\"button\" className=\"button-more commentitem edit\" onClick={handleClick}>\r\n            수정\r\n        </button>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../renderer/store/hooks';\r\nimport { WriteComment } from './WriteComment/WriteComment';\r\nimport { Notice } from './Notice';\r\nimport { CommentList } from './CommentList/CommentList';\r\nimport { Pagination } from '../../../../components/Pagination/Pagination';\r\nimport { CommentPagination } from '../../../../renderer/_reducers/_slices/paginationSlice';\r\nimport type { CommentInPost } from '../../../../server/models/Post';\r\nimport type { UserInfo } from '../../../../server/models/User';\r\n\r\nexport { CommentSection };\r\n\r\nconst perPage = 10;\r\n\r\nfunction CommentSection({\r\n    postId,\r\n    comments,\r\n    userInfo,\r\n}: {\r\n    postId: string;\r\n    comments?: Array<CommentInPost>;\r\n    userInfo: UserInfo | null;\r\n}) {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const paginatedComment = useAppSelector((state) => state.paginationSlice.comment) as CommentPagination;\r\n\r\n    const currentPage = useAppSelector((state) => state.paginationSlice.currentPage);\r\n    const [commentInPage, setCommentInPage] = useState(paginatedComment[currentPage - 1]);\r\n\r\n    useEffect(() => {\r\n        dispatch({ type: 'paginationSlice/CURRENT_PAGE', currentPage: Object.keys(paginatedComment).length });\r\n    }, [paginatedComment]);\r\n\r\n    useEffect(() => {\r\n        setCommentInPage(paginatedComment[currentPage - 1]);\r\n    }, [paginatedComment, currentPage]);\r\n\r\n    return (\r\n        <section className=\"section-post-comment\">\r\n            {comments && comments.length > 0 ? (\r\n                <h3>\r\n                    댓글 <span>({comments.length})</span>\r\n                </h3>\r\n            ) : (\r\n                <h3 className=\"sr-only\">댓글</h3>\r\n            )}\r\n            <Notice />\r\n            <WriteComment postId={postId} />\r\n            <CommentList postId={postId} comments={commentInPage} userInfo={userInfo} />\r\n            {comments && comments.length > perPage ? <Pagination count={comments.length} perPage={perPage} /> : null}\r\n        </section>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../../renderer/store/hooks';\r\nimport { EDIT_DELETE_NOTIFY_MODAL, SET_EDIT_COMMENT_MODE } from '../../../../../renderer/_reducers/_slices/postSlice';\r\nimport { API_URL } from '../../../../../renderer/CONSTANT_URL';\r\nimport appModalMode from '../../../../../components/modal/appModalMode';\r\n\r\nexport { EditDeleteNotifyModal };\r\n\r\nfunction EditDeleteNotifyModal() {\r\n    const [show, setShow] = useState(false);\r\n    const editDeleteNotifyModalOn = useAppSelector((state) => state.postSlice.editDeleteNotifyModalOn);\r\n    const sameUserOwner = useAppSelector((state) => state.postSlice.sameUserOwner);\r\n\r\n    useEffect(() => {\r\n        if (editDeleteNotifyModalOn === true) setShow(true);\r\n        else setShow(false);\r\n    }, [editDeleteNotifyModalOn]);\r\n\r\n    return (\r\n        <article className={`modal-edit-delete-notify ${show ? 'on' : ''}`}>\r\n            <h4 className=\"sr-only\">수정, 삭제, 신고용 모달</h4>\r\n            <ul>\r\n                {sameUserOwner ? (\r\n                    <>\r\n                        <EDIT />\r\n                        <DELETE />\r\n                    </>\r\n                ) : (\r\n                    <li> 🚨 신고하기</li>\r\n                )}\r\n            </ul>\r\n        </article>\r\n    );\r\n}\r\n\r\nfunction EDIT() {\r\n    const dispatch = useAppDispatch();\r\n    const postId = useAppSelector((state) => state.postSlice.postId);\r\n    const accessTarget = useAppSelector((state) => state.postSlice.accessTarget);\r\n\r\n    function handleClick() {\r\n        if (accessTarget === 'post') {\r\n            window.location.href = `/community/edit/${postId}`;\r\n\r\n            appModalMode(false);\r\n            dispatch(EDIT_DELETE_NOTIFY_MODAL(false));\r\n        } else if (accessTarget === 'comment') {\r\n            dispatch(SET_EDIT_COMMENT_MODE(true));\r\n            appModalMode(false);\r\n            dispatch(EDIT_DELETE_NOTIFY_MODAL(false));\r\n        }\r\n    }\r\n\r\n    return <li onClick={handleClick}>🩹 수정하기</li>;\r\n}\r\n\r\nfunction DELETE() {\r\n    const dispatch = useAppDispatch();\r\n    const postId = useAppSelector((state) => state.postSlice.postId);\r\n    const commentId = useAppSelector((state) => state.postSlice.commentId);\r\n    const accessTarget = useAppSelector((state) => state.postSlice.accessTarget);\r\n\r\n    async function handleClick() {\r\n        if (accessTarget === 'post') {\r\n            deletePost();\r\n        } else if (accessTarget === 'comment') {\r\n            deleteComment();\r\n        }\r\n    }\r\n\r\n    async function deletePost() {\r\n        try {\r\n            const res = await fetch(`${API_URL}/posts/${postId}`, {\r\n                credentials: 'include',\r\n                method: 'DELETE',\r\n            });\r\n\r\n            const data = await res.json();\r\n\r\n            if (data.success) {\r\n                window.location.href = '/community';\r\n            } else {\r\n                alert('다시 시도해주세요.');\r\n            }\r\n        } catch (err) {\r\n            console.error(err);\r\n        } finally {\r\n            appModalMode(false);\r\n            dispatch(EDIT_DELETE_NOTIFY_MODAL(false));\r\n        }\r\n    }\r\n\r\n    async function deleteComment() {\r\n        try {\r\n            const res = await fetch(`${API_URL}/comments/${commentId}?postId=${postId}`, {\r\n                credentials: 'include',\r\n                method: 'DELETE',\r\n            });\r\n\r\n            const data = await res.json();\r\n\r\n            if (data.success) {\r\n                window.location.reload();\r\n            } else {\r\n                alert('다시 시도해주세요.');\r\n            }\r\n        } catch (err) {\r\n            console.error(err);\r\n        } finally {\r\n            appModalMode(false);\r\n            dispatch(EDIT_DELETE_NOTIFY_MODAL(false));\r\n        }\r\n    }\r\n    return <li onClick={handleClick}>🗑️ 삭제하기</li>;\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../renderer/store/hooks';\r\nimport { EDIT_DELETE_NOTIFY_MODAL, SET_POST_ID } from '../../../../renderer/_reducers/_slices/postSlice';\r\nimport { EditDeleteNotifyModal } from './EditDeleteNotifyModal/EditDeleteNotifyModal';\r\n\r\nexport { ModalGroup };\r\n\r\nfunction ModalGroup() {\r\n    const on = useAppSelector((state) => state.postSlice.editDeleteNotifyModalOn);\r\n    const [show, setShow] = useState(false);\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        if (on === true) setShow(true);\r\n        else setShow(false);\r\n    }, [on]);\r\n\r\n    useEffect(() => {\r\n        if (show) {\r\n            document.addEventListener('click', handleClose);\r\n        }\r\n\r\n        return () => {\r\n            document.removeEventListener('click', handleClose);\r\n        };\r\n    }, [show]);\r\n\r\n    function handleClose(event: MouseEvent) {\r\n        if ((event.target as HTMLElement).className === 'app modal-mode') {\r\n            const app = document.querySelector('.app');\r\n            app?.classList.remove('modal-mode');\r\n\r\n            dispatch(EDIT_DELETE_NOTIFY_MODAL(false));\r\n            dispatch(SET_POST_ID(''));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={`modal-group ${show ? 'on' : ''}`}>\r\n            <EditDeleteNotifyModal />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch } from '../../../renderer/store/hooks';\r\nimport { CommentPagination, SET_COMMENT } from '../../../renderer/_reducers/_slices/paginationSlice';\r\nimport { TopBar } from '../../../components/topBar/topBar';\r\nimport { ContentSection } from './ContentSection/ContentSection';\r\nimport { CommentSection } from './CommentSection/CommentSection';\r\nimport { ModalGroup } from './ModalGroup/ModalGroup';\r\nimport { useCheckLoginStatus } from '../../../renderer/_hooks/useCheckLoginStatus';\r\nimport LoadingMain from '../../../components/Loading/LoadingMain';\r\nimport type { PageContext } from '../../../renderer/types';\r\nimport type { Post } from '../../../server/models/Post';\r\n\r\nexport const documentProps = {\r\n    title: '게시글 | Green Maps',\r\n    description: '채식 식당 지도 서비스 게시글 페이지',\r\n};\r\n\r\nexport { Page };\r\n\r\nfunction Page(pageContext: PageContext) {\r\n    const dispatch = useAppDispatch();\r\n    const [_, userInfo] = useCheckLoginStatus();\r\n\r\n    const [postInfo, setPostInfo] = useState<Post | null>(() => {\r\n        if (pageContext.post) return pageContext.post;\r\n        else return null;\r\n    });\r\n\r\n    // 댓글 페이지 네이션을 위해 스토어에 저장\r\n    useEffect(() => {\r\n        if (postInfo) {\r\n            if (postInfo.comments) {\r\n                const obj: CommentPagination = {};\r\n                // 10개(0~9번지)는 0번 키에 저장, (10~19번지)는 1번 키에 저장\r\n                for (let i = 0; i < postInfo.comments.length; i = i + 10) {\r\n                    const arrPerPage = postInfo.comments.slice(i, i + 10);\r\n                    obj[i / 10] = arrPerPage;\r\n                }\r\n\r\n                dispatch(SET_COMMENT(obj));\r\n            }\r\n        }\r\n    }, [postInfo]);\r\n\r\n    return postInfo ? (\r\n        <React.Suspense fallback={<LoadingMain />}>\r\n            <TopBar title={postInfo.subject} />\r\n            <main className=\"main-read-post\">\r\n                <ContentSection userInfo={userInfo} postInfo={postInfo} />\r\n                {postInfo.subject !== '공지사항' && (\r\n                    <CommentSection userInfo={userInfo} postId={postInfo._id} comments={postInfo.comments} />\r\n                )}\r\n            </main>\r\n            <ModalGroup />\r\n        </React.Suspense>\r\n    ) : (\r\n        <LoadingMain />\r\n    );\r\n}\r\n"],"names":["TextArea","props","htmlString","jsx","DOMPurify","PostLikeButton","postId","like","userId","setUserId","useState","likeCount","setLikeCount","buttonOn","setButtonOn","useEffect","getUserId","data","API_URL","err","userInfo","handleClick","delLike","addLike","jsxs","imgHeart","MoreButton","owner","dispatch","useAppDispatch","moreButtonRef","useRef","user","setUser","nickname","setNickname","appModalMode","EDIT_DELETE_NOTIFY_MODAL","SAME_USER_OWNER","SET_POST_ID","SET_ACCESS_TARGET","ContentSection","postInfo","subject","content","photo","registeredAt","comments","title","_id","LikeCount","CommentCount","Time","Fragment","_a","date","isSameDay","_b","SubmitButton","submit","user_id","body","WriteComment","setContent","handleChange","event","Notice","comment","app","SET_COMMENT_ID","CommentList","i","CommentListItem","isLast","targetCommentId","useAppSelector","state","updatedAt","editMode","listElement","TextareaForEdit","EditCommentButton","value","setValue","commentId","textarea","editComment","perPage","CommentSection","paginatedComment","currentPage","commentInPage","setCommentInPage","Pagination","EditDeleteNotifyModal","show","setShow","editDeleteNotifyModalOn","sameUserOwner","EDIT","DELETE","accessTarget","SET_EDIT_COMMENT_MODE","deletePost","deleteComment","ModalGroup","on","handleClose","documentProps","Page","pageContext","_","useCheckLoginStatus","setPostInfo","obj","arrPerPage","SET_COMMENT","React","LoadingMain","TopBar"],"mappings":"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"}