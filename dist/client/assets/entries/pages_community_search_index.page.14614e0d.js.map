{"version":3,"mappings":"wXASA,MAAMA,EAAaC,EAAM,KAAK,IAAMC,EAAA,WAAO,6BAAc,EAAC,oRAE7CC,EAAgB,CACzB,MAAO,sBACP,YAAa,YACjB,EAIA,SAASC,EAAKC,EAAsB,OAChC,MAAMC,EAAWC,IACRD,EAAA,CACL,KAAM,mBACN,UAASE,EAAAH,EAAU,cAAV,YAAAG,EAAuB,UAAW,GAC9C,EAED,KAAM,CAACC,EAAOC,CAAQ,EAAIC,EAAA,SAAiB,CAAE,GACvC,CAACC,EAAQC,CAAS,EAAIF,WAAS,EAAK,EAE1CG,YAAU,IAAM,CACR,OAAOF,EAAW,MAClBC,EAAU,EAAI,EACLH,EAAAL,EAAU,SAAS,KAAK,EAEzC,EAAG,CAAE,GAGL,MAAMU,EAAUC,EAAaC,GAAqBA,EAAM,UAAU,OAAO,EACnEC,EAAUF,EAAaC,GAAqBA,EAAM,UAAU,OAAO,EACnEE,EAAcH,EAAaC,GAAqBA,EAAM,UAAU,KAAK,YAAY,EACjFG,EAAWJ,EAAaC,GAAqBA,EAAM,UAAU,QAAQ,EACrEI,EAAUL,EAAaC,GAAqBA,EAAM,UAAU,OAAO,EACnEK,EAAQ,GAERC,EAAWC,cAAY,SAAY,CACjC,IAcO,OAFM,MAXD,MAAM,MACd,GAAGC,mBAAyBV,aAAmB,mBAC3CG,CAAA,UACMC,WAAqBG,cAAkBF,aAAoBC,IACrE,CACI,QAAS,CACL,eAAgB,kBACpB,CACJ,IAGmB,aAGlBK,GACL,QAAQ,MAAMA,CAAG,CACrB,GACD,CAACX,EAASG,EAASC,EAAaC,EAAUC,CAAO,CAAC,EAErDP,mBAAU,IAAM,CACHS,EAAA,EAAE,KAAMI,GAAS,CACbjB,EAAAiB,EAAK,cAAgB,EAAIA,EAAK,MAAQ,CAAC,GAAGlB,EAAO,GAAGkB,EAAK,KAAK,CAAC,EAE/DrB,EAAA,CACL,KAAM,yBACN,MAAOqB,EAAK,MACZ,aAAcA,EAAK,YACtB,EACJ,GACF,CAACJ,CAAQ,CAAC,EAENX,SACFX,EAAM,SAAN,CAAe,SAAU2B,MAACC,IAAY,EACnC,UAACD,MAAAE,EAAA,CAAO,MAAM,OAAQ,GACtBF,MAAC5B,EAAW,OAAAS,EAAc,MAAAa,CAAc,EAC5C,UAECO,EAAY,GAErB","names":["SearchMain","React","__vitePreload","documentProps","Page","pageProps","dispatch","useDispatch","_a","posts","setPosts","useState","window","setWindow","useEffect","keyword","useSelector","state","subject","currentPage","boundary","orderBy","limit","getPosts","useCallback","API_URL","err","data","jsx","LoadingMain","TopBar"],"sources":["../../../../pages/community/search/index.page.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport { TopBar } from '../../../components/topBar/topBar';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { API_URL } from '../../../renderer/CONSTANT_URL';\r\nimport type { PageProps } from '../../../renderer/types';\r\nimport type { RootState } from '../../../renderer/store';\r\nimport type { Post } from '../../../server/models/Post';\r\nimport LoadingMain from '../../../components/Loading/LoadingMain';\r\n\r\nconst SearchMain = React.lazy(() => import('./SearchMain'));\r\n\r\nexport const documentProps = {\r\n    title: '게시글 검색 | Green Maps',\r\n    description: '게시글 검색 페이지',\r\n};\r\n\r\nexport { Page };\r\n\r\nfunction Page(pageProps: PageProps) {\r\n    const dispatch = useDispatch();\r\n    dispatch({\r\n        type: 'postSlice/SEARCH',\r\n        KEYWORD: pageProps.routeParams?.keyword || '',\r\n    });\r\n\r\n    const [posts, setPosts] = useState<Post[]>([]); // 초기값: keyword를 포함하는 게시물\r\n    const [window, setWindow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (typeof window !== 'undefined') {\r\n            setWindow(true);\r\n            setPosts(pageProps.postInfo.lists);\r\n        }\r\n    }, []);\r\n\r\n    // 현재 페이지, 말머리, 범위, 정렬이 변경되면 새 게시물 가져오기\r\n    const keyword = useSelector((state: RootState) => state.postSlice.KEYWORD);\r\n    const subject = useSelector((state: RootState) => state.postSlice.SUBJECT);\r\n    const currentPage = useSelector((state: RootState) => state.postSlice.post.CURRENT_PAGE);\r\n    const boundary = useSelector((state: RootState) => state.postSlice.BOUNDARY);\r\n    const orderBy = useSelector((state: RootState) => state.postSlice.ORDERBY);\r\n    const limit = 20;\r\n\r\n    const getPosts = useCallback(async () => {\r\n        try {\r\n            const res = await fetch(\r\n                `${API_URL}/posts?keyword=${keyword}&subject=${encodeURIComponent(\r\n                    subject\r\n                )}&page=${currentPage}&limit=${limit}&boundary=${boundary}&orderby=${orderBy}`,\r\n                {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                }\r\n            );\r\n\r\n            const data = await res.json();\r\n\r\n            return data;\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    }, [keyword, subject, currentPage, boundary, orderBy]);\r\n\r\n    useEffect(() => {\r\n        getPosts().then((data) => {\r\n            setPosts(data.currentPage === 1 ? data.lists : [...posts, ...data.lists]);\r\n\r\n            dispatch({\r\n                type: 'postSlice/POST_IN_PAGE',\r\n                TOTAL: data.total,\r\n                CURRENT_PAGE: data.currentPage,\r\n            });\r\n        });\r\n    }, [getPosts]);\r\n\r\n    return window ? (\r\n        <React.Suspense fallback={<LoadingMain />}>\r\n            <TopBar title=\"검색 결과\" />\r\n            <SearchMain posts={posts} limit={limit} />\r\n        </React.Suspense>\r\n    ) : (\r\n        <LoadingMain />\r\n    );\r\n}\r\n"],"file":"assets/entries/pages_community_search_index.page.14614e0d.js"}