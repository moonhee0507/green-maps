{"version":3,"mappings":"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","names":["EditImageButton","dispatch","useAppDispatch","fileInput","useRef","handleClick","_a","handleChange","event","target","file","fileName","randomizeFileName","uploadImageToStorage","body","signedUrl","API_URL","submitProfileImage","err","PROFILE_IMAGE_MODAL","jsxs","Fragment","jsx","DeleteImageButton","EditProfileImageModal","profileImageModalOn","useAppSelector","state","show","setShow","useState","useEffect","handleClose","app","imgClose","NickNameForm","inputValue","setInputValue","prevNickName","EDIT_NICKNAME","Notice","SubmitButton","nextNickName","duplicate","setDuplicate","validString","setValidString","disabled","setDisabled","checkDuplicate","checkString","nickName","data","isEmptyString","handleSubmit","nickname","editNickName","EditNickNameModal","profileNickNameModalOn","PROFILE_NICKNAME_MODAL","SET_NICKNAME","NewPassword","value1","setValue1","value2","setValue2","isSame","setIsSame","validateString","setValidateString","validatePassword","handleChangePW1","handleChangePW2","PROFILE_PASSWORD_MODAL","PASS_CURRENT_PASSWORD","SET_USERID","CurrentPassword","userId","inputElement","value","setValue","EditPasswordModal","profilePasswordModalOn","passCurrentPassword","EditDeleteNotifyModal","editDeleteNotifyModalOn","sameUserOwner","EDIT","DELETE","reviewId","restaurantId","ModalGroup","on","EDIT_DELETE_NOTIFY_MODAL","SAME_USER_OWNER","SET_REVIEW_ID","SET_RESTAURANT_ID","documentProps","MyMain","React","__vitePreload","Page","isLoggedIn","info","useCheckLoginStatus","reviews","setReviews","getMyReviews","TopBar","LoadingMain","NavBar"],"sources":["../../../../pages/my/ModalGroup/EditProfileImageModal/EditImageButton.tsx","../../../../pages/my/ModalGroup/EditProfileImageModal/DeleteImageButton.tsx","../../../../pages/my/ModalGroup/EditProfileImageModal/EditProfileImageModal.tsx","../../../../pages/my/ModalGroup/EditNickNameModal/NickNameForm.tsx","../../../../pages/my/ModalGroup/EditNickNameModal/Notice.tsx","../../../../pages/my/ModalGroup/EditNickNameModal/SubmitButton.tsx","../../../../pages/my/ModalGroup/EditNickNameModal/EditNickNameModal.tsx","../../../../pages/my/ModalGroup/EditPasswordModal/NewPassword.tsx","../../../../pages/my/ModalGroup/EditPasswordModal/CurrentPassword.tsx","../../../../pages/my/ModalGroup/EditPasswordModal/EditPasswordModal.tsx","../../../../pages/my/ModalGroup/EditDeleteNotifyModal/EditDeleteNotifyModal.tsx","../../../../pages/my/ModalGroup/ModalGroup.tsx","../../../../pages/my/index.page.tsx"],"sourcesContent":["import React, { useRef } from 'react';\r\nimport { useAppDispatch } from '../../../../renderer/store/hooks';\r\nimport { PROFILE_IMAGE_MODAL } from '../../../../renderer/_reducers/_slices/profileSlice';\r\nimport randomizeFileName from '../../../../components/image/randomizeFileName';\r\nimport { API_URL } from '../../../../renderer/CONSTANT_URL';\r\n\r\nexport { EditImageButton };\r\n\r\nfunction EditImageButton() {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const fileInput = useRef<HTMLInputElement>(null);\r\n\r\n    const handleClick = () => {\r\n        fileInput.current?.click();\r\n    };\r\n\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const target = event.target as HTMLInputElement;\r\n\r\n        if (target.files !== null) {\r\n            const file = target.files[0];\r\n            const fileName = randomizeFileName() + '.' + file.type.replace('image/', '');\r\n\r\n            // 스토리지에 이미지 업로드\r\n            uploadImageToStorage(file, fileName);\r\n        }\r\n    };\r\n\r\n    async function uploadImageToStorage(file: File, fileName: string) {\r\n        try {\r\n            const body = {\r\n                name: `client/${fileName}`,\r\n                type: file.type,\r\n            };\r\n\r\n            const resUrl = await fetch(`${API_URL}/images/client`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(body),\r\n            });\r\n\r\n            const data = await resUrl.json();\r\n            const signedUrl = data.signedUrl;\r\n\r\n            const res = await fetch(signedUrl, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': file.type,\r\n                },\r\n                body: file,\r\n            });\r\n\r\n            if (res.ok) {\r\n                await submitProfileImage(fileName);\r\n            }\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n    async function submitProfileImage(fileName: string) {\r\n        try {\r\n            await fetch(`${API_URL}/users/edit/profile`, {\r\n                credentials: 'include',\r\n                method: 'PATCH',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ profileImage: `client/${fileName}` }),\r\n            });\r\n        } catch (err) {\r\n            console.error(err);\r\n        } finally {\r\n            dispatch(PROFILE_IMAGE_MODAL(false));\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type=\"file\"\r\n                id=\"fileInput\"\r\n                accept=\"image/*\"\r\n                ref={fileInput}\r\n                onChange={handleChange}\r\n                style={{ display: 'none' }}\r\n            />\r\n            <button type=\"button\" className=\"button-groupname-order on\" onClick={handleClick}>\r\n                변경\r\n            </button>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { API_URL } from '../../../../renderer/CONSTANT_URL';\r\nimport { PROFILE_IMAGE_MODAL } from '../../../../renderer/_reducers/_slices/profileSlice';\r\nimport { useAppDispatch } from '../../../../renderer/store/hooks';\r\n\r\nexport { DeleteImageButton };\r\n\r\nfunction DeleteImageButton() {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const handleClick = async () => {\r\n        try {\r\n            await fetch(`${API_URL}/users/edit/profile`, {\r\n                credentials: 'include',\r\n                method: 'PATCH',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ profileImage: '' }),\r\n            });\r\n        } catch (err) {\r\n            console.error(err);\r\n        } finally {\r\n            dispatch(PROFILE_IMAGE_MODAL(false));\r\n            window.location.reload();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <button type=\"button\" className=\"button-groupname-order on\" onClick={handleClick}>\r\n            삭제\r\n        </button>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../renderer/store/hooks';\r\nimport { EditImageButton } from './EditImageButton';\r\nimport { DeleteImageButton } from './DeleteImageButton';\r\nimport { PROFILE_IMAGE_MODAL } from '../../../../renderer/_reducers/_slices/profileSlice';\r\nimport imgClose from '/images/icon-plus.svg';\r\n\r\nexport { EditProfileImageModal };\r\n\r\nfunction EditProfileImageModal() {\r\n    const profileImageModalOn = useAppSelector((state) => state.profileSlice.profileImageModalOn);\r\n    const [show, setShow] = useState(false);\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        if (profileImageModalOn === true) setShow(true);\r\n        else setShow(false);\r\n    }, [profileImageModalOn]);\r\n\r\n    function handleClose() {\r\n        const app = document.querySelector('.app');\r\n        app?.classList.remove('modal-mode');\r\n\r\n        dispatch(PROFILE_IMAGE_MODAL(false));\r\n    }\r\n\r\n    return (\r\n        <article className={`modal-group-item ${show ? 'on' : ''}`}>\r\n            <h4>프로필 사진</h4>\r\n            <div className=\"container-button\">\r\n                <EditImageButton />\r\n                <DeleteImageButton />\r\n            </div>\r\n            <button type=\"button\" className=\"button-close\" onClick={handleClose}>\r\n                <img src={imgClose} alt=\"X 아이콘\" className=\"img-close\" />\r\n            </button>\r\n        </article>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../renderer/store/hooks';\r\nimport { EDIT_NICKNAME } from '../../../../renderer/_reducers/_slices/profileSlice';\r\n\r\nexport { NickNameForm };\r\n\r\nfunction NickNameForm() {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const [inputValue, setInputValue] = useState<string>('');\r\n    const prevNickName = useAppSelector((state) => state.profileSlice.prevNickName);\r\n\r\n    useEffect(() => {\r\n        setInputValue(prevNickName);\r\n    }, [prevNickName]);\r\n\r\n    const handleChange = (event: React.ChangeEvent) => {\r\n        const target = event.target as HTMLInputElement;\r\n        setInputValue(target.value);\r\n        dispatch(EDIT_NICKNAME(target.value));\r\n    };\r\n\r\n    return (\r\n        <form\r\n            className=\"form-edit-nickName\"\r\n            onSubmit={(event: React.FormEvent<HTMLFormElement>) => {\r\n                event.preventDefault();\r\n            }}\r\n        >\r\n            <p className=\"num-count-nickName\">\r\n                <span>{inputValue.length}</span>/<span>17</span>\r\n            </p>\r\n            <label htmlFor=\"editNickNameInput\" className=\"sr-only\">\r\n                닉네임\r\n            </label>\r\n            <input\r\n                type=\"text\"\r\n                id=\"editNickNameInput\"\r\n                onChange={handleChange}\r\n                value={inputValue}\r\n                minLength={1}\r\n                maxLength={17}\r\n            />\r\n        </form>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nexport { Notice };\r\n\r\nfunction Notice() {\r\n    return (\r\n        <div className=\"container-notice edit-nickName\">\r\n            <em>한글, 영문, 숫자만 입력가능합니다.</em>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppSelector } from '../../../../renderer/store/hooks';\r\nimport { API_URL } from '../../../../renderer/CONSTANT_URL';\r\nimport isEmptyString from '../../../../components/validate/isEmptyString';\r\n\r\nexport { SubmitButton };\r\n\r\nfunction SubmitButton() {\r\n    // 중복 체크, 정규표현식 체크 후 버튼상태 처리\r\n    const prevNickName = useAppSelector((state) => state.profileSlice.prevNickName);\r\n    const nextNickName = useAppSelector((state) => state.profileSlice.nextNickName);\r\n\r\n    const [duplicate, setDuplicate] = useState(true);\r\n    const [validString, setValidString] = useState(false);\r\n\r\n    const [disabled, setDisabled] = useState(true);\r\n\r\n    useEffect(() => {\r\n        checkDuplicate(nextNickName);\r\n        checkString(nextNickName);\r\n    }, [nextNickName]);\r\n\r\n    useEffect(() => {\r\n        if (prevNickName !== nextNickName) {\r\n            if (duplicate === false && validString === true) {\r\n                setDisabled(false);\r\n            } else {\r\n                setDisabled(true);\r\n            }\r\n        } else {\r\n            setDisabled(true);\r\n        }\r\n    }, [duplicate, validString]);\r\n\r\n    async function checkDuplicate(nickName: string) {\r\n        const res = await fetch(`${API_URL}/users/check-nickname?nickname=${nickName}`, {\r\n            credentials: 'include',\r\n            method: 'GET',\r\n        });\r\n        const data = await res.json();\r\n\r\n        setDuplicate(data.duplicated);\r\n\r\n        return data;\r\n    }\r\n\r\n    function checkString(nickName: string) {\r\n        const regex = /^[ㄱ-힣a-zA-Z0-9\\s]{1,17}$/g;\r\n\r\n        if (regex.test(nickName) && !isEmptyString(nickName)) {\r\n            setValidString(true);\r\n        } else {\r\n            setValidString(false);\r\n        }\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        // trim한 결과에 대해서 다시 중복체크\r\n        let nickname = nextNickName.trim();\r\n\r\n        checkDuplicate(nickname).then((data) => {\r\n            if (data.duplicated === true) {\r\n                alert('닉네임 양옆 띄어쓰기를 제외하고 입력해주세요.');\r\n            } else {\r\n                editNickName(nickname);\r\n            }\r\n        });\r\n    };\r\n\r\n    async function editNickName(nickName: string) {\r\n        try {\r\n            const res = await fetch(`${API_URL}/users/edit/profile`, {\r\n                credentials: 'include',\r\n                method: 'PATCH',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ nickname: nickName }),\r\n            });\r\n\r\n            const data = await res.json();\r\n\r\n            if (data.success) {\r\n                window.location.reload();\r\n            }\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <button type=\"button\" className=\"styled-button nickName\" disabled={disabled} onClick={handleSubmit}>\r\n            {(() => {\r\n                if (duplicate) {\r\n                    return '이미 존재하는 닉네임입니다.';\r\n                } else if (!validString) {\r\n                    return '올바른 닉네임을 입력하세요.';\r\n                } else {\r\n                    return '완료';\r\n                }\r\n            })()}\r\n        </button>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../renderer/store/hooks';\r\nimport { NickNameForm } from './NickNameForm';\r\nimport { Notice } from './Notice';\r\nimport { SubmitButton } from './SubmitButton';\r\nimport imgClose from '/images/icon-plus.svg';\r\nimport {\r\n    PROFILE_NICKNAME_MODAL,\r\n    SET_NICKNAME,\r\n    EDIT_NICKNAME,\r\n} from '../../../../renderer/_reducers/_slices/profileSlice';\r\n\r\nexport { EditNickNameModal };\r\n\r\nfunction EditNickNameModal() {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const profileNickNameModalOn = useAppSelector((state) => state.profileSlice.profileNickNameModalOn);\r\n    const [show, setShow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (profileNickNameModalOn === true) setShow(true);\r\n        else setShow(false);\r\n    }, [profileNickNameModalOn]);\r\n\r\n    function handleClose() {\r\n        const app = document.querySelector('.app');\r\n        app?.classList.remove('modal-mode');\r\n\r\n        dispatch(PROFILE_NICKNAME_MODAL(false));\r\n        dispatch(SET_NICKNAME(''));\r\n        dispatch(EDIT_NICKNAME(''));\r\n    }\r\n\r\n    return (\r\n        <article className={`modal-group-item ${show ? 'on' : ''}`}>\r\n            <h4>닉네임 변경</h4>\r\n            <NickNameForm />\r\n            <Notice />\r\n            <SubmitButton />\r\n            <button type=\"button\" className=\"button-close\" onClick={handleClose}>\r\n                <img src={imgClose} alt=\"X 아이콘\" className=\"img-close\" />\r\n            </button>\r\n        </article>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch } from '../../../../renderer/store/hooks';\r\nimport { validatePassword } from '../../../../components/validate/regex';\r\nimport { API_URL } from '../../../../renderer/CONSTANT_URL';\r\nimport {\r\n    PASS_CURRENT_PASSWORD,\r\n    PROFILE_PASSWORD_MODAL,\r\n    SET_USERID,\r\n} from '../../../../renderer/_reducers/_slices/profileSlice';\r\n\r\nexport { NewPassword };\r\n\r\nfunction NewPassword() {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const [disabled, setDisabled] = useState(true);\r\n    const [value1, setValue1] = useState('');\r\n    const [value2, setValue2] = useState('');\r\n\r\n    const [isSame, setIsSame] = useState(false);\r\n    const [validateString, setValidateString] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (value1 === value2) {\r\n            setIsSame(true);\r\n            if (validatePassword(value1)) {\r\n                setValidateString(true);\r\n            } else {\r\n                setValidateString(false);\r\n            }\r\n        } else {\r\n            setIsSame(false);\r\n            setValidateString(false);\r\n        }\r\n    }, [value1, value2]);\r\n\r\n    useEffect(() => {\r\n        if (isSame && validateString) {\r\n            setDisabled(false);\r\n        } else {\r\n            setDisabled(true);\r\n        }\r\n    }, [isSame, validateString]);\r\n\r\n    const handleChangePW1 = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const target = event.target as HTMLInputElement;\r\n\r\n        setValue1(target.value);\r\n    };\r\n\r\n    const handleChangePW2 = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const target = event.target as HTMLInputElement;\r\n\r\n        setValue2(target.value);\r\n    };\r\n\r\n    const handleClick = async () => {\r\n        try {\r\n            const res = await fetch(`${API_URL}/users/edit/password`, {\r\n                credentials: 'include',\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ password: value1 }),\r\n            });\r\n\r\n            const data = await res.json();\r\n\r\n            if (data.success) {\r\n                const res = await fetch(`${API_URL}/users/logout`, {\r\n                    credentials: 'include',\r\n                    method: 'POST',\r\n                });\r\n\r\n                const data = await res.json();\r\n\r\n                if (data.success) {\r\n                    alert('비밀번호가 변경되었습니다.\\n로그인 페이지로 이동합니다.');\r\n                    window.location.href = '/login';\r\n                } else {\r\n                    alert('다시 시도해주세요.');\r\n                }\r\n            } else {\r\n                alert('다시 시도해주세요.');\r\n            }\r\n        } catch (err) {\r\n            console.error(err);\r\n        } finally {\r\n            dispatch(PROFILE_PASSWORD_MODAL(false));\r\n            dispatch(PASS_CURRENT_PASSWORD(false));\r\n            dispatch(SET_USERID(''));\r\n\r\n            // 페이지 전환때문에 모달그룹이 사라져서 직접 수정\r\n            const app = document.querySelector('.app');\r\n            app?.classList.remove('modal-mode');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={(event: React.FormEvent) => event.preventDefault()} className=\"form-new-password\">\r\n                <p className=\"txt-notice\">새로운 비밀번호를 입력해주세요.</p>\r\n                <div className=\"container-notice password\">\r\n                    <em>영문, 숫자, 특수문자(!@#$%^&*-+_=?) 모두 조합(8자리 이상)</em>\r\n                </div>\r\n                <label htmlFor=\"nextPassword\" className=\"sr-only\">\r\n                    비밀번호\r\n                </label>\r\n                <input type=\"password\" id=\"nextPassword\" onChange={handleChangePW1} placeholder=\"비밀번호\" />\r\n                <label htmlFor=\"confirmNextPassword\" className=\"sr-only\">\r\n                    비밀번호 재입력\r\n                </label>\r\n                <input\r\n                    type=\"password\"\r\n                    id=\"confirmNextPassword\"\r\n                    onChange={handleChangePW2}\r\n                    placeholder=\"비밀번호 재입력\"\r\n                    minLength={8}\r\n                    maxLength={32}\r\n                />\r\n            </form>\r\n            <button type=\"button\" onClick={handleClick} disabled={disabled} className=\"styled-button thin\">\r\n                {(() => {\r\n                    if (!isSame) {\r\n                        return '두 비밀번호가 일치하지 않습니다.';\r\n                    } else if (!validateString) {\r\n                        return '비밀번호 구성을 확인해주세요.';\r\n                    } else {\r\n                        return '완료';\r\n                    }\r\n                })()}\r\n            </button>\r\n        </>\r\n    );\r\n}\r\n","import React, { useRef, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../renderer/store/hooks';\r\nimport { PASS_CURRENT_PASSWORD } from '../../../../renderer/_reducers/_slices/profileSlice';\r\nimport { API_URL } from '../../../../renderer/CONSTANT_URL';\r\n\r\nexport { CurrentPassword };\r\n\r\nfunction CurrentPassword() {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const userId = useAppSelector((state) => state.profileSlice.userId);\r\n    const inputElement = useRef<HTMLInputElement>(null);\r\n    const [value, setValue] = useState('');\r\n\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const target = event.target as HTMLInputElement;\r\n\r\n        setValue(target.value);\r\n    };\r\n\r\n    const handleClick = async () => {\r\n        const res = await fetch(`${API_URL}/users/check-password`, {\r\n            credentials: 'include',\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ password: value }),\r\n        });\r\n\r\n        const data = await res.json();\r\n\r\n        if (data.success) {\r\n            dispatch(PASS_CURRENT_PASSWORD(true));\r\n        } else {\r\n            dispatch(PASS_CURRENT_PASSWORD(false));\r\n            alert('틀린 비밀번호입니다.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={(event: React.FormEvent) => event.preventDefault()} className=\"form-current-password\">\r\n                <p className=\"txt-notice\">그린맵 계정의 현재 비밀번호를 확인해주세요.</p>\r\n                <label htmlFor=\"readOnlyUserId\" className=\"sr-only\">\r\n                    아이디\r\n                </label>\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"readOnlyUserId\"\r\n                    readOnly={true}\r\n                    defaultValue={userId}\r\n                    className=\"input-userid-in-profile\"\r\n                />\r\n                <label htmlFor=\"prevPassword\" className=\"sr-only\">\r\n                    현재 비밀번호\r\n                </label>\r\n                <input type=\"password\" id=\"prevPassword\" onChange={handleChange} ref={inputElement} value={value} />\r\n            </form>\r\n            <button type=\"button\" onClick={handleClick} className=\"styled-button thin\">\r\n                완료\r\n            </button>\r\n        </>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../renderer/store/hooks';\r\nimport {\r\n    PASS_CURRENT_PASSWORD,\r\n    PROFILE_PASSWORD_MODAL,\r\n    SET_USERID,\r\n} from '../../../../renderer/_reducers/_slices/profileSlice';\r\nimport { NewPassword } from './NewPassword';\r\nimport { CurrentPassword } from './CurrentPassword';\r\nimport imgClose from '/images/icon-plus.svg';\r\n\r\nexport { EditPasswordModal };\r\n\r\nfunction EditPasswordModal() {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const [show, setShow] = useState(false);\r\n    const profilePasswordModalOn = useAppSelector((state) => state.profileSlice.profilePasswordModalOn);\r\n    const passCurrentPassword = useAppSelector((state) => state.profileSlice.passCurrentPassword);\r\n\r\n    useEffect(() => {\r\n        if (profilePasswordModalOn === true) setShow(true);\r\n        else setShow(false);\r\n    }, [profilePasswordModalOn]);\r\n\r\n    function handleClose() {\r\n        const app = document.querySelector('.app');\r\n        app?.classList.remove('modal-mode');\r\n\r\n        dispatch(PROFILE_PASSWORD_MODAL(false));\r\n        dispatch(PASS_CURRENT_PASSWORD(false));\r\n        dispatch(SET_USERID(''));\r\n    }\r\n\r\n    return (\r\n        <article className={`modal-group-item ${show ? 'on' : ''}`}>\r\n            <h4>비밀번호 재설정</h4>\r\n            {passCurrentPassword ? <NewPassword /> : <CurrentPassword />}\r\n            <button type=\"button\" className=\"button-close\" onClick={handleClose}>\r\n                <img src={imgClose} alt=\"X 아이콘\" className=\"img-close\" />\r\n            </button>\r\n        </article>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppSelector } from '../../../../renderer/store/hooks';\r\nimport { API_URL } from '../../../../renderer/CONSTANT_URL';\r\n\r\nexport { EditDeleteNotifyModal };\r\n\r\nfunction EditDeleteNotifyModal() {\r\n    const [show, setShow] = useState(false);\r\n    const editDeleteNotifyModalOn = useAppSelector((state) => state.reviewSlice.editDeleteNotifyModalOn);\r\n    const sameUserOwner = useAppSelector((state) => state.reviewSlice.sameUserOwner);\r\n\r\n    useEffect(() => {\r\n        if (editDeleteNotifyModalOn === true) setShow(true);\r\n        else setShow(false);\r\n    }, [editDeleteNotifyModalOn]);\r\n\r\n    return (\r\n        <article className={`modal-edit-delete-notify ${show ? 'on' : ''}`}>\r\n            <h4 className=\"sr-only\">수정, 삭제, 신고용 모달</h4>\r\n            <ul>\r\n                {sameUserOwner ? (\r\n                    <>\r\n                        <EDIT />\r\n                        <DELETE />\r\n                    </>\r\n                ) : (\r\n                    <li> 🚨 신고하기</li>\r\n                )}\r\n            </ul>\r\n        </article>\r\n    );\r\n}\r\n\r\nfunction EDIT() {\r\n    const reviewId = useAppSelector((state) => state.reviewSlice.reviewId);\r\n    const restaurantId = useAppSelector((state) => state.reviewSlice.restaurantId);\r\n\r\n    function handleClick() {\r\n        window.location.href = `/search/${restaurantId}/reviews/${reviewId}/edit`;\r\n    }\r\n\r\n    return <li onClick={handleClick}>🩹 수정하기</li>;\r\n}\r\n\r\nfunction DELETE() {\r\n    const reviewId = useAppSelector((state) => state.reviewSlice.reviewId);\r\n    const restaurantId = useAppSelector((state) => state.reviewSlice.restaurantId);\r\n\r\n    async function handleClick() {\r\n        try {\r\n            const res = await fetch(`${API_URL}/reviews/${reviewId}`, {\r\n                credentials: 'include',\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ restaurantId: restaurantId }),\r\n            });\r\n            const data = await res.json();\r\n            if (data.success) {\r\n                window.location.href = `/search/${restaurantId}`;\r\n            } else {\r\n                alert('다시 시도해주세요.');\r\n            }\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n    return <li onClick={handleClick}>🗑️ 삭제하기</li>;\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../renderer/store/hooks';\r\nimport {\r\n    PROFILE_IMAGE_MODAL,\r\n    PROFILE_NICKNAME_MODAL,\r\n    SET_NICKNAME,\r\n    EDIT_NICKNAME,\r\n    PROFILE_PASSWORD_MODAL,\r\n    PASS_CURRENT_PASSWORD,\r\n    SET_USERID,\r\n} from '../../../renderer/_reducers/_slices/profileSlice';\r\nimport { EditProfileImageModal } from './EditProfileImageModal/EditProfileImageModal';\r\nimport { EditNickNameModal } from './EditNickNameModal/EditNickNameModal';\r\nimport { EditPasswordModal } from './EditPasswordModal/EditPasswordModal';\r\nimport { EditDeleteNotifyModal } from './EditDeleteNotifyModal/EditDeleteNotifyModal';\r\nimport {\r\n    EDIT_DELETE_NOTIFY_MODAL,\r\n    SAME_USER_OWNER,\r\n    SET_RESTAURANT_ID,\r\n    SET_REVIEW_ID,\r\n} from '../../../renderer/_reducers/_slices/reviewSlice';\r\n\r\nexport { ModalGroup };\r\n\r\nfunction ModalGroup() {\r\n    const on = useAppSelector(\r\n        (state) =>\r\n            state.profileSlice.profileImageModalOn ||\r\n            state.profileSlice.profileNickNameModalOn ||\r\n            state.profileSlice.profilePasswordModalOn ||\r\n            state.reviewSlice.editDeleteNotifyModalOn // 리뷰 슬라이스 재사용\r\n    );\r\n    const [show, setShow] = useState(false);\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        if (on === true) setShow(true);\r\n        else setShow(false);\r\n    }, [on]);\r\n\r\n    useEffect(() => {\r\n        if (show) {\r\n            document.addEventListener('click', handleClose);\r\n        }\r\n\r\n        return () => {\r\n            document.removeEventListener('click', handleClose);\r\n        };\r\n    }, [show]);\r\n\r\n    function handleClose(event: MouseEvent) {\r\n        if ((event.target as HTMLElement).className === 'app modal-mode') {\r\n            const app = document.querySelector('.app');\r\n            app?.classList.remove('modal-mode');\r\n\r\n            dispatch(PROFILE_IMAGE_MODAL(false));\r\n\r\n            dispatch(PROFILE_NICKNAME_MODAL(false));\r\n            dispatch(SET_NICKNAME(''));\r\n            dispatch(EDIT_NICKNAME(''));\r\n\r\n            dispatch(PROFILE_PASSWORD_MODAL(false));\r\n            dispatch(PASS_CURRENT_PASSWORD(false));\r\n            dispatch(SET_USERID(''));\r\n\r\n            dispatch(EDIT_DELETE_NOTIFY_MODAL(false)); // 리뷰 슬라이스 재사용\r\n            dispatch(SAME_USER_OWNER(false));\r\n            dispatch(SET_REVIEW_ID(''));\r\n            dispatch(SET_RESTAURANT_ID(''));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={`modal-group ${show ? 'on' : ''}`}>\r\n            <EditProfileImageModal />\r\n            <EditNickNameModal />\r\n            <EditPasswordModal />\r\n            <EditDeleteNotifyModal />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { TopBar } from '../../components/topBar/topBar';\r\nimport { NavBar } from '../../components/navBar';\r\nimport { ModalGroup } from './ModalGroup/ModalGroup';\r\nimport { useCheckLoginStatus } from '../../renderer/_hooks/useCheckLoginStatus';\r\nimport { API_URL } from '../../renderer/CONSTANT_URL';\r\nimport LoadingMain from '../../components/Loading/LoadingMain';\r\nimport type { PageContext } from '../../renderer/types';\r\nimport type { Review } from '../../server/models/Review';\r\nimport type { UserInfo } from '../../server/models/User';\r\n\r\nexport const documentProps = {\r\n    title: '내 정보 | Green Maps',\r\n    description: '채식 식당 지도 서비스 마이 페이지',\r\n};\r\n\r\nconst MyMain = React.lazy(() => import('./MyMain'));\r\n\r\nexport function Page() {\r\n    const [isLoggedIn, info] = useCheckLoginStatus();\r\n    const [reviews, setReviews] = useState<Review[]>([]);\r\n\r\n    useEffect(() => {\r\n        try {\r\n            if (info !== null) {\r\n                getMyReviews(info).then((data) => {\r\n                    if (data.success) {\r\n                        setReviews(data.reviews);\r\n                    } else {\r\n                        setReviews([]);\r\n                    }\r\n                });\r\n            }\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    }, [info]);\r\n\r\n    async function getMyReviews(info: UserInfo) {\r\n        const res = await fetch(`${API_URL}/reviews/my?owner=${info.userId}`);\r\n        const data = (await res.json()) as { success: boolean; reviews: Review[] };\r\n\r\n        return data;\r\n    }\r\n\r\n    return isLoggedIn && info ? (\r\n        <>\r\n            <TopBar title=\"내 정보\" />\r\n            <React.Suspense fallback={<LoadingMain />}>\r\n                <MyMain userInfo={info} reviews={reviews} />\r\n            </React.Suspense>\r\n            <NavBar isLoggedIn={isLoggedIn} />\r\n            <ModalGroup />\r\n        </>\r\n    ) : (\r\n        <LoadingMain />\r\n    );\r\n}\r\n"],"file":"assets/entries/pages_my_index.page.27132fa1.js"}