{"version":3,"file":"pages_signup_index-page.mjs","sources":["../../../pages/signup/SignupMain/InfoStage.tsx","../../../pages/signup/SignupMain/IdStage.tsx","../../../pages/signup/SignupMain/NickNameStage.tsx","../../../pages/signup/SignupMain/PasswordStage.tsx","../../../pages/signup/SignupMain/ConfirmPasswordStage.tsx","../../../pages/signup/SignupMain/SignupMain.tsx","../../../pages/signup/index.page.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Link } from '../../../renderer/Link';\r\nimport { useAppDispatch } from '../../../renderer/store/hooks';\r\nimport { SIGNING_UP } from '../../../renderer/_reducers/_slices/signupSlice';\r\n\r\nexport { InfoStage };\r\n\r\nfunction InfoStage({ move, setMove }: { move: number; setMove: React.Dispatch<React.SetStateAction<number>> }) {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const nextStage = () => {\r\n        setMove(-100);\r\n        dispatch(SIGNING_UP(true));\r\n    };\r\n\r\n    return (\r\n        <section className=\"login-select-stage reuse-in-signup\" style={move !== 0 ? { visibility: 'hidden' } : {}}>\r\n            <h3 className=\"sr-only\">회원가입 안내</h3>\r\n            <div className=\"container-rocket reuse-in-signup\">\r\n                <span>🥰</span>\r\n            </div>\r\n            <p className=\"txt-signup-info\">간편 회원가입을 진행합니다.</p>\r\n            <button type=\"button\" onClick={nextStage}>\r\n                계속하기\r\n            </button>\r\n            <small>\r\n                이미 회원이신가요? <Link href=\"/login\">로그인</Link>하러 가기\r\n            </small>\r\n        </section>\r\n    );\r\n}\r\n","import React, { useRef, useState } from 'react';\r\nimport { useAppDispatch } from '../../../renderer/store/hooks';\r\nimport { SIGNING_UP } from '../../../renderer/_reducers/_slices/signupSlice';\r\nimport { validateId } from '../../../components/validate/regex';\r\nimport { API_URL } from '../../../renderer/CONSTANT_URL';\r\n\r\nexport { IdStage };\r\n\r\nfunction IdStage({ move, setMove }: { move: number; setMove: React.Dispatch<React.SetStateAction<number>> }) {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const idInput = useRef<HTMLInputElement>(null);\r\n    const [message, setMessage] = useState('');\r\n\r\n    const handlePrev = () => {\r\n        setMove((prev) => prev + 100);\r\n        dispatch(SIGNING_UP(false));\r\n    };\r\n\r\n    const handleNext = () => {\r\n        const element = idInput.current;\r\n\r\n        // 정규식 검사\r\n        if (element !== null) {\r\n            if (validateId(element.value) === true) {\r\n                checkDuplicate(element.value);\r\n            } else {\r\n                setMessage('영문, 숫자 20자 이내의 아이디를 입력해주세요.');\r\n            }\r\n        }\r\n    };\r\n\r\n    // 중복검사\r\n    async function checkDuplicate(id: string) {\r\n        const res = await fetch(`${API_URL}/users/check-userId?userId=${id}`);\r\n        const data = (await res.json()) as { duplicated: boolean; errorMessage?: string };\r\n\r\n        if (data.duplicated === false) {\r\n            setMessage('');\r\n            setMove((prev) => prev - 100);\r\n        } else {\r\n            setMessage('이미 존재하는 아이디입니다.');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <section className=\"signup-id-stage\" style={move !== -100 ? { visibility: 'hidden' } : {}}>\r\n            <h3 className=\"sr-only\">아이디 입력</h3>\r\n            <label htmlFor=\"signupId\">아이디</label>\r\n            <input\r\n                type=\"text\"\r\n                id=\"signupId\"\r\n                placeholder=\"영문, 숫자 6~20자 이내\"\r\n                ref={idInput}\r\n                minLength={6}\r\n                maxLength={20}\r\n                aria-describedby=\"desc-signup-id\"\r\n            />\r\n            <em className=\"txt-signup-message\" id=\"desc-signup-id\">\r\n                {message}\r\n            </em>\r\n            <div className=\"button-group-move\">\r\n                <button type=\"button\" onClick={handlePrev} aria-label=\"이전 화면으로 이동\">\r\n                    첫 화면\r\n                </button>\r\n                <button type=\"button\" onClick={handleNext} aria-label=\"다음 화면으로 이동\">\r\n                    닉네임\r\n                </button>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n","import React, { useRef, useState } from 'react';\r\nimport { validateNickName } from '../../../components/validate/regex';\r\nimport { API_URL } from '../../../renderer/CONSTANT_URL';\r\n\r\nexport { NickNameStage };\r\n\r\nfunction NickNameStage({ move, setMove }: { move: number; setMove: React.Dispatch<React.SetStateAction<number>> }) {\r\n    const nickNameInput = useRef<HTMLInputElement>(null);\r\n    const [message, setMessage] = useState('');\r\n\r\n    const handlePrev = () => {\r\n        setMove((prev) => prev + 100);\r\n    };\r\n\r\n    const handleNext = () => {\r\n        const element = nickNameInput.current;\r\n\r\n        // 정규식 검사\r\n        if (element !== null) {\r\n            if (validateNickName(element.value) === true) {\r\n                checkDuplicate(element.value);\r\n            } else {\r\n                setMessage('영문, 숫자, 한글 17자 이내의 닉네임을 입력해주세요.');\r\n            }\r\n        }\r\n    };\r\n\r\n    // 중복검사\r\n    async function checkDuplicate(nickname: string) {\r\n        const res = await fetch(`${API_URL}/users/check-nickname?nickname=${nickname}`);\r\n        const data = (await res.json()) as { duplicated: boolean; errorMessage?: string };\r\n\r\n        if (data.duplicated === false) {\r\n            setMessage('');\r\n            setMove((prev) => prev - 100);\r\n        } else {\r\n            setMessage('이미 존재하는 닉네임입니다.');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <section className=\"signup-nickname-stage\" style={move !== -200 ? { visibility: 'hidden' } : {}}>\r\n            <h3 className=\"sr-only\">닉네임 입력</h3>\r\n            <label htmlFor=\"signupNickName\">닉네임</label>\r\n            <input\r\n                type=\"text\"\r\n                id=\"signupNickName\"\r\n                ref={nickNameInput}\r\n                placeholder=\"영문, 숫자, 한글 17자 이내\"\r\n                minLength={1}\r\n                maxLength={17}\r\n                aria-describedby=\"desc-signup-nickname\"\r\n            />\r\n            <em className=\"txt-signup-message\" id=\"desc-signup-nickname\">\r\n                {message}\r\n            </em>\r\n            <div className=\"button-group-move\">\r\n                <button type=\"button\" onClick={handlePrev} aria-label=\"이전 화면으로 이동\">\r\n                    아이디\r\n                </button>\r\n                <button type=\"button\" onClick={handleNext} aria-label=\"다음 화면으로 이동\">\r\n                    비밀번호\r\n                </button>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n","import React, { useRef, useState } from 'react';\r\nimport { validatePassword } from '../../../components/validate/regex';\r\n\r\nexport { PasswordStage };\r\n\r\nfunction PasswordStage({ move, setMove }: { move: number; setMove: React.Dispatch<React.SetStateAction<number>> }) {\r\n    const passwordInput = useRef<HTMLInputElement>(null);\r\n    const [message, setMessage] = useState('');\r\n\r\n    const handlePrev = () => {\r\n        setMove((prev) => prev + 100);\r\n    };\r\n\r\n    const handleNext = () => {\r\n        const element = passwordInput.current;\r\n\r\n        // 정규식 검사\r\n        if (element !== null) {\r\n            if (validatePassword(element.value) === true) {\r\n                setMessage('');\r\n                setMove((prev) => prev - 100);\r\n            } else {\r\n                setMessage('영문, 숫자, 특수문자(!@#$%^&*-+_=?) 모두 조합(8자리 이상)하여 입력해주세요.');\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <section className=\"signup-password-stage\" style={move !== -300 ? { visibility: 'hidden' } : {}}>\r\n            <h3 className=\"sr-only\">비밀번호 입력</h3>\r\n            <label htmlFor=\"signupPassword\">비밀번호</label>\r\n            <input\r\n                type=\"password\"\r\n                id=\"signupPassword\"\r\n                ref={passwordInput}\r\n                placeholder=\"영문, 숫자, 특수문자(!@#$%^&*-+_=?) 모두 조합(8자리 이상)\"\r\n                minLength={8}\r\n                maxLength={32}\r\n                aria-describedby=\"desc-signup-password\"\r\n            />\r\n            <em className=\"txt-signup-message\" id=\"desc-signup-password\">\r\n                {message}\r\n            </em>\r\n            <div className=\"button-group-move\">\r\n                <button type=\"button\" onClick={handlePrev} aria-label=\"이전 화면으로 이동\">\r\n                    닉네임\r\n                </button>\r\n                <button type=\"button\" onClick={handleNext} aria-label=\"다음 화면으로 이동\">\r\n                    비밀번호 재입력\r\n                </button>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n","import React, { useRef, useState } from 'react';\r\nimport { useAppDispatch } from '../../../renderer/store/hooks';\r\nimport { SIGNING_UP } from '../../../renderer/_reducers/_slices/signupSlice';\r\nimport { API_URL } from '../../../renderer/CONSTANT_URL';\r\n\r\nexport { ConfirmPasswordStage };\r\n\r\nfunction ConfirmPasswordStage({\r\n    move,\r\n    setMove,\r\n}: {\r\n    move: number;\r\n    setMove: React.Dispatch<React.SetStateAction<number>>;\r\n}) {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const confirmPassword = useRef<HTMLInputElement>(null);\r\n    const [message, setMessage] = useState('');\r\n\r\n    const handlePrev = () => {\r\n        setMove((prev) => prev + 100);\r\n    };\r\n\r\n    const handleClick = () => {\r\n        const password = (document.getElementById('signupPassword') as HTMLInputElement).value;\r\n\r\n        // 비밀번호와 같은지 확인\r\n        const element = confirmPassword.current;\r\n        if (element !== null) {\r\n            if (element.value === password) {\r\n                setMessage('');\r\n\r\n                // 톱바 뒤로가기 보여주기\r\n                dispatch(SIGNING_UP(false));\r\n                // 회원가입 통신\r\n                signup();\r\n            } else {\r\n                setMessage('비밀번호가 일치하지 않습니다.');\r\n            }\r\n        }\r\n    };\r\n\r\n    async function signup() {\r\n        try {\r\n            const userId = (document.getElementById('signupId') as HTMLInputElement).value;\r\n            const password = (document.getElementById('signupPassword') as HTMLInputElement).value;\r\n            const nickName = (document.getElementById('signupNickName') as HTMLInputElement).value;\r\n\r\n            const body = {\r\n                userId: userId,\r\n                password: password,\r\n                nickName: nickName,\r\n            };\r\n\r\n            const res = await fetch(`${API_URL}/users/signup`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(body),\r\n            });\r\n\r\n            const data = await res.json();\r\n\r\n            if (data.success) {\r\n                alert('🎉 회원가입에 성공했습니다');\r\n                window.location.href = '/login';\r\n            } else {\r\n                alert('회원가입에 실패했습니다');\r\n                console.error(data.errorMessage);\r\n            }\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <section className=\"signup-confirm-password-stage\" style={move !== -400 ? { visibility: 'hidden' } : {}}>\r\n            <h3 className=\"sr-only\">비밀번호 재입력</h3>\r\n            <label htmlFor=\"signupConfirmPassword\">비밀번호 재입력</label>\r\n            <input\r\n                type=\"password\"\r\n                id=\"signupConfirmPassword\"\r\n                ref={confirmPassword}\r\n                placeholder=\"비밀번호 재입력\"\r\n                minLength={8}\r\n                maxLength={32}\r\n                aria-describedby=\"desc-signup-confirm-password\"\r\n            />\r\n            <em className=\"txt-signup-message\" id=\"desc-signup-confirm-password\">\r\n                {message}\r\n            </em>\r\n            <div className=\"button-group-move\">\r\n                <button type=\"button\" onClick={handlePrev} aria-label=\"이전 화면으로 이동\">\r\n                    비밀번호\r\n                </button>\r\n                <button type=\"button\" onClick={handleClick} aria-label=\"다음 화면으로 이동\">\r\n                    완료\r\n                </button>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { SignupForm } from './SignupForm/SignupForm';\r\nimport { InfoStage } from './InfoStage';\r\nimport { IdStage } from './IdStage';\r\nimport { NickNameStage } from './NickNameStage';\r\nimport { PasswordStage } from './PasswordStage';\r\nimport { ConfirmPasswordStage } from './ConfirmPasswordStage';\r\nimport { useAppSelector } from '../../../renderer/store/hooks';\r\n\r\nexport { SignupMain };\r\n\r\nfunction SignupMain() {\r\n    const [move, setMove] = useState(0);\r\n\r\n    return (\r\n        <main className=\"main-signup\">\r\n            {/* <SignupForm /> */}\r\n            <div className=\"signup-stage-wrapper\" style={{ left: `${move}%`, transition: '.5s' }}>\r\n                <InfoStage move={move} setMove={setMove} />\r\n                <IdStage move={move} setMove={setMove} />\r\n                <NickNameStage move={move} setMove={setMove} />\r\n                <PasswordStage move={move} setMove={setMove} />\r\n                <ConfirmPasswordStage move={move} setMove={setMove} />\r\n            </div>\r\n        </main>\r\n    );\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { TopBar } from '../../components/topBar/topBar';\r\nimport { SignupMain } from './SignupMain/SignupMain';\r\nimport { API_URL } from '../../renderer/CONSTANT_URL';\r\n\r\nexport const documentProps = {\r\n    title: '회원가입 | Green Maps',\r\n    description: '그린맵 회원가입 페이지',\r\n};\r\n\r\nexport { Page };\r\n\r\nfunction Page() {\r\n    useEffect(() => {\r\n        (async () => {\r\n            const res = await fetch(`${API_URL}/users`); // 로그인된 경우 리디렉션\r\n            const data = await res.json();\r\n\r\n            if (data.success) {\r\n                alert('접근할 수 없는 페이지입니다.');\r\n                window.location.href = '/search';\r\n            }\r\n        })();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <TopBar title=\"회원가입\" />\r\n            <SignupMain />\r\n        </>\r\n    );\r\n}\r\n"],"names":[],"mappings":"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"}