{"version":3,"file":"pages_search_index-page.mjs","sources":["../../../pages/search/searchForm.tsx","../../../pages/search/searchBar.tsx","../../../pages/search/ModalGroup/ChangeRadiusModal/Radio.tsx","../../../pages/search/ModalGroup/ChangeRadiusModal/ChangeRadiusModal.tsx","../../../components/region/REGION.ts","../../../pages/search/ModalGroup/ChangeRegionModal/Sido.tsx","../../../pages/search/kakaoApi/getListInCurrentView.ts","../../../../../../../../images/icon-image.svg","../../../pages/search/kakaoApi/InfoWindow/InfoWindow.tsx","../../../../../../../../images/map-location.webp","../../../../../../../../images/map-cert-location.webp","../../../pages/search/kakaoApi/index.tsx","../../../pages/search/ModalGroup/ChangeRegionModal/Sigungu.tsx","../../../pages/search/ModalGroup/ChangeRegionModal/ChangeRegionModal.tsx","../../../pages/search/ModalGroup/ShowListInRegionModal/ShowListInRegionModal.tsx","../../../pages/search/ModalGroup/ModalGroup.tsx","../../../pages/search/hook/useLocationAccess.tsx","../../../pages/search/index.page.tsx"],"sourcesContent":["import React, { ChangeEvent, useRef, useState } from 'react';\r\nimport { useAppDispatch } from '../../renderer/store/hooks';\r\n\r\nexport { SearchForm };\r\n\r\nfunction SearchForm() {\r\n    const inputElement = useRef<HTMLInputElement>(null);\r\n    const [keyword, setKeyword] = useState('');\r\n\r\n    function handleChange(event: ChangeEvent<HTMLInputElement>) {\r\n        setKeyword(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"search-bar\">\r\n                <div>\r\n                    <label htmlFor=\"searchRestaurant\" className=\"sr-only\">\r\n                        식당 검색하기\r\n                    </label>\r\n                    <input\r\n                        type=\"search\"\r\n                        id=\"searchRestaurant\"\r\n                        onChange={handleChange}\r\n                        ref={inputElement}\r\n                        value={keyword}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <SearchButton keyword={keyword} />\r\n        </>\r\n    );\r\n}\r\n\r\nfunction SearchButton({ keyword }: { keyword: string }) {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const handleClick = () => {\r\n        // dispatch(SET_MAP_MODE('검색 모드'));\r\n        if (keyword.length === 0) {\r\n            alert('검색어를 입력해주세요.');\r\n        } else {\r\n            dispatch({ type: 'paginationSlice/CURRENT_PAGE', currentPage: 1 });\r\n            window.location.href = `/search/keyword/${keyword}`;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <button type=\"button\" onClick={handleClick} aria-label=\"식당 검색 버튼\">\r\n            🔍\r\n        </button>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { ButtonGoBack } from '../../components/button/buttonGoBack';\r\nimport { SearchForm } from './searchForm';\r\n\r\nexport { SearchBar };\r\n\r\nfunction SearchBar() {\r\n    return (\r\n        <div className=\"top-bar search\">\r\n            <ButtonGoBack />\r\n            <SearchForm />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../renderer/store/hooks';\r\nimport appModalMode from '../../../../components/modal/appModalMode';\r\nimport { CHANGE_RADIUS_MODAL, SET_RADIUS } from '../../../../renderer/_reducers/_slices/mapSlice';\r\n\r\nexport { Radio };\r\n\r\nfunction Radio({ radius }: { radius: number }) {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const selectedRadius = useAppSelector((state) => state.mapSlice.radius);\r\n\r\n    const [calcRadius, setCalcRadius] = useState(radius);\r\n    const [unit, setUnit] = useState('m');\r\n\r\n    useEffect(() => {\r\n        if (radius < 1000) {\r\n            setCalcRadius(radius);\r\n            setUnit('m');\r\n        } else {\r\n            setCalcRadius(radius / 1000);\r\n            setUnit('km');\r\n        }\r\n    }, [radius]);\r\n\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const target = event.target as HTMLInputElement;\r\n\r\n        appModalMode(false);\r\n        dispatch(SET_RADIUS(Number(target.value)));\r\n        dispatch(CHANGE_RADIUS_MODAL(false));\r\n    };\r\n\r\n    return (\r\n        <div className=\"container-radio-radius\">\r\n            <input\r\n                type=\"radio\"\r\n                id={`radius-${radius}`}\r\n                value={radius}\r\n                name=\"radius\"\r\n                onChange={handleChange}\r\n                checked={radius === selectedRadius}\r\n            />\r\n            <label htmlFor={`radius-${radius}`}>{calcRadius + unit}</label>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppSelector } from '../../../../renderer/store/hooks';\r\nimport { Radio } from './Radio';\r\n\r\nexport { ChangeRadiusModal };\r\n\r\nfunction ChangeRadiusModal() {\r\n    const [show, setShow] = useState(false);\r\n    const radiusModalOn = useAppSelector((state) => state.mapSlice.radiusModalOn);\r\n    const radius = useAppSelector((state) => state.mapSlice.radius);\r\n\r\n    const [calcRadius, setCalcRadius] = useState(radius);\r\n    const [unit, setUnit] = useState('m');\r\n\r\n    useEffect(() => {\r\n        if (radius < 1000) {\r\n            setCalcRadius(radius);\r\n            setUnit('m');\r\n        } else {\r\n            setCalcRadius(radius / 1000);\r\n            setUnit('km');\r\n        }\r\n    }, [radius]);\r\n\r\n    useEffect(() => {\r\n        if (radiusModalOn === true) setShow(true);\r\n        else setShow(false);\r\n    }, [radiusModalOn]);\r\n\r\n    return (\r\n        <article className={`modal-group-item ${show ? 'on' : ''}`}>\r\n            <h4>내 위치 검색 반경 선택</h4>\r\n            <div className=\"wrapper-select-radius\">\r\n                <p className=\"txt-selected-radius\">\r\n                    <span>{calcRadius + unit}</span>\r\n                </p>\r\n                <form className=\"form-radius\">\r\n                    {[300, 500, 1000, 2000, 3000].map((radius) => {\r\n                        return <Radio key={Math.random()} radius={radius} />;\r\n                    })}\r\n                </form>\r\n            </div>\r\n        </article>\r\n    );\r\n}\r\n","type Region = {\r\n    [key: string]: string[];\r\n};\r\n\r\nconst REGION: Region = {\r\n    서울: [\r\n        '강남구',\r\n        '강동구',\r\n        '강북구',\r\n        '강서구',\r\n        '관악구',\r\n        '광진구',\r\n        '구로구',\r\n        '금천구',\r\n        '노원구',\r\n        '도봉구',\r\n        '동대문구',\r\n        '동작구',\r\n        '마포구',\r\n        '서대문구',\r\n        '서초구',\r\n        '성동구',\r\n        '성북구',\r\n        '송파구',\r\n        '양천구',\r\n        '영등포구',\r\n        '용산구',\r\n        '은평구',\r\n        '종로구',\r\n        '중구',\r\n        '중랑구',\r\n    ],\r\n    강원: [\r\n        '강릉시',\r\n        '고성군',\r\n        '동해시',\r\n        '삼척시',\r\n        '속초시',\r\n        '양구군',\r\n        '양양군',\r\n        '영월군',\r\n        '원주시',\r\n        '인제군',\r\n        '정선군',\r\n        '철원군',\r\n        '춘천시',\r\n        '태백시',\r\n        '평창군',\r\n        '홍천군',\r\n        '화천군',\r\n        '횡성군',\r\n    ],\r\n    경기: [\r\n        '가평군',\r\n        '고양시',\r\n        '과천시',\r\n        '광명시',\r\n        '광주시',\r\n        '구리시',\r\n        '군포시',\r\n        '김포시',\r\n        '남양주시',\r\n        '동두천시',\r\n        '부천시',\r\n        '성남시',\r\n        '수원시',\r\n        '시흥시',\r\n        '안산시',\r\n        '안성시',\r\n        '안양시',\r\n        '양주시',\r\n        '양평군',\r\n        '여주시',\r\n        '연천군',\r\n        '오산시',\r\n        '용인시',\r\n        '의왕시',\r\n        '의정부시',\r\n        '이천시',\r\n        '파주시',\r\n        '평택시',\r\n        '포천시',\r\n        '하남시',\r\n        '화성시',\r\n    ],\r\n    경남: [\r\n        '거제시',\r\n        '거창군',\r\n        '고성군',\r\n        '김해시',\r\n        '남해군',\r\n        '밀양시',\r\n        '사천시',\r\n        '산청군',\r\n        '양산시',\r\n        '의령군',\r\n        '진주시',\r\n        '창녕군',\r\n        '창원시',\r\n        '통영시',\r\n        '하동군',\r\n        '함안군',\r\n        '함양군',\r\n        '합천군',\r\n    ],\r\n    경북: [\r\n        '경산시',\r\n        '경주시',\r\n        '고령군',\r\n        '구미시',\r\n        '군위군',\r\n        '김천시',\r\n        '문경시',\r\n        '봉화군',\r\n        '상주시',\r\n        '성주군',\r\n        '안동시',\r\n        '영덕군',\r\n        '영양군',\r\n        '영주시',\r\n        '영천시',\r\n        '예천군',\r\n        '울릉군',\r\n        '울진군',\r\n        '의성군',\r\n        '청도군',\r\n        '청송군',\r\n        '칠곡군',\r\n        '포항시',\r\n    ],\r\n    광주: ['광산구', '남구', '동구', '북구', '서구'],\r\n    대구: ['남구', '달서구', '달성군', '동구', '북구', '서구', '수성구', '중구'],\r\n    대전: ['대덕구', '동구', '서구', '유성구', '중구'],\r\n    부산: [\r\n        '강서구',\r\n        '금정구',\r\n        '기장군',\r\n        '남구',\r\n        '동구',\r\n        '동래구',\r\n        '부산진구',\r\n        '북구',\r\n        '사상구',\r\n        '사하구',\r\n        '서구',\r\n        '수영구',\r\n        '연제구',\r\n        '영도구',\r\n        '중구',\r\n        '해운대구',\r\n    ],\r\n    세종: ['세종'],\r\n    울산: ['남구', '동구', '북구', '울주군', '중구'],\r\n    인천: ['강화군', '계양구', '남동구', '동구', '미추홀구', '부평구', '서구', '연수구', '옹진군', '중구'],\r\n    전남: [\r\n        '강진군',\r\n        '고흥군',\r\n        '곡성군',\r\n        '광양시',\r\n        '구례군',\r\n        '나주시',\r\n        '담양군',\r\n        '목포시',\r\n        '무안군',\r\n        '보성군',\r\n        '순천시',\r\n        '신안군',\r\n        '여수시',\r\n        '영광군',\r\n        '영암군',\r\n        '완도군',\r\n        '장성군',\r\n        '장흥군',\r\n        '진도군',\r\n        '함평군',\r\n        '해남군',\r\n        '화순군',\r\n    ],\r\n    전북: [\r\n        '고창군',\r\n        '군산시',\r\n        '김제시',\r\n        '남원시',\r\n        '무주군',\r\n        '부안군',\r\n        '순창군',\r\n        '완주군',\r\n        '익산시',\r\n        '임실군',\r\n        '장수군',\r\n        '전주시',\r\n        '정읍시',\r\n        '진안군',\r\n    ],\r\n    제주: ['서귀포시', '제주시'],\r\n    충남: [\r\n        '계룡시',\r\n        '공주시',\r\n        '금산군',\r\n        '논산시',\r\n        '당진시',\r\n        '보령시',\r\n        '부여군',\r\n        '서산시',\r\n        '서천군',\r\n        '아산시',\r\n        '예산군',\r\n        '천안시',\r\n        '청양군',\r\n        '태안군',\r\n        '홍성군',\r\n    ],\r\n    충북: ['보은군', '영동군', '옥천군', '음성군', '제천시', '증평군', '진천군', '청주시', '충주시'],\r\n};\r\n\r\nexport default REGION;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../renderer/store/hooks';\r\nimport { SET_SELECTED_SIDO } from '../../../../renderer/_reducers/_slices/mapSlice';\r\nimport REGION from '../../../../components/region/REGION.js';\r\n\r\nexport { Sido };\r\n\r\nfunction Sido() {\r\n    const [sidoList] = useState<string[]>(() => Object.keys(REGION).sort());\r\n\r\n    return (\r\n        <div className=\"container-sido\">\r\n            <ul>\r\n                {sidoList.map((v) => {\r\n                    return <SidoListItem key={Math.random()} name={v} />;\r\n                })}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction SidoListItem({ name }: { name: string }) {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const currentSido = useAppSelector((state) => state.mapSlice.currentSido);\r\n    const selectedSido = useAppSelector((state) => state.mapSlice.selectedSido);\r\n\r\n    const [on, setOn] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (selectedSido === '') {\r\n            if (currentSido.includes(name)) {\r\n                setOn(true);\r\n            } else {\r\n                setOn(false);\r\n            }\r\n        } else {\r\n            if (selectedSido.includes(name)) {\r\n                setOn(true);\r\n            } else {\r\n                setOn(false);\r\n            }\r\n        }\r\n    }, [currentSido, selectedSido]);\r\n\r\n    const handleClick = () => {\r\n        dispatch(SET_SELECTED_SIDO(name));\r\n    };\r\n\r\n    return (\r\n        <li onClick={handleClick}>\r\n            <p className={`txt-sido ${on ? 'on' : ''}`}>{name}</p>\r\n        </li>\r\n    );\r\n}\r\n","import { API_URL } from '../../../renderer/CONSTANT_URL';\r\nimport { Restaurant } from '../../../server/models/Restaurant';\r\nimport { MongoPolygon } from './types';\r\n\r\nexport default async function getListInCurrentView(polygon: MongoPolygon): Promise<Restaurant[]> {\r\n    const res = await fetch(`${API_URL}/map/current-view`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(polygon),\r\n    });\r\n\r\n    const data = await res.json();\r\n\r\n    return data;\r\n}\r\n","export default \"__VITE_PUBLIC_ASSET__b7e5023a__\"","import React from 'react';\r\nimport { Stars } from '../../restaurant/RestaurantDetail/PrimarySection/component/Stars';\r\nimport imgPhoto from '/images/icon-image.svg';\r\nimport type { Restaurant } from '../../../../server/models/Restaurant';\r\nimport { BookmarkButton } from './BookmarkButton';\r\n\r\nexport default function InfoWindow({\r\n    restaurantInfo,\r\n    isLoggedIn,\r\n}: {\r\n    restaurantInfo: Restaurant;\r\n    isLoggedIn: boolean;\r\n}) {\r\n    const { _id, title, rating, reviews, address, certification, category } = restaurantInfo;\r\n\r\n    return (\r\n        <div className=\"wrapper-infowindow\">\r\n            <dl>\r\n                <div className=\"infowindow-left\">\r\n                    <div className=\"container-title-cert\">\r\n                        <dt className=\"sr-only\">식당 이름</dt>\r\n                        <dd className=\"txt-title\">\r\n                            <a href={`/search/${_id}`}>{title}</a>\r\n                        </dd>\r\n\r\n                        <div>\r\n                            {certification ? (\r\n                                <>\r\n                                    <dt className=\"sr-only\">채식 인증 정보</dt>\r\n                                    <dd className=\"txt-cert\">{certification}</dd>\r\n                                    {/* <dd className=\"txt-cert green\">채식가능음식점</dd> */}\r\n                                </>\r\n                            ) : null}\r\n\r\n                            <dt className=\"sr-only\">업종</dt>\r\n                            <dd className=\"txt-cert\">{category}</dd>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"container-rating-review\">\r\n                        <div>\r\n                            <dt className=\"sr-only\">별점</dt>\r\n                            <dd>\r\n                                <span className=\"num-rating\">{rating}</span>\r\n                                <div className=\"style-infowindow-star\">\r\n                                    <Stars rating={rating} />\r\n                                </div>\r\n                            </dd>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <dt>리뷰</dt>\r\n                            <dd>{reviews.length}</dd>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <dt className=\"sr-only\">주소</dt>\r\n                    <dd className=\"txt-address\">{address}</dd>\r\n                </div>\r\n\r\n                <div className=\"infowindow-right\">\r\n                    <dt className=\"sr-only\">대표이미지</dt>\r\n                    <dd>\r\n                        <img src={imgPhoto} alt=\"임시 이미지\" />\r\n                        <span>준비 중</span>\r\n                    </dd>\r\n                </div>\r\n            </dl>\r\n\r\n            {/* <div className=\"container-infowindow-button\">\r\n                <BookmarkButton isLoggedIn={isLoggedIn} />\r\n                <button aria-label=\"좋아요\" className=\"button-like\" />\r\n                <button aria-label=\"다음지도에서 보기\" className=\"button-kakao-map\" />\r\n            </div> */}\r\n        </div>\r\n    );\r\n}\r\n","export default \"__VITE_PUBLIC_ASSET__7c7dfca3__\"","export default \"__VITE_PUBLIC_ASSET__ca8eaec6__\"","import React from 'react';\r\nimport { renderToString } from 'react-dom/server';\r\nimport store from '../../../renderer/store/index.js';\r\nimport { SET_CURRENT_LOCATION } from '../../../renderer/_reducers/_slices/mapSlice.js';\r\nimport getListInCurrentView from './getListInCurrentView';\r\nimport InfoWindow from './InfoWindow/InfoWindow.js';\r\nimport imgLocation from '/images/map-location.webp';\r\nimport imgCert from '/images/map-cert-location.webp';\r\nimport imgLoading from '/images/spinner.webp';\r\nimport type { Lat, Lng, MongoLocation, MongoPolygon } from './types';\r\nimport type { Restaurant } from './../../../server/models/Restaurant';\r\n\r\nconst { kakao }: any = typeof window !== 'undefined' ? window : global;\r\n\r\nlet isLoggedIn = false;\r\n\r\nlet map: any;\r\nlet neLat: Lat;\r\nlet neLng: Lng;\r\nlet swLat: Lat;\r\nlet swLng: Lng;\r\n\r\nlet locPosition: kakao.maps.LatLng;\r\n\r\nlet centerCircle: kakao.maps.Circle;\r\nlet radiusCircle: kakao.maps.Circle;\r\n\r\nconst arrMarker: kakao.maps.Marker[] = [];\r\nconst arrInfowindow: kakao.maps.InfoWindow[] = [];\r\n\r\nexport function init(): Promise<kakao.maps.LatLng> {\r\n    kakao.maps.load(function () {\r\n        const mapContainer = document.getElementById('map'); // 지도를 표시할 div\r\n        const mapOption = {\r\n            center: new kakao.maps.LatLng(37.5666805, 126.9784147), // 지도의 중심좌표 <- 서울시청\r\n            level: 7, // 지도의 확대 레벨(1~14)\r\n        };\r\n\r\n        map = new kakao.maps.Map(mapContainer, mapOption); // 지도생성\r\n    });\r\n\r\n    return new Promise((resolve, reject) => {\r\n        // HTML5의 geolocation으로 사용할 수 있는지 확인\r\n        if (navigator.geolocation) {\r\n            // GeoLocation을 이용해서 접속 위치를 얻어오기\r\n            navigator.geolocation.getCurrentPosition(function (position) {\r\n                const lat = position.coords.latitude; // 위도\r\n                const lng = position.coords.longitude; // 경도\r\n\r\n                // 마커가 표시될 위치 = geolocation으로 얻어온 좌표\r\n                locPosition = new kakao.maps.LatLng(lat, lng);\r\n\r\n                // 지도 중심좌표를 접속위치로 변경\r\n                map.setCenter(locPosition);\r\n                store.dispatch({ type: 'mapSlice/SET_LOCATION_ACCESS', payload: true });\r\n                store.dispatch(SET_CURRENT_LOCATION([lat, lng]));\r\n\r\n                resolve(locPosition);\r\n            });\r\n        } else {\r\n            locPosition = new kakao.maps.LatLng(37.5666805, 126.9784147);\r\n            map.setLevel(5);\r\n            store.dispatch({ type: 'mapSlice/SET_LOCATION_ACCESS', payload: false });\r\n            store.dispatch(SET_CURRENT_LOCATION([37.5666805, 126.9784147]));\r\n            resolve(locPosition);\r\n        }\r\n\r\n        addBoundChangeEvent();\r\n    });\r\n}\r\n\r\nexport function setCircle(radius = 500): void {\r\n    // 현재 위치 표시\r\n    centerCircle = new kakao.maps.Circle({\r\n        map: map,\r\n        center: locPosition,\r\n        radius: 25,\r\n        strokeWeight: 3,\r\n        strokeColor: '#007EEA',\r\n        strokeStyle: 'solid',\r\n        fillColor: '#0000ff',\r\n        fillOpacity: 1,\r\n    });\r\n\r\n    // 반경 500m 영역 표시\r\n    radiusCircle = new kakao.maps.Circle({\r\n        map: map,\r\n        center: locPosition,\r\n        radius: radius,\r\n        strokeWeight: 2,\r\n        strokeColor: '#7777ff',\r\n        strokeStyle: 'solid',\r\n        fillColor: '#0000ff',\r\n        fillOpacity: 0.08,\r\n    });\r\n\r\n    centerCircle.setMap(map);\r\n    radiusCircle.setMap(map);\r\n}\r\n\r\nexport function clearCircle() {\r\n    if (centerCircle) {\r\n        centerCircle.setMap(null);\r\n    }\r\n    if (radiusCircle) {\r\n        radiusCircle.setMap(null);\r\n    }\r\n}\r\n\r\nfunction addBoundChangeEvent() {\r\n    let timeoutId: number;\r\n    const app = document.querySelector('.app');\r\n    // const imgLoading = <Loading />; // React.JSX.Element\r\n    const LoadingElement = () => {\r\n        const imgElement = document.createElement('img');\r\n\r\n        imgElement.src = imgLoading;\r\n        imgElement.alt = '좌표 생성 로딩';\r\n        imgElement.style.width = '50px';\r\n        imgElement.style.position = 'absolute';\r\n        imgElement.style.top = '50%';\r\n        imgElement.style.left = '50%';\r\n        imgElement.style.transform = 'translate(-50%, -50%)';\r\n        imgElement.id = '__LOADING__';\r\n        imgElement.style.zIndex = '9999';\r\n\r\n        return imgElement;\r\n    };\r\n\r\n    if (window.location)\r\n        kakao.maps.event.addListener(map, 'bounds_changed', function () {\r\n            // 화면 이동 event가 발생하면 3초 후 fetch(=> 이동 후1초 안움직여야 그려진다)\r\n            window.clearTimeout(timeoutId); // 타임아웃을 취소하지 않으면 화면이동 많이할 때 요청이 너무 많아짐\r\n\r\n            timeoutId = window.setTimeout(async () => {\r\n                if (app !== null) {\r\n                    app.appendChild(LoadingElement());\r\n                }\r\n\r\n                const polygon = getCurrentView(); // 다른 페이지로 넘어갈 때는 polygon이 점\r\n\r\n                // 유효한 Polygon인지 체크\r\n                if (validatePolygon(polygon)) {\r\n                    const res = await getListInCurrentView(polygon);\r\n                    paintVeganRestaurantMarker(res);\r\n                }\r\n\r\n                if (app !== null) {\r\n                    const LoadingElement = document.getElementById('__LOADING__');\r\n                    if (LoadingElement) {\r\n                        app.removeChild(LoadingElement);\r\n                    }\r\n                }\r\n            }, 1000);\r\n        });\r\n}\r\n\r\n// 유효한 Polygon인지 체크\r\nfunction validatePolygon(polygon: MongoPolygon): boolean {\r\n    if (polygon && polygon.length === 5) {\r\n        const std = JSON.stringify(polygon[0]);\r\n\r\n        return !polygon.every((v, _) => JSON.stringify(v) === std);\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nfunction getCurrentView(): MongoPolygon {\r\n    neLat = map.getBounds().getNorthEast().getLat();\r\n    neLng = map.getBounds().getNorthEast().getLng();\r\n    swLat = map.getBounds().getSouthWest().getLat();\r\n    swLng = map.getBounds().getSouthWest().getLng();\r\n\r\n    return [\r\n        [neLng, neLat],\r\n        [swLng, neLat],\r\n        [swLng, swLat],\r\n        [neLng, swLat],\r\n        [neLng, neLat],\r\n    ];\r\n}\r\n\r\nasync function paintVeganRestaurantMarker(restaurant: Restaurant[]) {\r\n    restaurant.forEach((list: Restaurant) => {\r\n        // 마커\r\n        const marker = new kakao.maps.Marker({\r\n            map: map,\r\n            position: new kakao.maps.LatLng(list.location.coordinates[1], list.location.coordinates[0]), // 마커를 표시할 위치\r\n            title: list.title, // 마커의 타이틀, 마커에 마우스를 올리면 타이틀 표시\r\n            image: new kakao.maps.MarkerImage(list.certified ? imgCert : imgLocation, new kakao.maps.Size(24, 35)), // 마커 이미지\r\n        });\r\n\r\n        arrMarker.push(marker);\r\n\r\n        // 인포윈도우\r\n        const infowindow = new kakao.maps.InfoWindow({ zIndex: 1, removable: true });\r\n        const InfoWindowComponent = <InfoWindow restaurantInfo={list} isLoggedIn={isLoggedIn || false} />;\r\n        infowindow.setContent(renderToString(InfoWindowComponent));\r\n\r\n        arrInfowindow.push(infowindow);\r\n    });\r\n\r\n    addMarkerClickEvent(arrMarker, arrInfowindow);\r\n}\r\n\r\nexport function addMarkerClickEvent(arrMarker: kakao.maps.Marker[], arrInfowindow: kakao.maps.InfoWindow[]) {\r\n    for (let i = 0; i < arrMarker.length; i++) {\r\n        kakao.maps.event.addListener(arrMarker[i], 'click', function () {\r\n            removeAllInfowindow(arrInfowindow);\r\n            arrInfowindow[i].open(map, arrMarker[i]);\r\n            map.panTo(arrMarker[i].getPosition());\r\n        });\r\n    }\r\n}\r\n\r\nfunction removeAllInfowindow(arrInfowindow: kakao.maps.InfoWindow[]) {\r\n    for (let i = 0; i < arrInfowindow.length; i++) {\r\n        arrInfowindow[i].close();\r\n    }\r\n}\r\n\r\nexport function optimizeMapLevel(radius: number): void {\r\n    switch (radius) {\r\n        case 300:\r\n            map.setLevel(5);\r\n            break;\r\n\r\n        case 500:\r\n            map.setLevel(5);\r\n            break;\r\n\r\n        case 1000:\r\n            map.setLevel(6);\r\n            break;\r\n\r\n        case 2000:\r\n            map.setLevel(7);\r\n            break;\r\n\r\n        case 3000:\r\n            map.setLevel(7);\r\n            break;\r\n\r\n        default:\r\n            map.setLevel(5);\r\n    }\r\n}\r\n\r\nexport function moveToRegionInPage(coordsInPage: MongoLocation[]) {\r\n    if (coordsInPage.length === 0) {\r\n        return;\r\n    }\r\n\r\n    const convertCoords: kakao.maps.LatLng[] = [];\r\n\r\n    for (let coord of coordsInPage) {\r\n        const [lng, lat] = coord;\r\n\r\n        if (lng !== 0 && lat !== 0) {\r\n            convertCoords.push(new kakao.maps.LatLng(lat, lng));\r\n        }\r\n    }\r\n\r\n    const bounds: kakao.maps.LatLngBounds = new kakao.maps.LatLngBounds();\r\n\r\n    for (let convertCoord of convertCoords) {\r\n        bounds.extend(convertCoord);\r\n    }\r\n\r\n    paintBounds(bounds);\r\n}\r\n\r\nfunction paintBounds(bounds: kakao.maps.LatLngBounds) {\r\n    map.setBounds(bounds);\r\n}\r\n\r\nexport function moveToCurrentLocation() {\r\n    const [lat, lng] = store.getState().mapSlice.currentLocation;\r\n    map.setCenter(new kakao.maps.LatLng(lat, lng));\r\n}\r\n\r\nexport function checkLoginForInfoWindow(isLoggedInFromIndexPage: boolean) {\r\n    isLoggedIn = isLoggedInFromIndexPage;\r\n}\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport REGION from '../../../../components/region/REGION.js';\r\nimport { useAppDispatch, useAppSelector } from '../../../../renderer/store/hooks';\r\nimport {\r\n    CHANGE_REGION_MODAL,\r\n    NO_RESULT_MODAL,\r\n    SET_LIST_IN_PAGE,\r\n    SET_SELECTED_SIGUNGU,\r\n    SET_TOTAL_IN_REGION,\r\n    SHOW_LIST_IN_REGION_MODAL,\r\n} from '../../../../renderer/_reducers/_slices/mapSlice';\r\nimport appModalMode from '../../../../components/modal/appModalMode';\r\nimport { API_URL } from '../../../../renderer/CONSTANT_URL';\r\nimport { MongoLocation } from '../../kakaoApi/types';\r\nimport { moveToRegionInPage } from '../../kakaoApi';\r\n\r\nexport { Sigungu };\r\n\r\nfunction Sigungu() {\r\n    const currentSido = useAppSelector((state) => state.mapSlice.currentSido);\r\n    const [sigunguList, setSigunguList] = useState<string[] | null>(null);\r\n    const selectedSido = useAppSelector((state) => state.mapSlice.selectedSido);\r\n\r\n    useEffect(() => {\r\n        if (selectedSido === '') {\r\n            if (currentSido !== '') {\r\n                const key = currentSido.slice(0, 2);\r\n                const sortList = [...REGION[key]].sort();\r\n                setSigunguList(sortList);\r\n            } else {\r\n                setSigunguList(null);\r\n            }\r\n        } else {\r\n            const key = selectedSido.slice(0, 2);\r\n            const sortList = [...REGION[key]].sort();\r\n            setSigunguList(sortList);\r\n        }\r\n    }, [currentSido, selectedSido]);\r\n\r\n    return (\r\n        <div className=\"container-sigungu\">\r\n            <ul>\r\n                <SigunguListItem\r\n                    key={Math.random()}\r\n                    name={`${selectedSido !== '' ? selectedSido.slice(0, 2) : currentSido.slice(0, 2)} 전체`}\r\n                />\r\n                {sigunguList &&\r\n                    sigunguList.map((v) => {\r\n                        return <SigunguListItem key={Math.random()} name={v} />;\r\n                    })}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction SigunguListItem({ name }: { name: string }) {\r\n    const dispatch = useAppDispatch();\r\n    const selectedSido = useAppSelector((state) => state.mapSlice.selectedSido);\r\n    const currentSido = useAppSelector((state) => state.mapSlice.currentSido);\r\n\r\n    // 업종 필터 변경 체크\r\n    const selectedCategory = useAppSelector((state) => state.mapSlice.selectedCategory);\r\n\r\n    // 그 지역 좌표들의 중심으로 이동하고\r\n    // 목록으로 띄우기\r\n    const handleClick = () => {\r\n        appModalMode(false);\r\n        dispatch(CHANGE_REGION_MODAL(false));\r\n\r\n        dispatch(SET_SELECTED_SIGUNGU(name));\r\n\r\n        getListInRegion().then((data) => {\r\n            // 좌표를 저장\r\n            if (data.success && data.lists.length > 0) {\r\n                const coordsInPage: MongoLocation[] = [];\r\n\r\n                for (let list of data.lists) {\r\n                    coordsInPage.push(list.location.coordinates);\r\n                }\r\n\r\n                // 카카오 index로 보내기\r\n                moveToRegionInPage(coordsInPage);\r\n                // 목록으로 띄우기(모달).\r\n                dispatch(SHOW_LIST_IN_REGION_MODAL(true));\r\n\r\n                // 식당리스트 스토어에 저장\r\n                dispatch(SET_LIST_IN_PAGE(data.lists));\r\n                // 토탈 정보 스토어에 저장\r\n                dispatch(SET_TOTAL_IN_REGION(data.total));\r\n            } else {\r\n                // 결과가 없음.\r\n                // 가장 가까운 식당 추천.\r\n                dispatch(NO_RESULT_MODAL(true));\r\n            }\r\n        });\r\n    };\r\n\r\n    async function getListInRegion() {\r\n        const sido = selectedSido === '' ? currentSido.slice(0, 2) : selectedSido.slice(0, 2);\r\n        const sigungu = name.includes('전체') ? null : name;\r\n\r\n        const res = await fetch(`${API_URL}/map/region?sido=${sido}&sigungu=${sigungu}&page=1&skip=10`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ category: selectedCategory }), // 선택되어 있는 업종으로 필터링\r\n        });\r\n        const data = await res.json();\r\n\r\n        return data;\r\n    }\r\n\r\n    return (\r\n        <li onClick={handleClick}>\r\n            <p className=\"txt-sido\">{name}</p>\r\n        </li>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../renderer/store/hooks';\r\nimport { SET_CURRENT_SIDO, SET_CURRENT_SIGUNGU } from '../../../../renderer/_reducers/_slices/mapSlice';\r\nimport { Sido } from './Sido';\r\nimport { Sigungu } from './Sigungu';\r\n\r\nexport { ChangeRegionModal };\r\n\r\nfunction ChangeRegionModal() {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const [show, setShow] = useState(false);\r\n    const regionModalOn = useAppSelector((state) => state.mapSlice.regionModalOn);\r\n\r\n    const currentLocation = useAppSelector((state) => state.mapSlice.currentLocation);\r\n\r\n    useEffect(() => {\r\n        if (regionModalOn === true) setShow(true);\r\n        else setShow(false);\r\n    }, [regionModalOn]);\r\n\r\n    useEffect(() => {\r\n        const [lat, lng] = currentLocation;\r\n\r\n        const geocoder = new kakao.maps.services.Geocoder();\r\n\r\n        geocoder.coord2RegionCode(lng, lat, (result, status) => {\r\n            if (status === kakao.maps.services.Status.OK) {\r\n                for (let i = 0; i < result.length; i++) {\r\n                    // 행정동 region-type은 H\r\n                    if (result[i].region_type === 'H') {\r\n                        const addr = result[i].address_name;\r\n                        dispatch(SET_CURRENT_SIDO(addr.split(' ').shift() || ''));\r\n                        dispatch(SET_CURRENT_SIGUNGU(addr.split(' ')[1]));\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }, [currentLocation]);\r\n\r\n    return (\r\n        <article className={`modal-group-item ${show ? 'on' : ''}`}>\r\n            <h4>지역선택</h4>\r\n            <div className=\"wrapper-region\">\r\n                <Sido />\r\n                <Sigungu />\r\n            </div>\r\n        </article>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../renderer/store/hooks';\r\nimport { RestaurantListItem } from '../../ResultInRadius/RestaurantListItem';\r\nimport { Pagination } from '../../../../components/Pagination/Pagination';\r\nimport { API_URL } from '../../../../renderer/CONSTANT_URL';\r\nimport {\r\n    RESET_LIST_IN_PAGE,\r\n    RESET_TOTAL_IN_REGION,\r\n    SET_LIST_IN_PAGE,\r\n    SET_TOTAL_IN_REGION,\r\n} from '../../../../renderer/_reducers/_slices/mapSlice';\r\nimport { moveToRegionInPage } from '../../kakaoApi';\r\nimport type { MongoLocation } from '../../kakaoApi/types';\r\nimport appModalMode from '../../../../components/modal/appModalMode';\r\nimport { SHOW_LIST_IN_REGION_MODAL } from '../../../../renderer/_reducers/_slices/mapSlice';\r\n\r\nexport { ShowListInRegionModal };\r\n\r\nfunction ShowListInRegionModal() {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const [show, setShow] = useState(false);\r\n    const showListInRegionModalOn = useAppSelector((state) => state.mapSlice.showListInRegionModalOn);\r\n    const listInPage = useAppSelector((state) => state.mapSlice.listInPage);\r\n    const totalInRegion = useAppSelector((state) => state.mapSlice.totalInRegion);\r\n\r\n    const currentPage = useAppSelector((state) => state.paginationSlice.currentPage);\r\n    const selectedSido = useAppSelector((state) => state.mapSlice.selectedSido);\r\n    const selectedSigungu = useAppSelector((state) => state.mapSlice.selectedSigungu);\r\n\r\n    const selectedCategory = useAppSelector((state) => state.mapSlice.selectedCategory);\r\n\r\n    useEffect(() => {\r\n        if (showListInRegionModalOn === true) setShow(true);\r\n        else setShow(false);\r\n    }, [showListInRegionModalOn]);\r\n\r\n    useEffect(() => {\r\n        if (show === true) {\r\n            getListInRegion().then((data) => {\r\n                // 좌표를 저장\r\n                if (data.success && data.lists.length > 0) {\r\n                    const coordsInPage: MongoLocation[] = [];\r\n                    for (let list of data.lists) {\r\n                        coordsInPage.push(list.location.coordinates);\r\n                    }\r\n                    // 카카오 index로 보내기\r\n                    moveToRegionInPage(coordsInPage); // 페이지 넘길 때마다 위치변경\r\n                    // 식당리스트 스토어에 저장\r\n                    dispatch(SET_LIST_IN_PAGE(data.lists));\r\n                    // 토탈 정보 저장 form 페이지네이션\r\n                    dispatch(SET_TOTAL_IN_REGION(data.total));\r\n                }\r\n            });\r\n        }\r\n    }, [show, currentPage, selectedCategory]);\r\n\r\n    async function getListInRegion() {\r\n        const sido = selectedSido;\r\n        const sigungu = selectedSigungu;\r\n\r\n        const res = await fetch(`${API_URL}/map/region?sido=${sido}&sigungu=${sigungu}&page=${currentPage}&skip=10`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ category: selectedCategory }),\r\n        });\r\n        const data = await res.json();\r\n\r\n        return data;\r\n    }\r\n\r\n    return (\r\n        <article className={`modal-group-item ${show ? 'on' : ''}`}>\r\n            <h4>지역 탐색 결과({totalInRegion})</h4>\r\n            <div className=\"wrapper-result-in-radius reuse-in-region\">\r\n                {listInPage.length > 0 ? (\r\n                    <ul className=\"ul-restaurant-in-radius reuse-in-region\">\r\n                        {listInPage.map((list, i) => {\r\n                            return <RestaurantListItem key={Math.random()} restaurantInfo={list} isFirst={i === 0} />;\r\n                        })}\r\n                    </ul>\r\n                ) : (\r\n                    <div className=\"style-wrapper-no-review\">\r\n                        <div className=\"txt-no-review\">😭</div>\r\n                        <p>목록이 없어요.</p>\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <Pagination count={totalInRegion} perPage={10} />\r\n            <CloseButton />\r\n        </article>\r\n    );\r\n}\r\n\r\nimport imgClose from '/images/icon-plus.svg';\r\n\r\nfunction CloseButton() {\r\n    const dispatch = useAppDispatch();\r\n\r\n    function handleClose() {\r\n        appModalMode(false);\r\n\r\n        dispatch(SHOW_LIST_IN_REGION_MODAL(false));\r\n        dispatch(RESET_LIST_IN_PAGE());\r\n        dispatch(RESET_TOTAL_IN_REGION());\r\n    }\r\n\r\n    return (\r\n        <button type=\"button\" className=\"button-close\" onClick={handleClose}>\r\n            <img src={imgClose} alt=\"X 아이콘\" className=\"img-close\" />\r\n        </button>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../renderer/store/hooks';\r\nimport {\r\n    CATEGORY_FILTER_MODAL,\r\n    CHANGE_RADIUS_MODAL,\r\n    CHANGE_REGION_MODAL,\r\n    NO_RESULT_MODAL,\r\n    SET_SELECTED_SIDO,\r\n} from '../../../renderer/_reducers/_slices/mapSlice';\r\nimport appModalMode from '../../../components/modal/appModalMode';\r\nimport { ChangeRadiusModal } from './ChangeRadiusModal/ChangeRadiusModal';\r\nimport { ChangeRegionModal } from './ChangeRegionModal/ChangeRegionModal';\r\nimport { ShowListInRegionModal } from './ShowListInRegionModal/ShowListInRegionModal';\r\nimport { CategoryFilterModal } from './CategoryFilterModal/CategoryFilterModal';\r\n\r\nexport { ModalGroup };\r\n\r\nfunction ModalGroup() {\r\n    const on = useAppSelector(\r\n        (state) =>\r\n            state.mapSlice.radiusModalOn ||\r\n            state.mapSlice.checkGeolocationModalOn ||\r\n            state.mapSlice.regionModalOn ||\r\n            state.mapSlice.showListInRegionModalOn ||\r\n            state.mapSlice.categoryFilterModalOn\r\n    );\r\n    const on_mini = useAppSelector((state) => state.mapSlice.noResultModalOn);\r\n\r\n    const [show, setShow] = useState(false);\r\n    const [show_mini, setShow_mini] = useState(false);\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        if (on === true) setShow(true);\r\n        else setShow(false);\r\n\r\n        if (on_mini === true) setShow_mini(true);\r\n        else setShow_mini(false);\r\n    }, [on, on_mini]);\r\n\r\n    useEffect(() => {\r\n        if (show) {\r\n            document.addEventListener('click', handleClose);\r\n        }\r\n\r\n        return () => {\r\n            document.removeEventListener('click', handleClose);\r\n        };\r\n    }, [show]);\r\n\r\n    function handleClose(event: MouseEvent) {\r\n        if ((event.target as HTMLElement).className === 'app modal-mode') {\r\n            appModalMode(false);\r\n\r\n            dispatch(CHANGE_RADIUS_MODAL(false));\r\n\r\n            dispatch(CHANGE_REGION_MODAL(false));\r\n            dispatch(SET_SELECTED_SIDO(''));\r\n\r\n            dispatch(CATEGORY_FILTER_MODAL(false));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={`modal-group ${show ? 'on' : ''}`}>\r\n                <CheckGeolocationModal />\r\n                <ChangeRegionModal />\r\n                <ChangeRadiusModal />\r\n                <ShowListInRegionModal />\r\n                <CategoryFilterModal />\r\n            </div>\r\n            <div className={`mini-modal-group ${show_mini ? 'on' : ''}`}>\r\n                <NoResult />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction CheckGeolocationModal() {\r\n    const [show, setShow] = useState(false);\r\n    const checkGeolocationModalOn = useAppSelector((state) => state.mapSlice.checkGeolocationModalOn);\r\n\r\n    useEffect(() => {\r\n        if (checkGeolocationModalOn === true) setShow(true);\r\n        else setShow(false);\r\n    }, [checkGeolocationModalOn]);\r\n\r\n    return (\r\n        <article className={`modal-group-item ${show ? 'on' : ''}`}>\r\n            <h4 className=\"sr-only\">위치 확인 요청</h4>\r\n            <div className=\"container-emoji-notice\">\r\n                <div className=\"emoji\">📢</div>\r\n                <em>위치 권한을 허용해주세요.</em>\r\n            </div>\r\n        </article>\r\n    );\r\n}\r\n\r\nfunction NoResult() {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const [show, setShow] = useState(false);\r\n    const noResultModalOn = useAppSelector((state) => state.mapSlice.noResultModalOn);\r\n\r\n    useEffect(() => {\r\n        if (noResultModalOn === true) setShow(true);\r\n        else setShow(false);\r\n    }, [noResultModalOn]);\r\n\r\n    useEffect(() => {\r\n        if (show === true) {\r\n            setTimeout(() => {\r\n                setShow(false);\r\n                dispatch(NO_RESULT_MODAL(false));\r\n            }, 2000);\r\n        }\r\n    }, [show]);\r\n\r\n    return (\r\n        <div className={`modal-no-result ${show ? 'on' : ''}`}>\r\n            <p>결과가 없습니다 😥</p>\r\n        </div>\r\n    );\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport type { StateToGeolocation } from '../../../renderer/_reducers/_slices/mapSlice';\r\n\r\nexport default function useLocationAccess() {\r\n    const [locationAccess, setLocationAccess] = useState<StateToGeolocation>('prompt');\r\n\r\n    useEffect(() => {\r\n        navigator.permissions.query({ name: 'geolocation' }).then((result) => {\r\n            setLocationAccess(result.state);\r\n\r\n            result.addEventListener('change', () => {\r\n                setLocationAccess(result.state);\r\n            });\r\n        });\r\n    }, []);\r\n\r\n    return locationAccess;\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { SearchBar } from './searchBar';\r\nimport { ModalGroup } from './ModalGroup/ModalGroup';\r\nimport { NavBar } from '../../components/navBar';\r\nimport useLocationAccess from './hook/useLocationAccess';\r\nimport appModalMode from '../../components/modal/appModalMode';\r\nimport { useAppDispatch } from '../../renderer/store/hooks';\r\nimport { CHECK_LOCATION_ACCESS_MODAL, StateToGeolocation } from '../../renderer/_reducers/_slices/mapSlice';\r\nimport { useCheckLoginStatus } from '../../renderer/_hooks/useCheckLoginStatus';\r\nimport LoadingMain from '../../components/Loading/LoadingMain';\r\n\r\nexport const documentProps = {\r\n    title: '채식 식당 지도 | Green Maps',\r\n    description: '채식 식당 지도 페이지',\r\n};\r\n\r\nconst MapView = React.lazy(() => import('./MapView'));\r\n\r\nexport { Page };\r\n\r\nfunction Page() {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const [hasWindow, setHasWindow] = useState(false);\r\n    const [isLoggedIn, _] = useCheckLoginStatus();\r\n    const hasLocationAccess: StateToGeolocation = useLocationAccess();\r\n\r\n    useEffect(() => {\r\n        if (typeof window !== 'undefined') {\r\n            setHasWindow(true);\r\n        } else setHasWindow(false);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (hasWindow === true) {\r\n            if (hasLocationAccess === 'granted') {\r\n                appModalMode(false);\r\n                dispatch(CHECK_LOCATION_ACCESS_MODAL(false));\r\n            } else if (hasLocationAccess === 'denied' || hasLocationAccess === 'prompt') {\r\n                appModalMode(true);\r\n                dispatch(CHECK_LOCATION_ACCESS_MODAL(true));\r\n            }\r\n        }\r\n    }, [hasWindow, hasLocationAccess]);\r\n\r\n    return hasWindow ? (\r\n        <React.Suspense fallback={<LoadingMain />}>\r\n            <SearchBar />\r\n            <MapView isLoggedIn={isLoggedIn} />\r\n            <NavBar isLoggedIn={isLoggedIn} />\r\n            <ModalGroup />\r\n        </React.Suspense>\r\n    ) : (\r\n        <LoadingMain />\r\n    );\r\n}\r\n"],"names":["radius","isLoggedIn","kakao","LoadingElement","arrMarker","arrInfowindow"],"mappings":"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"}