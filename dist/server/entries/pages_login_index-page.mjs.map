{"version":3,"file":"pages_login_index-page.mjs","sources":["../../../../../../../../images/icon-kakao.webp","../../../pages/login/LoginMain/SelectStage.tsx","../../../pages/login/LoginMain/IdStage.tsx","../../../pages/login/LoginMain/PasswordStage.tsx","../../../pages/login/LoginMain/LoginMain.tsx","../../../pages/login/index.page.tsx"],"sourcesContent":["export default \"__VITE_PUBLIC_ASSET__95e4d656__\"","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch } from '../../../renderer/store/hooks';\r\nimport { LOGGING_IN } from '../../../renderer/_reducers/_slices/loginSlice';\r\nimport { Link } from '../../../renderer/Link';\r\nimport { API_URL } from '../../../renderer/CONSTANT_URL';\r\nimport imgKakao from '/images/icon-kakao.webp';\r\n\r\nexport { SelectStage };\r\n\r\nfunction SelectStage({ setMove }: { setMove: React.Dispatch<React.SetStateAction<number>> }) {\r\n    const [popup, setPopup] = useState<Window | null>(null);\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const nextStage = () => {\r\n        setMove(-100);\r\n        dispatch(LOGGING_IN(true));\r\n    };\r\n\r\n    const callAgreementScreen = () => {\r\n        const width = 500;\r\n        const height = 700;\r\n        const left = window.screenX + (window.outerWidth - width) / 2;\r\n        const top = window.screenY + (window.outerHeight - height) / 2;\r\n\r\n        const kakaoPopup = window.open(\r\n            `${API_URL}/oauth/kakao`,\r\n            'kakao_popup',\r\n            `width=${width},height=${height},left=${left},top=${top}`\r\n        );\r\n\r\n        setPopup(kakaoPopup);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!popup) return;\r\n\r\n        const timer = setInterval(() => {\r\n            if (!popup) {\r\n                timer && clearInterval(timer);\r\n\r\n                return;\r\n            }\r\n\r\n            const popupUrl = popup.location.href;\r\n            if (!popupUrl) return;\r\n\r\n            const searchParams = new URL(popupUrl).searchParams;\r\n            const authorizeCode = searchParams.get('code');\r\n\r\n            if (authorizeCode) {\r\n                popup.close();\r\n                getAccessTokenFromKakao(authorizeCode).then((data) => {\r\n                    if (data.success) {\r\n                        getKakaoUserData().then((data) => {\r\n                            if (data.success) {\r\n                                window.location.href = '/my';\r\n                            } else {\r\n                                console.error(`카카오 사용자 데이터 가져오기 실패`);\r\n                            }\r\n                        });\r\n                    } else {\r\n                        console.error(`카카오 API 토큰 요청에 실패했습니다.`);\r\n                    }\r\n                });\r\n            }\r\n        }, 500);\r\n    }, [popup]);\r\n\r\n    async function getAccessTokenFromKakao(authorizeCode: string) {\r\n        const res = await fetch(`${API_URL}/oauth/kakao/token?code=${authorizeCode}`, {\r\n            credentials: 'include',\r\n            method: 'GET',\r\n        });\r\n        const data = await res.json();\r\n\r\n        return data;\r\n    }\r\n\r\n    async function getKakaoUserData() {\r\n        const res = await fetch(`${API_URL}/oauth/kakao/users`, {\r\n            credentials: 'include',\r\n            method: 'GET',\r\n        });\r\n        const data = await res.json();\r\n\r\n        return data;\r\n    }\r\n\r\n    return (\r\n        <section className=\"login-select-stage\">\r\n            <h3 className=\"sr-only\">로그인 방식 선택</h3>\r\n            <div className=\"container-rocket\">\r\n                <span>🚀</span>\r\n            </div>\r\n            <button type=\"button\" onClick={nextStage} className=\"styled-button reuse-in-login\">\r\n                로그인\r\n            </button>\r\n            <button type=\"button\" className=\"styled-button kakao-login\" onClick={callAgreementScreen}>\r\n                <img src={imgKakao} alt=\"카카오 아이콘\" role=\"presentation\" />\r\n                <span>카카오 로그인</span>\r\n            </button>\r\n            <Link href=\"/signup\" className=\"link-to-signup\">\r\n                회원가입\r\n            </Link>\r\n        </section>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { useAppDispatch } from '../../../renderer/store/hooks';\r\nimport { LOGGING_IN, SET_ID } from '../../../renderer/_reducers/_slices/loginSlice';\r\n\r\nexport { IdStage };\r\n\r\nfunction IdStage({ setMove }: { setMove: React.Dispatch<React.SetStateAction<number>> }) {\r\n    const dispatch = useAppDispatch();\r\n    const [id, setId] = useState('');\r\n\r\n    const handlePrev = () => {\r\n        setMove((prev) => prev + 100);\r\n        dispatch(LOGGING_IN(false));\r\n    };\r\n\r\n    const handleNext = () => {\r\n        setMove((prev) => prev - 100);\r\n        dispatch(SET_ID(id));\r\n    };\r\n\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setId(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <section className=\"login-id-stage\">\r\n            <h3 className=\"sr-only\">아이디 입력</h3>\r\n            <label htmlFor=\"loginId\">아이디</label>\r\n            <input type=\"text\" id=\"loginId\" onChange={handleChange} />\r\n            <div className=\"button-group-move\">\r\n                <button type=\"button\" onClick={handlePrev} aria-label=\"이전 화면으로 이동\">\r\n                    첫 화면\r\n                </button>\r\n                <button type=\"button\" onClick={handleNext} aria-label=\"다음 화면으로 이동\">\r\n                    비밀번호\r\n                </button>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../renderer/store/hooks';\r\nimport { LOGGING_IN } from '../../../renderer/_reducers/_slices/loginSlice';\r\nimport { API_URL } from '../../../renderer/CONSTANT_URL';\r\n\r\nexport { PasswordStage };\r\n\r\nfunction PasswordStage({ setMove }: { setMove: React.Dispatch<React.SetStateAction<number>> }) {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const id = useAppSelector((state) => state.loginSlice.currentId);\r\n    const [password, setPassword] = useState<string>('');\r\n    const [isChecked, setIsChecked] = useState<boolean>(false);\r\n\r\n    const handlePrev = () => {\r\n        setMove((prev) => prev + 100);\r\n    };\r\n\r\n    const handlePasswordChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(event.target.value);\r\n    };\r\n    const handleCheckChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setIsChecked(event.target.checked);\r\n    };\r\n\r\n    async function handleClick() {\r\n        // 톱바의 뒤로가기 보여줘도 됨\r\n        dispatch(LOGGING_IN(false));\r\n\r\n        // 로그인 통신\r\n        try {\r\n            const body = new URLSearchParams();\r\n            body.append('userId', id);\r\n            body.append('password', password);\r\n            body.append('keepLogin', isChecked ? 'true' : 'false');\r\n\r\n            const res = await fetch(`${API_URL}/users/login`, {\r\n                credentials: 'include',\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/x-www-form-urlencoded',\r\n                },\r\n                body: body.toString(),\r\n            });\r\n\r\n            const data = await res.json();\r\n\r\n            if (data.success) {\r\n                window.alert('🎉🎉로그인에 성공했습니다🎉🎉');\r\n                window.location.href = '/search';\r\n            } else {\r\n                window.alert('로그인에 실패했습니다');\r\n            }\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <section className=\"login-password-stage\">\r\n            <h3 className=\"sr-only\">비밀번호 입력</h3>\r\n\r\n            <label htmlFor=\"loginPassword\">비밀번호</label>\r\n            <input type=\"password\" id=\"loginPassword\" onChange={handlePasswordChange} />\r\n\r\n            <label htmlFor=\"loginPersist\">로그인 유지</label>\r\n            <input type=\"checkbox\" id=\"loginPersist\" onChange={handleCheckChange} />\r\n\r\n            <div className=\"button-group-move\">\r\n                <button type=\"button\" onClick={handlePrev} aria-label=\"이전 화면으로 이동\">\r\n                    아이디\r\n                </button>\r\n                <button type=\"button\" onClick={handleClick} aria-label=\"다음 화면으로 이동\">\r\n                    로그인\r\n                </button>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { SelectStage } from './SelectStage';\r\nimport { IdStage } from './IdStage';\r\nimport { PasswordStage } from './PasswordStage';\r\n\r\nexport { LoginMain };\r\n\r\nfunction LoginMain() {\r\n    const [move, setMove] = useState(0);\r\n\r\n    return (\r\n        <main className=\"main-login\">\r\n            <div className=\"login-stage-wrapper\" style={{ left: `${move}%`, transition: '.5s' }}>\r\n                <SelectStage setMove={setMove} />\r\n                <IdStage setMove={setMove} />\r\n                <PasswordStage setMove={setMove} />\r\n            </div>\r\n        </main>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { TopBar } from '../../components/topBar/topBar';\r\nimport { LoginMain } from './LoginMain/LoginMain';\r\nimport { useCheckLoginStatus } from '../../renderer/_hooks/useCheckLoginStatus';\r\n\r\nexport const documentProps = {\r\n    title: '로그인 | Green Maps',\r\n    description: '채식 식당 지도 서비스 로그인',\r\n};\r\n\r\nexport { Page };\r\n\r\nfunction Page() {\r\n    useCheckLoginStatus();\r\n\r\n    return (\r\n        <>\r\n            <TopBar title={'로그인'} />\r\n            <LoginMain />\r\n        </>\r\n    );\r\n}\r\n"],"names":["data"],"mappings":"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"}