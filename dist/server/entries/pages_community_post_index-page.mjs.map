{"version":3,"file":"pages_community_post_index-page.mjs","sources":["../../../pages/community/post/ContentSection/TextArea/TextArea.tsx","../../../pages/community/post/ContentSection/PostLikeButton.tsx","../../../pages/community/post/ContentSection/MoreButton.tsx","../../../pages/community/post/ContentSection/ContentSection.tsx","../../../pages/community/post/CommentSection/WriteComment/SubmitButton.tsx","../../../pages/community/post/CommentSection/WriteComment/WriteComment.tsx","../../../pages/community/post/CommentSection/Notice.tsx","../../../pages/community/post/CommentSection/CommentList/MoreButton.tsx","../../../pages/community/post/CommentSection/CommentList/CommentList.tsx","../../../pages/community/post/CommentSection/CommentSection.tsx","../../../pages/community/post/ModalGroup/EditDeleteNotifyModal/EditDeleteNotifyModal.tsx","../../../pages/community/post/ModalGroup/ModalGroup.tsx","../../../pages/community/post/index.page.tsx"],"sourcesContent":["import React from 'react';\r\nimport DOMPurify from 'isomorphic-dompurify';\r\n\r\nexport { TextArea };\r\n\r\nfunction TextArea(props: { content: string }) {\r\n    const htmlString = props.content;\r\n\r\n    return typeof window !== 'undefined' ? (\r\n        <div\r\n            dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(htmlString) }}\r\n            style={{ wordBreak: 'keep-all', marginTop: '40px' }}\r\n        />\r\n    ) : (\r\n        <div style={{ wordBreak: 'keep-all', marginTop: '40px' }} />\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { API_URL } from '../../../../renderer/CONSTANT_URL';\r\nimport imgHeart from '/images/icon-heart.svg';\r\n\r\nexport { PostLikeButton };\r\n\r\nfunction PostLikeButton(props: { postId: string; like: Array<{ user: string }> | undefined }) {\r\n    const { postId, like } = props;\r\n    const [userId, setUserId] = useState<string | null>(null);\r\n    const [likeCount, setLikeCount] = useState<number>(like ? like.length : 0);\r\n    const [buttonOn, setButtonOn] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        getUserId();\r\n        async function getUserId() {\r\n            try {\r\n                const res = await fetch(`${API_URL}/users`);\r\n                const data = await res.json();\r\n\r\n                if (data.success) {\r\n                    setUserId(data.user.userId);\r\n                } else {\r\n                    setUserId(null);\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (like) {\r\n            setButtonOn(like.some((userInfo) => userInfo.user === userId));\r\n        }\r\n    }, [userId]);\r\n\r\n    function handleClick() {\r\n        buttonOn ? delLike() : addLike();\r\n        setButtonOn(buttonOn ? false : true);\r\n    }\r\n\r\n    async function addLike() {\r\n        const res = await fetch(`${API_URL}/posts/${postId}/like`, {\r\n            credentials: 'include',\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ user: userId }),\r\n        });\r\n\r\n        if (res.ok) setLikeCount(likeCount + 1);\r\n        else throw new Error();\r\n    }\r\n\r\n    async function delLike() {\r\n        const res = await fetch(`${API_URL}/posts/${postId}/like`, {\r\n            credentials: 'include',\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ user: userId }),\r\n        });\r\n\r\n        if (res.ok) setLikeCount(likeCount - 1);\r\n        else throw new Error();\r\n    }\r\n\r\n    return (\r\n        <button className=\"button-like\" type=\"button\" onClick={handleClick} style={{ margin: '60px auto 0px' }}>\r\n            <img src={imgHeart} alt=\"좋아요 이미지\" className={`img-like review ${buttonOn ? 'on' : ''}`} />\r\n            <span style={{ minWidth: '20px' }}>{likeCount}</span>\r\n        </button>\r\n    );\r\n}\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { useAppDispatch } from '../../../../renderer/store/hooks';\r\nimport {\r\n    EDIT_DELETE_NOTIFY_MODAL,\r\n    SET_POST_ID,\r\n    SAME_USER_OWNER,\r\n    SET_ACCESS_TARGET,\r\n} from '../../../../renderer/_reducers/_slices/postSlice';\r\nimport appModalMode from '../../../../components/modal/appModalMode';\r\nimport type { UserInfo } from '../../../../server/models/User';\r\n\r\nexport { MoreButton };\r\n\r\nfunction MoreButton({ userInfo, owner, postId }: { userInfo: UserInfo | null; owner: string; postId: string }) {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const moreButtonRef = useRef<HTMLButtonElement>(null);\r\n    const [user, setUser] = useState<UserInfo | null>(null);\r\n    const [nickname, setNickname] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (userInfo !== null) setUser(userInfo);\r\n        if (typeof owner === 'string') {\r\n            setNickname(owner);\r\n        }\r\n    }, [userInfo]);\r\n\r\n    function handleClick() {\r\n        appModalMode(true);\r\n\r\n        dispatch(EDIT_DELETE_NOTIFY_MODAL(true));\r\n        dispatch(SAME_USER_OWNER(user?.nickName === nickname));\r\n        dispatch(SET_POST_ID(postId));\r\n        dispatch(SET_ACCESS_TARGET('post'));\r\n    }\r\n\r\n    return (\r\n        <button\r\n            type=\"button\"\r\n            aria-label=\"더보기 버튼\"\r\n            className=\"button-more postitem\"\r\n            onClick={handleClick}\r\n            ref={moreButtonRef}\r\n        />\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { TextArea } from './TextArea/TextArea';\r\nimport type { Post, CommentInPost } from '../../../../server/models/Post';\r\nimport { PostLikeButton } from './PostLikeButton';\r\nimport { isSameDay } from '../../../../components/Date/isSameDay';\r\nimport { MoreButton } from './MoreButton';\r\nimport { UserInfo } from '../../../../server/models/User';\r\n\r\nexport { ContentSection };\r\n\r\nfunction ContentSection({ userInfo, postInfo }: { userInfo: UserInfo | null; postInfo: Post }) {\r\n    const { subject, content, like, owner, photo, registeredAt, comments, title, _id } = postInfo;\r\n\r\n    const [nickname, setNickname] = useState<string>('');\r\n\r\n    useEffect(() => {\r\n        console.log('owner', owner);\r\n        if (typeof owner !== 'undefined' && typeof owner.user_id === 'object') {\r\n            setNickname(owner.user_id.nickName);\r\n        }\r\n    }, [owner]);\r\n\r\n    return (\r\n        <section className=\"section-post-content\">\r\n            <h3 aria-label=\"게시글 제목\" className=\"txt-post-title\">\r\n                {title}\r\n            </h3>\r\n            <div>\r\n                <p aria-label=\"작성자\" className=\"txt-post-owner\">\r\n                    {nickname}\r\n                </p>\r\n                <div className=\"container-post-subinfo\">\r\n                    <LikeCount like={like} />\r\n                    <CommentCount comments={comments} />\r\n                    <Time registeredAt={registeredAt} />\r\n                </div>\r\n            </div>\r\n            <TextArea content={content} />\r\n            <PostLikeButton postId={_id} like={like} />\r\n            <MoreButton userInfo={userInfo} owner={nickname} postId={_id} />\r\n        </section>\r\n    );\r\n}\r\n\r\nfunction LikeCount(props: { like?: Array<{ user: string }> }) {\r\n    return (\r\n        <>\r\n            <dt className=\"sr-only\">좋아요 개수</dt>\r\n            <dd className=\"container-count-like\">\r\n                <span>{props.like?.length || 0}</span>\r\n            </dd>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction CommentCount(props: { comments?: Array<CommentInPost> }) {\r\n    return (\r\n        <>\r\n            <dt className=\"sr-only\">댓글 개수</dt>\r\n            <dd className=\"container-count-comment\">\r\n                <span>{props.comments?.length || 0}</span>\r\n            </dd>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction Time(props: { registeredAt: string }) {\r\n    const { registeredAt } = props;\r\n\r\n    const date = isSameDay(registeredAt)\r\n        ? `${registeredAt.split('. ').at(-1)?.split(':')[0]}:${registeredAt.split('. ').at(-1)?.split(':')[1]}`\r\n        : registeredAt.slice(0, 13);\r\n\r\n    return (\r\n        <>\r\n            <dt className=\"sr-only\">작성 시간</dt>\r\n            <dd className=\"container-post-time\">\r\n                <time dateTime=\"\">{date}</time>\r\n            </dd>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { API_URL } from '../../../../../renderer/CONSTANT_URL';\r\nimport type { UserInfo } from '../../../../../server/models/User';\r\n\r\nexport { SubmitButton };\r\n\r\nfunction SubmitButton({ postId, content }: { postId: string; content: string | null }) {\r\n    const handleClick = async () => {\r\n        const res = await fetch(`${API_URL}/users/`, {\r\n            credentials: 'include',\r\n            method: 'GET',\r\n        });\r\n        const data = (await res.json()) as {\r\n            success: boolean;\r\n            message?: string;\r\n            errorMessage?: string;\r\n            user?: UserInfo;\r\n        };\r\n\r\n        // return data;\r\n        if (data.success && data.user) {\r\n            submit(data.user._id);\r\n        } else {\r\n            if (confirm('로그인이 필요한 서비스입니다.\\n로그인 하시겠습니까?')) {\r\n                window.location.href = `/login`;\r\n            }\r\n        }\r\n    };\r\n\r\n    async function submit(user_id: string) {\r\n        try {\r\n            if (content !== null && content.length > 0) {\r\n                const body = {\r\n                    user_id: user_id,\r\n                    content: content,\r\n                };\r\n\r\n                const res = await fetch(`${API_URL}/posts/${postId}/comment`, {\r\n                    credentials: 'include',\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify(body),\r\n                });\r\n\r\n                const data = await res.json();\r\n\r\n                if (data.success === true) {\r\n                    window.location.reload();\r\n                }\r\n            }\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <button\r\n            type=\"button\"\r\n            onClick={handleClick}\r\n            disabled={content !== null && content.length > 0 ? false : true}\r\n            aria-label=\"댓글 등록 버튼\"\r\n        />\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { SubmitButton } from './SubmitButton';\r\n\r\nexport { WriteComment };\r\n\r\nfunction WriteComment({ postId }: { postId: string }) {\r\n    const [content, setContent] = useState<string | null>(null);\r\n\r\n    function handleChange(event: React.ChangeEvent<HTMLTextAreaElement>) {\r\n        setContent(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <form className=\"form-create-comment\">\r\n            <label htmlFor=\"comment\" className=\"sr-only\">\r\n                댓글 작성하기\r\n            </label>\r\n            <textarea id=\"comment\" onChange={handleChange} minLength={1} maxLength={100} />\r\n            <SubmitButton postId={postId} content={content} />\r\n        </form>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nexport { Notice };\r\n\r\nfunction Notice() {\r\n    return (\r\n        <div className=\"container-notice comment\">\r\n            <em>게시글과 관련없는 홍보성 댓글과 저속한 표현의 비방성 댓글은 삭제될 수 있습니다.</em>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { useAppDispatch } from '../../../../../renderer/store/hooks';\r\nimport {\r\n    EDIT_DELETE_NOTIFY_MODAL,\r\n    SAME_USER_OWNER,\r\n    SET_ACCESS_TARGET,\r\n    SET_COMMENT_ID,\r\n    SET_POST_ID,\r\n} from '../../../../../renderer/_reducers/_slices/postSlice';\r\nimport type { UserInfo } from '../../../../../server/models/User';\r\nimport type { CommentInPost } from '../../../../../server/models/Post';\r\n\r\nexport { MoreButton };\r\n\r\nfunction MoreButton({\r\n    userInfo,\r\n    postId,\r\n    comment,\r\n}: {\r\n    userInfo: UserInfo | null;\r\n    postId: string;\r\n    comment: CommentInPost;\r\n}) {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const moreButtonRef = useRef<HTMLButtonElement>(null);\r\n    const [user, setUser] = useState<UserInfo | null>(null);\r\n    const [nickname, setNickname] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (userInfo !== null) setUser(userInfo);\r\n        if (typeof comment.owner.user_id === 'object') {\r\n            setNickname(comment.owner.user_id.nickName);\r\n        }\r\n    }, [userInfo, comment]);\r\n\r\n    const handleClick = () => {\r\n        const app = document.querySelector('.app');\r\n        app?.classList.add('modal-mode');\r\n\r\n        dispatch(EDIT_DELETE_NOTIFY_MODAL(true));\r\n        dispatch(SAME_USER_OWNER(user?.nickName === nickname));\r\n        dispatch(SET_ACCESS_TARGET('comment'));\r\n        dispatch(SET_POST_ID(postId));\r\n        dispatch(SET_COMMENT_ID(comment._id));\r\n    };\r\n\r\n    return (\r\n        <button\r\n            type=\"button\"\r\n            aria-label=\"더보기 버튼\"\r\n            className=\"button-more commentitem\"\r\n            onClick={handleClick}\r\n            ref={moreButtonRef}\r\n        />\r\n    );\r\n}\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { isSameDay } from '../../../../../components/Date/isSameDay';\r\nimport { MoreButton } from './MoreButton';\r\nimport type { UserInfo } from '../../../../../server/models/User';\r\nimport type { CommentInPost } from '../../../../../server/models/Post';\r\nimport { useAppSelector } from '../../../../../renderer/store/hooks';\r\nimport { API_URL } from '../../../../../renderer/CONSTANT_URL';\r\n\r\nexport { CommentList };\r\n\r\nfunction CommentList({\r\n    userInfo,\r\n    postId,\r\n    comments,\r\n}: {\r\n    userInfo: UserInfo | null;\r\n    postId: string;\r\n    comments?: Array<CommentInPost>;\r\n}) {\r\n    return comments && comments.length > 0 ? (\r\n        <ul>\r\n            {comments.map((comment, i) => {\r\n                return (\r\n                    <CommentListItem\r\n                        key={comment._id}\r\n                        userInfo={userInfo}\r\n                        postId={postId}\r\n                        comment={comment}\r\n                        isLast={i === comments.length - 1}\r\n                    />\r\n                );\r\n            })}\r\n        </ul>\r\n    ) : (\r\n        <div className=\"style-wrapper-no-review\">\r\n            <div className=\"txt-no-review\">😭</div>\r\n            <p>댓글이 없어요.</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction CommentListItem({\r\n    userInfo,\r\n    postId,\r\n    comment,\r\n    isLast,\r\n}: {\r\n    userInfo: UserInfo | null;\r\n    postId: string;\r\n    comment: CommentInPost;\r\n    isLast: boolean;\r\n}) {\r\n    const targetCommentId = useAppSelector((state) => state.postSlice.commentId); // 클릭한 코멘트의 id\r\n\r\n    const { _id, owner, content, like, registeredAt, updatedAt } = comment;\r\n    const editMode = useAppSelector((state) => state.postSlice.editCommentMode);\r\n\r\n    const [nickname, setNickname] = useState<string>('');\r\n\r\n    useEffect(() => {\r\n        if (typeof owner !== 'undefined' && typeof owner.user_id === 'object') {\r\n            setNickname(owner.user_id.nickName);\r\n        }\r\n    }, [owner]);\r\n\r\n    const date = isSameDay(registeredAt)\r\n        ? `${registeredAt.split('. ').at(-1)?.split(':')[0]}:${registeredAt.split('. ').at(-1)?.split(':')[1]}`\r\n        : registeredAt.slice(0, 13);\r\n\r\n    const listElement = useRef<HTMLLIElement>(null);\r\n\r\n    useEffect(() => {\r\n        if (isLast && listElement.current) {\r\n            listElement.current.scrollIntoView(false);\r\n        }\r\n    }, [isLast]);\r\n\r\n    return (\r\n        <li className=\"li-commentitem\" ref={listElement}>\r\n            <dl className=\"wrapper-commentitem\">\r\n                <dl className=\"container-owner-date\">\r\n                    <dt className=\"sr-only\">댓글 작성자</dt>\r\n                    <dd className=\"txt-owner\">{nickname}</dd>\r\n                    <dt className=\"sr-only\">게시 시간</dt>\r\n                    <dd className=\"txt-date\">{date}</dd>\r\n                </dl>\r\n                <dl>\r\n                    <dt className=\"sr-only\">댓글 내용</dt>\r\n                    {editMode && targetCommentId === _id ? (\r\n                        <TextareaForEdit content={content} />\r\n                    ) : (\r\n                        <dd className=\"txt-content\">{content}</dd>\r\n                    )}\r\n                </dl>\r\n            </dl>\r\n            {editMode && targetCommentId === _id ? (\r\n                <EditCommentButton postId={postId} commentId={comment._id} />\r\n            ) : (\r\n                <MoreButton userInfo={userInfo} postId={postId} comment={comment} />\r\n            )}\r\n        </li>\r\n    );\r\n}\r\n\r\nfunction TextareaForEdit({ content }: { content: string }) {\r\n    const [value, setValue] = useState<string>(content);\r\n\r\n    function handleChange(event: React.ChangeEvent<HTMLTextAreaElement>) {\r\n        setValue(event.target.value);\r\n    }\r\n\r\n    return <textarea id=\"editCommentTextarea\" onChange={handleChange} minLength={1} maxLength={100} value={value} />;\r\n}\r\n\r\nfunction EditCommentButton({ postId, commentId }: { postId: string; commentId: string }) {\r\n    function handleClick() {\r\n        const textarea = document.getElementById('editCommentTextarea') as HTMLTextAreaElement;\r\n\r\n        if (textarea !== null) {\r\n            editComment(textarea.value);\r\n        }\r\n    }\r\n\r\n    async function editComment(content: string) {\r\n        const res = await fetch(`${API_URL}/comments/${commentId}?postId=${postId}`, {\r\n            credentials: 'include',\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ content: content }),\r\n        });\r\n\r\n        const data = await res.json();\r\n\r\n        if (data.success) {\r\n            alert('댓글이 수정되었습니다.');\r\n        } else {\r\n            alert('다시 시도해주세요.');\r\n        }\r\n\r\n        window.location.reload();\r\n    }\r\n    return (\r\n        <button type=\"button\" className=\"button-more commentitem edit\" onClick={handleClick}>\r\n            수정\r\n        </button>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../renderer/store/hooks';\r\nimport { WriteComment } from './WriteComment/WriteComment';\r\nimport { Notice } from './Notice';\r\nimport { CommentList } from './CommentList/CommentList';\r\nimport { Pagination } from '../../../../components/Pagination/Pagination';\r\nimport { CommentPagination } from '../../../../renderer/_reducers/_slices/paginationSlice';\r\nimport type { CommentInPost } from '../../../../server/models/Post';\r\nimport type { UserInfo } from '../../../../server/models/User';\r\n\r\nexport { CommentSection };\r\n\r\nconst perPage = 10;\r\n\r\nfunction CommentSection({\r\n    postId,\r\n    comments,\r\n    userInfo,\r\n}: {\r\n    postId: string;\r\n    comments?: Array<CommentInPost>;\r\n    userInfo: UserInfo | null;\r\n}) {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const paginatedComment = useAppSelector((state) => state.paginationSlice.comment) as CommentPagination;\r\n\r\n    const currentPage = useAppSelector((state) => state.paginationSlice.currentPage);\r\n    const [commentInPage, setCommentInPage] = useState(paginatedComment[currentPage - 1]);\r\n\r\n    useEffect(() => {\r\n        dispatch({ type: 'paginationSlice/CURRENT_PAGE', currentPage: Object.keys(paginatedComment).length });\r\n    }, [paginatedComment]);\r\n\r\n    useEffect(() => {\r\n        setCommentInPage(paginatedComment[currentPage - 1]);\r\n    }, [paginatedComment, currentPage]);\r\n\r\n    return (\r\n        <section className=\"section-post-comment\">\r\n            {comments && comments.length > 0 ? (\r\n                <h3>\r\n                    댓글 <span>({comments.length})</span>\r\n                </h3>\r\n            ) : (\r\n                <h3 className=\"sr-only\">댓글</h3>\r\n            )}\r\n            <Notice />\r\n            <WriteComment postId={postId} />\r\n            <CommentList postId={postId} comments={commentInPage} userInfo={userInfo} />\r\n            {comments && comments.length > perPage ? <Pagination count={comments.length} perPage={perPage} /> : null}\r\n        </section>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../../renderer/store/hooks';\r\nimport { EDIT_DELETE_NOTIFY_MODAL, SET_EDIT_COMMENT_MODE } from '../../../../../renderer/_reducers/_slices/postSlice';\r\nimport { API_URL } from '../../../../../renderer/CONSTANT_URL';\r\nimport appModalMode from '../../../../../components/modal/appModalMode';\r\n\r\nexport { EditDeleteNotifyModal };\r\n\r\nfunction EditDeleteNotifyModal() {\r\n    const [show, setShow] = useState(false);\r\n    const editDeleteNotifyModalOn = useAppSelector((state) => state.postSlice.editDeleteNotifyModalOn);\r\n    const sameUserOwner = useAppSelector((state) => state.postSlice.sameUserOwner);\r\n\r\n    useEffect(() => {\r\n        if (editDeleteNotifyModalOn === true) setShow(true);\r\n        else setShow(false);\r\n    }, [editDeleteNotifyModalOn]);\r\n\r\n    return (\r\n        <article className={`modal-edit-delete-notify ${show ? 'on' : ''}`}>\r\n            <h4 className=\"sr-only\">수정, 삭제, 신고용 모달</h4>\r\n            <ul>\r\n                {sameUserOwner ? (\r\n                    <>\r\n                        <EDIT />\r\n                        <DELETE />\r\n                    </>\r\n                ) : (\r\n                    <li> 🚨 신고하기</li>\r\n                )}\r\n            </ul>\r\n        </article>\r\n    );\r\n}\r\n\r\nfunction EDIT() {\r\n    const dispatch = useAppDispatch();\r\n    const postId = useAppSelector((state) => state.postSlice.postId);\r\n    const accessTarget = useAppSelector((state) => state.postSlice.accessTarget);\r\n\r\n    function handleClick() {\r\n        if (accessTarget === 'post') {\r\n            window.location.href = `/community/edit/${postId}`;\r\n\r\n            appModalMode(false);\r\n            dispatch(EDIT_DELETE_NOTIFY_MODAL(false));\r\n        } else if (accessTarget === 'comment') {\r\n            dispatch(SET_EDIT_COMMENT_MODE(true));\r\n            appModalMode(false);\r\n            dispatch(EDIT_DELETE_NOTIFY_MODAL(false));\r\n        }\r\n    }\r\n\r\n    return <li onClick={handleClick}>🩹 수정하기</li>;\r\n}\r\n\r\nfunction DELETE() {\r\n    const dispatch = useAppDispatch();\r\n    const postId = useAppSelector((state) => state.postSlice.postId);\r\n    const commentId = useAppSelector((state) => state.postSlice.commentId);\r\n    const accessTarget = useAppSelector((state) => state.postSlice.accessTarget);\r\n\r\n    async function handleClick() {\r\n        if (accessTarget === 'post') {\r\n            deletePost();\r\n        } else if (accessTarget === 'comment') {\r\n            deleteComment();\r\n        }\r\n    }\r\n\r\n    async function deletePost() {\r\n        try {\r\n            const res = await fetch(`${API_URL}/posts/${postId}`, {\r\n                credentials: 'include',\r\n                method: 'DELETE',\r\n            });\r\n\r\n            const data = await res.json();\r\n\r\n            if (data.success) {\r\n                window.location.href = '/community';\r\n            } else {\r\n                alert('다시 시도해주세요.');\r\n            }\r\n        } catch (err) {\r\n            console.error(err);\r\n        } finally {\r\n            appModalMode(false);\r\n            dispatch(EDIT_DELETE_NOTIFY_MODAL(false));\r\n        }\r\n    }\r\n\r\n    async function deleteComment() {\r\n        try {\r\n            const res = await fetch(`${API_URL}/comments/${commentId}?postId=${postId}`, {\r\n                credentials: 'include',\r\n                method: 'DELETE',\r\n            });\r\n\r\n            const data = await res.json();\r\n\r\n            if (data.success) {\r\n                window.location.reload();\r\n            } else {\r\n                alert('다시 시도해주세요.');\r\n            }\r\n        } catch (err) {\r\n            console.error(err);\r\n        } finally {\r\n            appModalMode(false);\r\n            dispatch(EDIT_DELETE_NOTIFY_MODAL(false));\r\n        }\r\n    }\r\n    return <li onClick={handleClick}>🗑️ 삭제하기</li>;\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../renderer/store/hooks';\r\nimport { EDIT_DELETE_NOTIFY_MODAL, SET_POST_ID } from '../../../../renderer/_reducers/_slices/postSlice';\r\nimport { EditDeleteNotifyModal } from './EditDeleteNotifyModal/EditDeleteNotifyModal';\r\n\r\nexport { ModalGroup };\r\n\r\nfunction ModalGroup() {\r\n    const on = useAppSelector((state) => state.postSlice.editDeleteNotifyModalOn);\r\n    const [show, setShow] = useState(false);\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        if (on === true) setShow(true);\r\n        else setShow(false);\r\n    }, [on]);\r\n\r\n    useEffect(() => {\r\n        if (show) {\r\n            document.addEventListener('click', handleClose);\r\n        }\r\n\r\n        return () => {\r\n            document.removeEventListener('click', handleClose);\r\n        };\r\n    }, [show]);\r\n\r\n    function handleClose(event: MouseEvent) {\r\n        if ((event.target as HTMLElement).className === 'app modal-mode') {\r\n            const app = document.querySelector('.app');\r\n            app?.classList.remove('modal-mode');\r\n\r\n            dispatch(EDIT_DELETE_NOTIFY_MODAL(false));\r\n            dispatch(SET_POST_ID(''));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={`modal-group ${show ? 'on' : ''}`}>\r\n            <EditDeleteNotifyModal />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch } from '../../../renderer/store/hooks';\r\nimport { CommentPagination, SET_COMMENT } from '../../../renderer/_reducers/_slices/paginationSlice';\r\nimport { TopBar } from '../../../components/topBar/topBar';\r\nimport { ContentSection } from './ContentSection/ContentSection';\r\nimport { CommentSection } from './CommentSection/CommentSection';\r\nimport { ModalGroup } from './ModalGroup/ModalGroup';\r\nimport { useCheckLoginStatus } from '../../../renderer/_hooks/useCheckLoginStatus';\r\nimport LoadingMain from '../../../components/Loading/LoadingMain';\r\nimport type { PageContext } from '../../../renderer/types';\r\nimport type { Post } from '../../../server/models/Post';\r\n\r\nexport const documentProps = {\r\n    title: '게시글 | Green Maps',\r\n    description: '채식 식당 지도 서비스 게시글 페이지',\r\n};\r\n\r\nexport { Page };\r\n\r\nfunction Page(pageContext: PageContext) {\r\n    const dispatch = useAppDispatch();\r\n    const [_, userInfo] = useCheckLoginStatus();\r\n\r\n    const [postInfo, setPostInfo] = useState<Post | null>(() => {\r\n        if (pageContext.post) return pageContext.post;\r\n        else return null;\r\n    });\r\n\r\n    // 댓글 페이지 네이션을 위해 스토어에 저장\r\n    useEffect(() => {\r\n        if (postInfo) {\r\n            if (postInfo.comments) {\r\n                const obj: CommentPagination = {};\r\n                // 10개(0~9번지)는 0번 키에 저장, (10~19번지)는 1번 키에 저장\r\n                for (let i = 0; i < postInfo.comments.length; i = i + 10) {\r\n                    const arrPerPage = postInfo.comments.slice(i, i + 10);\r\n                    obj[i / 10] = arrPerPage;\r\n                }\r\n\r\n                dispatch(SET_COMMENT(obj));\r\n            }\r\n        }\r\n    }, [postInfo]);\r\n\r\n    return postInfo ? (\r\n        <React.Suspense fallback={<LoadingMain />}>\r\n            <TopBar title={postInfo.subject} />\r\n            <main className=\"main-read-post\">\r\n                <ContentSection userInfo={userInfo} postInfo={postInfo} />\r\n                {postInfo.subject !== '공지사항' && (\r\n                    <CommentSection userInfo={userInfo} postId={postInfo._id} comments={postInfo.comments} />\r\n                )}\r\n            </main>\r\n            <ModalGroup />\r\n        </React.Suspense>\r\n    ) : (\r\n        <LoadingMain />\r\n    );\r\n}\r\n"],"names":["MoreButton"],"mappings":"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"}