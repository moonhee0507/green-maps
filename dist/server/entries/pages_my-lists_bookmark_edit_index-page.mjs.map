{"version":3,"file":"pages_my-lists_bookmark_edit_index-page.mjs","sources":["../../../pages/my-lists/bookmark/edit/Notice/Notice.tsx","../../../pages/my-lists/bookmark/edit/GroupNameList/GroupInfo.tsx","../../../../../../../../images/icon-edit.svg","../../../pages/my-lists/bookmark/edit/GroupNameList/ButtonGroup.tsx","../../../pages/my-lists/bookmark/edit/GroupNameList/GroupNameList.tsx","../../../pages/my-lists/bookmark/edit/ModalGroup/EditGroupModal/GroupNameInput.tsx","../../../pages/my-lists/bookmark/edit/ModalGroup/EditGroupModal/CompleteButton.tsx","../../../pages/my-lists/bookmark/edit/ModalGroup/EditGroupModal/EditGroupModal.tsx","../../../pages/my-lists/bookmark/edit/ModalGroup/GroupOrderModal.tsx","../../../pages/my-lists/bookmark/edit/ModalGroup/ModalGroup.tsx","../../../pages/my-lists/bookmark/edit/index.page.tsx"],"sourcesContent":["import React from 'react';\r\n\r\nexport { Notice };\r\n\r\nfunction Notice() {\r\n    return (\r\n        <div className=\"container-notice\">\r\n            <em>기본 그룹은 편집할 수 없습니다.</em>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport type { GroupList } from '../../../../../server/models/Bookmark';\r\nimport type { Bookmark } from '../../../../../server/models/User';\r\n\r\nexport { GroupInfo };\r\n\r\nfunction GroupInfo({ groupInfo, bookmarkList }: { groupInfo: GroupList; bookmarkList: Bookmark[] }) {\r\n    const { groupIcon, name } = groupInfo;\r\n    const [count, setCount] = useState<number>(0);\r\n\r\n    useEffect(() => {\r\n        if (bookmarkList.length === 0) setCount(0);\r\n        if (bookmarkList.length > 0) {\r\n            const sameName = bookmarkList.filter((list) => list.groupName === name);\r\n            setCount(sameName.length);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"style-wrapper-groupname-info\">\r\n            <div className=\"container-groupicon\">\r\n                <img src={groupIcon} alt=\"그룹 아이콘\" style={{ width: '100%', height: '100%' }} />\r\n            </div>\r\n            <div>\r\n                <p className=\"txt-groupname\">{name}</p>\r\n                <p className=\"txt-restaurant-count\">\r\n                    개수 <span className=\"num-restaurant-count\">{count}</span>\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","export default \"__VITE_PUBLIC_ASSET__63976eae__\"","import React from 'react';\r\nimport imgEdit from '/images/icon-edit.svg';\r\nimport imgDelete from '/images/icon-plus.svg';\r\nimport { useAppDispatch } from '../../../../../renderer/store/hooks';\r\nimport {\r\n    EDIT_GROUP_MODAL,\r\n    ICON_STANDARD,\r\n    SET_TARGET_GROUP,\r\n} from '../../../../../renderer/_reducers/_slices/myListSlice';\r\nimport type { GroupList } from '../../../../../server/models/Bookmark';\r\nimport { UserInfo } from '../../../../../server/models/User';\r\nimport { API_URL } from '../../../../../renderer/CONSTANT_URL';\r\n\r\nexport { ButtonGroup };\r\n\r\nfunction ButtonGroup({ groupInfo, userInfo }: { groupInfo: GroupList; userInfo: UserInfo | null }) {\r\n    const dispatch = useAppDispatch();\r\n\r\n    function handleEdit() {\r\n        const app = document.querySelector('.app');\r\n        app?.classList.add('modal-mode');\r\n\r\n        dispatch(EDIT_GROUP_MODAL(true));\r\n        dispatch(SET_TARGET_GROUP(groupInfo.name));\r\n\r\n        dispatch(ICON_STANDARD(groupInfo.groupIcon));\r\n    }\r\n\r\n    async function handleDelete() {\r\n        if (confirm('해당 그룹을 삭제하시겠습니까?')) {\r\n            const userId = userInfo?.userId;\r\n            const groupId = groupInfo._id;\r\n\r\n            await fetch(`${API_URL}/bookmark/${groupId}`, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ userId: userId }),\r\n            })\r\n                .then((res) => res.json())\r\n                .then((data) => {\r\n                    if (data.success) {\r\n                        alert('북마크 그룹이 삭제되었습니다.');\r\n                        window.location.reload();\r\n                    } else {\r\n                        alert('다시 시도해주세요.');\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button className=\"button-edit-group\" type=\"button\" aria-label=\"그룹 수정 버튼\" onClick={handleEdit}>\r\n                <img src={imgEdit} alt=\"수정 아이콘\" />\r\n            </button>\r\n            <button className=\"button-delete-group\" type=\"button\" aria-label=\"그룹 삭제 버튼\" onClick={handleDelete}>\r\n                <img src={imgDelete} alt=\"삭제 아이콘\" />\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { GroupInfo } from './GroupInfo';\r\nimport { ButtonGroup } from './ButtonGroup';\r\nimport type { Bookmark, UserInfo } from '../../../../../server/models/User';\r\nimport type { GroupList } from '../../../../../server/models/Bookmark';\r\n\r\nexport { GroupNameList };\r\n\r\nfunction GroupNameList({\r\n    userInfo,\r\n    bookmarkList,\r\n    groupList,\r\n}: {\r\n    userInfo: UserInfo | null;\r\n    bookmarkList: Bookmark[];\r\n    groupList: GroupList[] | null;\r\n}) {\r\n    const [arrGroupName, setArrGroupName] = useState<GroupList[] | null>(null);\r\n\r\n    useEffect(() => {\r\n        if (groupList !== null) {\r\n            setArrGroupName(groupList);\r\n        }\r\n    }, [groupList]);\r\n\r\n    return (\r\n        <ul>\r\n            {arrGroupName !== null &&\r\n                arrGroupName.map((groupInfo) => {\r\n                    return (\r\n                        <GroupNameListItem\r\n                            key={Math.random()}\r\n                            userInfo={userInfo}\r\n                            groupInfo={groupInfo}\r\n                            bookmarkList={bookmarkList}\r\n                        />\r\n                    );\r\n                })}\r\n        </ul>\r\n    );\r\n}\r\n\r\nfunction GroupNameListItem({\r\n    userInfo,\r\n    groupInfo,\r\n    bookmarkList,\r\n}: {\r\n    userInfo: UserInfo | null;\r\n    groupInfo: GroupList;\r\n    bookmarkList: Bookmark[];\r\n}) {\r\n    return (\r\n        <li className=\"li-bookmarkgroup reuse\">\r\n            <div className=\"style-wrapper-groupname\">\r\n                <GroupInfo groupInfo={groupInfo} bookmarkList={bookmarkList} />\r\n                {groupInfo.name !== '기본 그룹' && <ButtonGroup userInfo={userInfo} groupInfo={groupInfo} />}\r\n            </div>\r\n        </li>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { SET_GROUP_NAME } from '../../../../../../renderer/_reducers/_slices/myListSlice';\r\nimport { useAppDispatch, useAppSelector } from '../../../../../../renderer/store/hooks';\r\n\r\nexport { GroupNameInput };\r\n\r\nfunction GroupNameInput() {\r\n    const dispatch = useAppDispatch();\r\n    const initialName = useAppSelector((state) => state.myListSlice.targetGroup);\r\n    const groupName = useAppSelector((state) => state.myListSlice.groupName);\r\n    const [inputValue, setInputValue] = useState<string>('');\r\n\r\n    useEffect(() => {\r\n        if (groupName === null) {\r\n            setInputValue(initialName);\r\n        }\r\n        if (groupName === '') {\r\n            setInputValue('');\r\n        }\r\n    }, [groupName, initialName]);\r\n\r\n    function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n        setInputValue(event.target.value);\r\n        dispatch(SET_GROUP_NAME(event.target.value));\r\n    }\r\n    return (\r\n        <>\r\n            <label htmlFor=\"groupNameForEdit\" className=\"sr-only\">\r\n                그룹명\r\n            </label>\r\n            <input\r\n                type=\"text\"\r\n                id=\"groupNameForEdit\"\r\n                placeholder=\"그룹명을 입력해 주세요.\"\r\n                maxLength={20}\r\n                minLength={1}\r\n                onChange={handleChange}\r\n                value={inputValue}\r\n            />\r\n        </>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../../../renderer/store/hooks';\r\nimport { API_URL } from '../../../../../../renderer/CONSTANT_URL';\r\nimport { COMPARE_ICON } from '../../../../../../renderer/_reducers/_slices/myListSlice';\r\nimport type { UserInfo } from '../../../../../../server/models/User';\r\nimport type { GroupList } from '../../../../../../server/models/Bookmark';\r\n\r\nexport { CompleteButton };\r\n\r\nfunction CompleteButton({ userInfo, groupList }: { userInfo: UserInfo | null; groupList: GroupList[] | null }) {\r\n    const [show, setShow] = useState({ disabled: true });\r\n    const groupName = useAppSelector((state) => state.myListSlice.groupName);\r\n    const groupIcon = useAppSelector((state) => state.myListSlice.selectedIcon);\r\n    const targetGroupName = useAppSelector((state) => state.myListSlice.targetGroup);\r\n    const compareIcon = useAppSelector((state) => state.myListSlice.sameIcon);\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        if (groupList !== null) {\r\n            const originIcon = groupList.filter((list) => list.name === targetGroupName)[0].groupIcon;\r\n            dispatch(COMPARE_ICON(originIcon === groupIcon));\r\n        }\r\n    }, [groupIcon]);\r\n\r\n    useEffect(() => {\r\n        if ((groupName !== null && groupName !== '' && groupName !== targetGroupName) || compareIcon === false) {\r\n            setShow({ disabled: false });\r\n        } else {\r\n            setShow({ disabled: true });\r\n        }\r\n    }, [groupName, compareIcon, targetGroupName, compareIcon]);\r\n\r\n    async function handleClick() {\r\n        if (userInfo !== null && groupList !== null) {\r\n            const arrGroupName = groupList.map((group) => group.name);\r\n\r\n            if (arrGroupName.includes(groupName || targetGroupName)) {\r\n                alert('중복된 그룹명은 사용할 수 없습니다.');\r\n            } else {\r\n                const { userId } = userInfo;\r\n                const groupId = groupList.filter((list) => list.name === targetGroupName)[0]._id;\r\n\r\n                const res = await fetch(`${API_URL}/bookmark/update`, {\r\n                    method: 'PATCH',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({\r\n                        userId: userId,\r\n                        groupId: groupId,\r\n                        name: groupName || targetGroupName,\r\n                        groupIcon: groupIcon,\r\n                    }),\r\n                });\r\n\r\n                const data = await res.json();\r\n\r\n                if (data.success === true) {\r\n                    window.location.reload();\r\n                } else {\r\n                    alert('다시 시도해주세요.');\r\n                }\r\n            }\r\n        } else {\r\n            alert('로그아웃 되었습니다.\\n다시 로그인해주세요.');\r\n            window.location.href = '/login';\r\n        }\r\n    }\r\n    return (\r\n        <button type=\"button\" className={`button-groupname-complete ${show ? 'on' : ''}`} onClick={handleClick}>\r\n            완료\r\n        </button>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../../../renderer/store/hooks';\r\nimport { GroupNameInput } from './GroupNameInput';\r\nimport { IconSelection } from '../../../../ModalGroup/AddGroupModal/IconSelection';\r\nimport { CompleteButton } from './CompleteButton';\r\nimport {\r\n    EDIT_GROUP_MODAL,\r\n    SET_GROUP_NAME,\r\n    ICON_STANDARD,\r\n} from '../../../../../../renderer/_reducers/_slices/myListSlice';\r\nimport imgClose from '/images/icon-plus.svg';\r\nimport type { UserInfo } from '../../../../../../server/models/User';\r\nimport type { GroupList } from '../../../../../../server/models/Bookmark';\r\n\r\nexport function EditGroupModal({ userInfo, groupList }: { userInfo: UserInfo | null; groupList: GroupList[] | null }) {\r\n    const dispatch = useAppDispatch();\r\n    const editGroupModalOn = useAppSelector((state) => state.myListSlice.editGroupModalOn);\r\n\r\n    const [show, setShow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (editGroupModalOn === true) setShow(true);\r\n        else setShow(false);\r\n    }, [editGroupModalOn]);\r\n\r\n    function handleClose() {\r\n        const app = document.querySelector('.app');\r\n        app?.classList.remove('modal-mode');\r\n\r\n        dispatch(EDIT_GROUP_MODAL(false));\r\n        dispatch(SET_GROUP_NAME(null));\r\n        dispatch(ICON_STANDARD('/images/icon-star.svg'));\r\n    }\r\n\r\n    return (\r\n        <article className={`modal-group-item ${show ? 'on' : ''}`}>\r\n            <h4>그룹 수정</h4>\r\n            <form action=\"\">\r\n                <GroupNameInput />\r\n                <IconSelection />\r\n                <CompleteButton userInfo={userInfo} groupList={groupList} />\r\n            </form>\r\n            <button type=\"button\" className=\"button-close\" onClick={handleClose}>\r\n                <img src={imgClose} alt=\"X 아이콘\" className=\"img-close\" />\r\n            </button>\r\n        </article>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport imgClose from '/images/icon-plus.svg';\r\nimport { useAppDispatch, useAppSelector } from '../../../../../renderer/store/hooks';\r\nimport { ORDER_MODAL, ORDER_STANDARD } from '../../../../../renderer/_reducers/_slices/myListSlice';\r\n\r\nexport { GroupOrderModal };\r\n\r\nfunction GroupOrderModal() {\r\n    const dispatch = useAppDispatch();\r\n    const orderStandard = useAppSelector((state) => state.myListSlice.groupNameOrder);\r\n    const orderModalOn = useAppSelector((state) => state.myListSlice.orderModalOn);\r\n    const [show, setShow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (orderModalOn === true) setShow(true);\r\n        else setShow(false);\r\n    }, [orderModalOn]);\r\n\r\n    function handleOrder(event: React.MouseEvent<HTMLButtonElement>) {\r\n        dispatch(ORDER_STANDARD(event.currentTarget.innerText));\r\n        handleClose();\r\n    }\r\n\r\n    function handleClose() {\r\n        const app = document.querySelector('.app');\r\n        app?.classList.remove('modal-mode');\r\n\r\n        dispatch(ORDER_MODAL(false));\r\n    }\r\n\r\n    return (\r\n        <article className={`modal-group-item ${show ? 'on' : ''}`}>\r\n            <h4>정렬기준</h4>\r\n            <div className=\"container-button\">\r\n                <button\r\n                    type=\"button\"\r\n                    onClick={handleOrder}\r\n                    className={`button-groupname-order ${orderStandard === '등록순' ? 'on' : ''}`}\r\n                >\r\n                    등록순\r\n                </button>\r\n                <button\r\n                    type=\"button\"\r\n                    onClick={handleOrder}\r\n                    className={`button-groupname-order ${orderStandard === '이름순' ? 'on' : ''}`}\r\n                >\r\n                    이름순\r\n                </button>\r\n            </div>\r\n            <button type=\"button\" className=\"button-close\" onClick={handleClose}>\r\n                <img src={imgClose} alt=\"X 아이콘\" className=\"img-close\" />\r\n            </button>\r\n        </article>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../../renderer/store/hooks';\r\nimport { EditGroupModal } from './EditGroupModal/EditGroupModal';\r\nimport {\r\n    EDIT_GROUP_MODAL,\r\n    SET_GROUP_NAME,\r\n    ICON_STANDARD,\r\n    ORDER_MODAL,\r\n} from '../../../../../renderer/_reducers/_slices/myListSlice';\r\nimport type { UserInfo } from '../../../../../server/models/User';\r\nimport type { GroupList } from '../../../../../server/models/Bookmark';\r\nimport { GroupOrderModal } from './GroupOrderModal';\r\n\r\nexport { ModalGroup };\r\n\r\nfunction ModalGroup({ userInfo, groupList }: { userInfo: UserInfo | null; groupList: GroupList[] | null }) {\r\n    const on = useAppSelector((state) => state.myListSlice.editGroupModalOn);\r\n    const [show, setShow] = useState(false);\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        if (on === true) setShow(true);\r\n        else setShow(false);\r\n    }, [on]);\r\n\r\n    useEffect(() => {\r\n        if (show) {\r\n            document.addEventListener('click', handleClose);\r\n        }\r\n\r\n        return () => {\r\n            document.removeEventListener('click', handleClose);\r\n        };\r\n    }, [show]);\r\n\r\n    function handleClose(event: MouseEvent) {\r\n        if ((event.target as HTMLElement).className === 'app modal-mode') {\r\n            const app = document.querySelector('.app');\r\n            app?.classList.remove('modal-mode');\r\n\r\n            dispatch(ORDER_MODAL(false));\r\n            dispatch(EDIT_GROUP_MODAL(false));\r\n\r\n            // 새그룹추가 모달 인풋창 초기화\r\n            dispatch(SET_GROUP_NAME(null));\r\n            // 선택 아이콘 초기화\r\n            dispatch(ICON_STANDARD('/images/icon-star.svg'));\r\n        }\r\n    }\r\n    return (\r\n        <div className={`modal-group ${show ? 'on' : ''}`}>\r\n            <GroupOrderModal />\r\n            <EditGroupModal userInfo={userInfo} groupList={groupList} />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { TopBar } from '../../../../components/topBar/topBar';\r\nimport { Notice } from './Notice/Notice';\r\nimport { GroupNameList } from './GroupNameList/GroupNameList';\r\nimport { NavBar } from '../../../../components/navBar';\r\nimport { ModalGroup } from './ModalGroup/ModalGroup';\r\nimport { API_URL } from '../../../../renderer/CONSTANT_URL';\r\nimport { useCheckLoginStatus } from '../../../../renderer/_hooks/useCheckLoginStatus';\r\nimport type { Bookmark, UserInfo } from '../../../../server/models/User';\r\nimport type { GroupList } from '../../../../server/models/Bookmark';\r\n\r\nexport const documentProps = {\r\n    title: '북마크 그룹 목록 편집 | Green Maps',\r\n    description: '북마크 그룹 목록 편집 페이지',\r\n};\r\nexport { Page };\r\n\r\nfunction Page() {\r\n    const [isLoggedIn, info] = useCheckLoginStatus();\r\n    const [groupList, setGroupList] = useState<GroupList[] | null>(null);\r\n\r\n    useEffect(() => {\r\n        try {\r\n            if (info) {\r\n                (async () => {\r\n                    const res = await fetch(`${API_URL}/bookmark/${info.userId}`);\r\n                    const data = await res.json();\r\n\r\n                    setGroupList(data.groupList);\r\n                })();\r\n            }\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    }, [info]);\r\n\r\n    return (\r\n        <>\r\n            <TopBar title=\"그룹 목록 편집\" />\r\n            <GroupListMain userInfo={info} groupList={groupList} />\r\n            <NavBar isLoggedIn={isLoggedIn} />\r\n            <ModalGroup userInfo={info} groupList={groupList} />\r\n        </>\r\n    );\r\n}\r\n\r\nfunction GroupListMain({ userInfo, groupList }: { userInfo: UserInfo | null; groupList: GroupList[] | null }) {\r\n    const [bookmarkList, setBookmarkList] = useState<Bookmark[] | null>(null);\r\n\r\n    useEffect(() => {\r\n        if (userInfo !== null) {\r\n            setBookmarkList(userInfo.bookmarkList);\r\n        } else {\r\n            setBookmarkList(null);\r\n        }\r\n    }, [userInfo]);\r\n\r\n    return (\r\n        <main className=\"main-group-list\">\r\n            <section>\r\n                <h3 className=\"sr-only\">내 북마크 그룹 목록</h3>\r\n                <Notice />\r\n                {bookmarkList && groupList && (\r\n                    <GroupNameList userInfo={userInfo} bookmarkList={bookmarkList} groupList={groupList} />\r\n                )}\r\n            </section>\r\n        </main>\r\n    );\r\n}\r\n"],"names":["imgDelete"],"mappings":"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"}