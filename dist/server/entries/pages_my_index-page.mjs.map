{"version":3,"file":"pages_my_index-page.mjs","sources":["../../../pages/my/ModalGroup/EditProfileImageModal/EditImageButton.tsx","../../../pages/my/ModalGroup/EditProfileImageModal/DeleteImageButton.tsx","../../../pages/my/ModalGroup/EditProfileImageModal/EditProfileImageModal.tsx","../../../pages/my/ModalGroup/EditNickNameModal/NickNameForm.tsx","../../../pages/my/ModalGroup/EditNickNameModal/Notice.tsx","../../../pages/my/ModalGroup/EditNickNameModal/SubmitButton.tsx","../../../pages/my/ModalGroup/EditNickNameModal/EditNickNameModal.tsx","../../../pages/my/ModalGroup/EditPasswordModal/NewPassword.tsx","../../../pages/my/ModalGroup/EditPasswordModal/CurrentPassword.tsx","../../../pages/my/ModalGroup/EditPasswordModal/EditPasswordModal.tsx","../../../pages/my/ModalGroup/EditDeleteNotifyModal/EditDeleteNotifyModal.tsx","../../../pages/my/ModalGroup/ModalGroup.tsx","../../../pages/my/index.page.tsx"],"sourcesContent":["import React, { useRef } from 'react';\r\nimport { useAppDispatch } from '../../../../renderer/store/hooks';\r\nimport { PROFILE_IMAGE_MODAL } from '../../../../renderer/_reducers/_slices/profileSlice';\r\nimport randomizeFileName from '../../../../components/image/randomizeFileName';\r\nimport { API_URL } from '../../../../renderer/CONSTANT_URL';\r\n\r\nexport { EditImageButton };\r\n\r\nfunction EditImageButton() {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const fileInput = useRef<HTMLInputElement>(null);\r\n\r\n    const handleClick = () => {\r\n        fileInput.current?.click();\r\n    };\r\n\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const target = event.target as HTMLInputElement;\r\n\r\n        if (target.files !== null) {\r\n            const file = target.files[0];\r\n            const fileName = randomizeFileName() + '.' + file.type.replace('image/', '');\r\n\r\n            // 스토리지에 이미지 업로드\r\n            uploadImageToStorage(file, fileName);\r\n        }\r\n    };\r\n\r\n    async function uploadImageToStorage(file: File, fileName: string) {\r\n        try {\r\n            const body = {\r\n                name: `client/${fileName}`,\r\n                type: file.type,\r\n            };\r\n\r\n            const resUrl = await fetch(`${API_URL}/images/client`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(body),\r\n            });\r\n\r\n            const data = await resUrl.json();\r\n            const signedUrl = data.signedUrl;\r\n\r\n            const res = await fetch(signedUrl, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': file.type,\r\n                },\r\n                body: file,\r\n            });\r\n\r\n            if (res.ok) {\r\n                await submitProfileImage(fileName);\r\n            }\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n    async function submitProfileImage(fileName: string) {\r\n        try {\r\n            await fetch(`${API_URL}/users/edit/profile`, {\r\n                credentials: 'include',\r\n                method: 'PATCH',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ profileImage: `client/${fileName}` }),\r\n            });\r\n        } catch (err) {\r\n            console.error(err);\r\n        } finally {\r\n            dispatch(PROFILE_IMAGE_MODAL(false));\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type=\"file\"\r\n                id=\"fileInput\"\r\n                accept=\"image/*\"\r\n                ref={fileInput}\r\n                onChange={handleChange}\r\n                style={{ display: 'none' }}\r\n            />\r\n            <button type=\"button\" className=\"button-groupname-order on\" onClick={handleClick}>\r\n                변경\r\n            </button>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { API_URL } from '../../../../renderer/CONSTANT_URL';\r\nimport { PROFILE_IMAGE_MODAL } from '../../../../renderer/_reducers/_slices/profileSlice';\r\nimport { useAppDispatch } from '../../../../renderer/store/hooks';\r\n\r\nexport { DeleteImageButton };\r\n\r\nfunction DeleteImageButton() {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const handleClick = async () => {\r\n        try {\r\n            await fetch(`${API_URL}/users/edit/profile`, {\r\n                credentials: 'include',\r\n                method: 'PATCH',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ profileImage: '' }),\r\n            });\r\n        } catch (err) {\r\n            console.error(err);\r\n        } finally {\r\n            dispatch(PROFILE_IMAGE_MODAL(false));\r\n            window.location.reload();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <button type=\"button\" className=\"button-groupname-order on\" onClick={handleClick}>\r\n            삭제\r\n        </button>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../renderer/store/hooks';\r\nimport { EditImageButton } from './EditImageButton';\r\nimport { DeleteImageButton } from './DeleteImageButton';\r\nimport { PROFILE_IMAGE_MODAL } from '../../../../renderer/_reducers/_slices/profileSlice';\r\nimport imgClose from '/images/icon-plus.svg';\r\n\r\nexport { EditProfileImageModal };\r\n\r\nfunction EditProfileImageModal() {\r\n    const profileImageModalOn = useAppSelector((state) => state.profileSlice.profileImageModalOn);\r\n    const [show, setShow] = useState(false);\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        if (profileImageModalOn === true) setShow(true);\r\n        else setShow(false);\r\n    }, [profileImageModalOn]);\r\n\r\n    function handleClose() {\r\n        const app = document.querySelector('.app');\r\n        app?.classList.remove('modal-mode');\r\n\r\n        dispatch(PROFILE_IMAGE_MODAL(false));\r\n    }\r\n\r\n    return (\r\n        <article className={`modal-group-item ${show ? 'on' : ''}`}>\r\n            <h4>프로필 사진</h4>\r\n            <div className=\"container-button\">\r\n                <EditImageButton />\r\n                <DeleteImageButton />\r\n            </div>\r\n            <button type=\"button\" className=\"button-close\" onClick={handleClose}>\r\n                <img src={imgClose} alt=\"X 아이콘\" className=\"img-close\" />\r\n            </button>\r\n        </article>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../renderer/store/hooks';\r\nimport { EDIT_NICKNAME } from '../../../../renderer/_reducers/_slices/profileSlice';\r\n\r\nexport { NickNameForm };\r\n\r\nfunction NickNameForm() {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const [inputValue, setInputValue] = useState<string>('');\r\n    const prevNickName = useAppSelector((state) => state.profileSlice.prevNickName);\r\n\r\n    useEffect(() => {\r\n        setInputValue(prevNickName);\r\n    }, [prevNickName]);\r\n\r\n    const handleChange = (event: React.ChangeEvent) => {\r\n        const target = event.target as HTMLInputElement;\r\n        setInputValue(target.value);\r\n        dispatch(EDIT_NICKNAME(target.value));\r\n    };\r\n\r\n    return (\r\n        <form\r\n            className=\"form-edit-nickName\"\r\n            onSubmit={(event: React.FormEvent<HTMLFormElement>) => {\r\n                event.preventDefault();\r\n            }}\r\n        >\r\n            <p className=\"num-count-nickName\">\r\n                <span>{inputValue.length}</span>/<span>17</span>\r\n            </p>\r\n            <label htmlFor=\"editNickNameInput\" className=\"sr-only\">\r\n                닉네임\r\n            </label>\r\n            <input\r\n                type=\"text\"\r\n                id=\"editNickNameInput\"\r\n                onChange={handleChange}\r\n                value={inputValue}\r\n                minLength={1}\r\n                maxLength={17}\r\n            />\r\n        </form>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nexport { Notice };\r\n\r\nfunction Notice() {\r\n    return (\r\n        <div className=\"container-notice edit-nickName\">\r\n            <em>한글, 영문, 숫자만 입력가능합니다.</em>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppSelector } from '../../../../renderer/store/hooks';\r\nimport { API_URL } from '../../../../renderer/CONSTANT_URL';\r\nimport isEmptyString from '../../../../components/validate/isEmptyString';\r\n\r\nexport { SubmitButton };\r\n\r\nfunction SubmitButton() {\r\n    // 중복 체크, 정규표현식 체크 후 버튼상태 처리\r\n    const prevNickName = useAppSelector((state) => state.profileSlice.prevNickName);\r\n    const nextNickName = useAppSelector((state) => state.profileSlice.nextNickName);\r\n\r\n    const [duplicate, setDuplicate] = useState(true);\r\n    const [validString, setValidString] = useState(false);\r\n\r\n    const [disabled, setDisabled] = useState(true);\r\n\r\n    useEffect(() => {\r\n        checkDuplicate(nextNickName);\r\n        checkString(nextNickName);\r\n    }, [nextNickName]);\r\n\r\n    useEffect(() => {\r\n        if (prevNickName !== nextNickName) {\r\n            if (duplicate === false && validString === true) {\r\n                setDisabled(false);\r\n            } else {\r\n                setDisabled(true);\r\n            }\r\n        } else {\r\n            setDisabled(true);\r\n        }\r\n    }, [duplicate, validString]);\r\n\r\n    async function checkDuplicate(nickName: string) {\r\n        const res = await fetch(`${API_URL}/users/check-nickname?nickname=${nickName}`, {\r\n            credentials: 'include',\r\n            method: 'GET',\r\n        });\r\n        const data = await res.json();\r\n\r\n        setDuplicate(data.duplicated);\r\n\r\n        return data;\r\n    }\r\n\r\n    function checkString(nickName: string) {\r\n        const regex = /^[ㄱ-힣a-zA-Z0-9\\s]{1,17}$/g;\r\n\r\n        if (regex.test(nickName) && !isEmptyString(nickName)) {\r\n            setValidString(true);\r\n        } else {\r\n            setValidString(false);\r\n        }\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        // trim한 결과에 대해서 다시 중복체크\r\n        let nickname = nextNickName.trim();\r\n\r\n        checkDuplicate(nickname).then((data) => {\r\n            if (data.duplicated === true) {\r\n                alert('닉네임 양옆 띄어쓰기를 제외하고 입력해주세요.');\r\n            } else {\r\n                editNickName(nickname);\r\n            }\r\n        });\r\n    };\r\n\r\n    async function editNickName(nickName: string) {\r\n        try {\r\n            const res = await fetch(`${API_URL}/users/edit/profile`, {\r\n                credentials: 'include',\r\n                method: 'PATCH',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ nickname: nickName }),\r\n            });\r\n\r\n            const data = await res.json();\r\n\r\n            if (data.success) {\r\n                window.location.reload();\r\n            }\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <button type=\"button\" className=\"styled-button nickName\" disabled={disabled} onClick={handleSubmit}>\r\n            {(() => {\r\n                if (duplicate) {\r\n                    return '이미 존재하는 닉네임입니다.';\r\n                } else if (!validString) {\r\n                    return '올바른 닉네임을 입력하세요.';\r\n                } else {\r\n                    return '완료';\r\n                }\r\n            })()}\r\n        </button>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../renderer/store/hooks';\r\nimport { NickNameForm } from './NickNameForm';\r\nimport { Notice } from './Notice';\r\nimport { SubmitButton } from './SubmitButton';\r\nimport imgClose from '/images/icon-plus.svg';\r\nimport {\r\n    PROFILE_NICKNAME_MODAL,\r\n    SET_NICKNAME,\r\n    EDIT_NICKNAME,\r\n} from '../../../../renderer/_reducers/_slices/profileSlice';\r\n\r\nexport { EditNickNameModal };\r\n\r\nfunction EditNickNameModal() {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const profileNickNameModalOn = useAppSelector((state) => state.profileSlice.profileNickNameModalOn);\r\n    const [show, setShow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (profileNickNameModalOn === true) setShow(true);\r\n        else setShow(false);\r\n    }, [profileNickNameModalOn]);\r\n\r\n    function handleClose() {\r\n        const app = document.querySelector('.app');\r\n        app?.classList.remove('modal-mode');\r\n\r\n        dispatch(PROFILE_NICKNAME_MODAL(false));\r\n        dispatch(SET_NICKNAME(''));\r\n        dispatch(EDIT_NICKNAME(''));\r\n    }\r\n\r\n    return (\r\n        <article className={`modal-group-item ${show ? 'on' : ''}`}>\r\n            <h4>닉네임 변경</h4>\r\n            <NickNameForm />\r\n            <Notice />\r\n            <SubmitButton />\r\n            <button type=\"button\" className=\"button-close\" onClick={handleClose}>\r\n                <img src={imgClose} alt=\"X 아이콘\" className=\"img-close\" />\r\n            </button>\r\n        </article>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch } from '../../../../renderer/store/hooks';\r\nimport { validatePassword } from '../../../../components/validate/regex';\r\nimport { API_URL } from '../../../../renderer/CONSTANT_URL';\r\nimport {\r\n    PASS_CURRENT_PASSWORD,\r\n    PROFILE_PASSWORD_MODAL,\r\n    SET_USERID,\r\n} from '../../../../renderer/_reducers/_slices/profileSlice';\r\n\r\nexport { NewPassword };\r\n\r\nfunction NewPassword() {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const [disabled, setDisabled] = useState(true);\r\n    const [value1, setValue1] = useState('');\r\n    const [value2, setValue2] = useState('');\r\n\r\n    const [isSame, setIsSame] = useState(false);\r\n    const [validateString, setValidateString] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (value1 === value2) {\r\n            setIsSame(true);\r\n            if (validatePassword(value1)) {\r\n                setValidateString(true);\r\n            } else {\r\n                setValidateString(false);\r\n            }\r\n        } else {\r\n            setIsSame(false);\r\n            setValidateString(false);\r\n        }\r\n    }, [value1, value2]);\r\n\r\n    useEffect(() => {\r\n        if (isSame && validateString) {\r\n            setDisabled(false);\r\n        } else {\r\n            setDisabled(true);\r\n        }\r\n    }, [isSame, validateString]);\r\n\r\n    const handleChangePW1 = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const target = event.target as HTMLInputElement;\r\n\r\n        setValue1(target.value);\r\n    };\r\n\r\n    const handleChangePW2 = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const target = event.target as HTMLInputElement;\r\n\r\n        setValue2(target.value);\r\n    };\r\n\r\n    const handleClick = async () => {\r\n        try {\r\n            const res = await fetch(`${API_URL}/users/edit/password`, {\r\n                credentials: 'include',\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ password: value1 }),\r\n            });\r\n\r\n            const data = await res.json();\r\n\r\n            if (data.success) {\r\n                const res = await fetch(`${API_URL}/users/logout`, {\r\n                    credentials: 'include',\r\n                    method: 'POST',\r\n                });\r\n\r\n                const data = await res.json();\r\n\r\n                if (data.success) {\r\n                    alert('비밀번호가 변경되었습니다.\\n로그인 페이지로 이동합니다.');\r\n                    window.location.href = '/login';\r\n                } else {\r\n                    alert('다시 시도해주세요.');\r\n                }\r\n            } else {\r\n                alert('다시 시도해주세요.');\r\n            }\r\n        } catch (err) {\r\n            console.error(err);\r\n        } finally {\r\n            dispatch(PROFILE_PASSWORD_MODAL(false));\r\n            dispatch(PASS_CURRENT_PASSWORD(false));\r\n            dispatch(SET_USERID(''));\r\n\r\n            // 페이지 전환때문에 모달그룹이 사라져서 직접 수정\r\n            const app = document.querySelector('.app');\r\n            app?.classList.remove('modal-mode');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={(event: React.FormEvent) => event.preventDefault()} className=\"form-new-password\">\r\n                <p className=\"txt-notice\">새로운 비밀번호를 입력해주세요.</p>\r\n                <div className=\"container-notice password\">\r\n                    <em>영문, 숫자, 특수문자(!@#$%^&*-+_=?) 모두 조합(8자리 이상)</em>\r\n                </div>\r\n                <label htmlFor=\"nextPassword\" className=\"sr-only\">\r\n                    비밀번호\r\n                </label>\r\n                <input type=\"password\" id=\"nextPassword\" onChange={handleChangePW1} placeholder=\"비밀번호\" />\r\n                <label htmlFor=\"confirmNextPassword\" className=\"sr-only\">\r\n                    비밀번호 재입력\r\n                </label>\r\n                <input\r\n                    type=\"password\"\r\n                    id=\"confirmNextPassword\"\r\n                    onChange={handleChangePW2}\r\n                    placeholder=\"비밀번호 재입력\"\r\n                    minLength={8}\r\n                    maxLength={32}\r\n                />\r\n            </form>\r\n            <button type=\"button\" onClick={handleClick} disabled={disabled} className=\"styled-button thin\">\r\n                {(() => {\r\n                    if (!isSame) {\r\n                        return '두 비밀번호가 일치하지 않습니다.';\r\n                    } else if (!validateString) {\r\n                        return '비밀번호 구성을 확인해주세요.';\r\n                    } else {\r\n                        return '완료';\r\n                    }\r\n                })()}\r\n            </button>\r\n        </>\r\n    );\r\n}\r\n","import React, { useRef, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../renderer/store/hooks';\r\nimport { PASS_CURRENT_PASSWORD } from '../../../../renderer/_reducers/_slices/profileSlice';\r\nimport { API_URL } from '../../../../renderer/CONSTANT_URL';\r\n\r\nexport { CurrentPassword };\r\n\r\nfunction CurrentPassword() {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const userId = useAppSelector((state) => state.profileSlice.userId);\r\n    const inputElement = useRef<HTMLInputElement>(null);\r\n    const [value, setValue] = useState('');\r\n\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const target = event.target as HTMLInputElement;\r\n\r\n        setValue(target.value);\r\n    };\r\n\r\n    const handleClick = async () => {\r\n        const res = await fetch(`${API_URL}/users/check-password`, {\r\n            credentials: 'include',\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ password: value }),\r\n        });\r\n\r\n        const data = await res.json();\r\n\r\n        if (data.success) {\r\n            dispatch(PASS_CURRENT_PASSWORD(true));\r\n        } else {\r\n            dispatch(PASS_CURRENT_PASSWORD(false));\r\n            alert('틀린 비밀번호입니다.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={(event: React.FormEvent) => event.preventDefault()} className=\"form-current-password\">\r\n                <p className=\"txt-notice\">그린맵 계정의 현재 비밀번호를 확인해주세요.</p>\r\n                <label htmlFor=\"readOnlyUserId\" className=\"sr-only\">\r\n                    아이디\r\n                </label>\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"readOnlyUserId\"\r\n                    readOnly={true}\r\n                    defaultValue={userId}\r\n                    className=\"input-userid-in-profile\"\r\n                />\r\n                <label htmlFor=\"prevPassword\" className=\"sr-only\">\r\n                    현재 비밀번호\r\n                </label>\r\n                <input type=\"password\" id=\"prevPassword\" onChange={handleChange} ref={inputElement} value={value} />\r\n            </form>\r\n            <button type=\"button\" onClick={handleClick} className=\"styled-button thin\">\r\n                완료\r\n            </button>\r\n        </>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../renderer/store/hooks';\r\nimport {\r\n    PASS_CURRENT_PASSWORD,\r\n    PROFILE_PASSWORD_MODAL,\r\n    SET_USERID,\r\n} from '../../../../renderer/_reducers/_slices/profileSlice';\r\nimport { NewPassword } from './NewPassword';\r\nimport { CurrentPassword } from './CurrentPassword';\r\nimport imgClose from '/images/icon-plus.svg';\r\n\r\nexport { EditPasswordModal };\r\n\r\nfunction EditPasswordModal() {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const [show, setShow] = useState(false);\r\n    const profilePasswordModalOn = useAppSelector((state) => state.profileSlice.profilePasswordModalOn);\r\n    const passCurrentPassword = useAppSelector((state) => state.profileSlice.passCurrentPassword);\r\n\r\n    useEffect(() => {\r\n        if (profilePasswordModalOn === true) setShow(true);\r\n        else setShow(false);\r\n    }, [profilePasswordModalOn]);\r\n\r\n    function handleClose() {\r\n        const app = document.querySelector('.app');\r\n        app?.classList.remove('modal-mode');\r\n\r\n        dispatch(PROFILE_PASSWORD_MODAL(false));\r\n        dispatch(PASS_CURRENT_PASSWORD(false));\r\n        dispatch(SET_USERID(''));\r\n    }\r\n\r\n    return (\r\n        <article className={`modal-group-item ${show ? 'on' : ''}`}>\r\n            <h4>비밀번호 재설정</h4>\r\n            {passCurrentPassword ? <NewPassword /> : <CurrentPassword />}\r\n            <button type=\"button\" className=\"button-close\" onClick={handleClose}>\r\n                <img src={imgClose} alt=\"X 아이콘\" className=\"img-close\" />\r\n            </button>\r\n        </article>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppSelector } from '../../../../renderer/store/hooks';\r\nimport { API_URL } from '../../../../renderer/CONSTANT_URL';\r\n\r\nexport { EditDeleteNotifyModal };\r\n\r\nfunction EditDeleteNotifyModal() {\r\n    const [show, setShow] = useState(false);\r\n    const editDeleteNotifyModalOn = useAppSelector((state) => state.reviewSlice.editDeleteNotifyModalOn);\r\n    const sameUserOwner = useAppSelector((state) => state.reviewSlice.sameUserOwner);\r\n\r\n    useEffect(() => {\r\n        if (editDeleteNotifyModalOn === true) setShow(true);\r\n        else setShow(false);\r\n    }, [editDeleteNotifyModalOn]);\r\n\r\n    return (\r\n        <article className={`modal-edit-delete-notify ${show ? 'on' : ''}`}>\r\n            <h4 className=\"sr-only\">수정, 삭제, 신고용 모달</h4>\r\n            <ul>\r\n                {sameUserOwner ? (\r\n                    <>\r\n                        <EDIT />\r\n                        <DELETE />\r\n                    </>\r\n                ) : (\r\n                    <li> 🚨 신고하기</li>\r\n                )}\r\n            </ul>\r\n        </article>\r\n    );\r\n}\r\n\r\nfunction EDIT() {\r\n    const reviewId = useAppSelector((state) => state.reviewSlice.reviewId);\r\n    const restaurantId = useAppSelector((state) => state.reviewSlice.restaurantId);\r\n\r\n    function handleClick() {\r\n        window.location.href = `/search/${restaurantId}/reviews/${reviewId}/edit`;\r\n    }\r\n\r\n    return <li onClick={handleClick}>🩹 수정하기</li>;\r\n}\r\n\r\nfunction DELETE() {\r\n    const reviewId = useAppSelector((state) => state.reviewSlice.reviewId);\r\n    const restaurantId = useAppSelector((state) => state.reviewSlice.restaurantId);\r\n\r\n    async function handleClick() {\r\n        try {\r\n            const res = await fetch(`${API_URL}/reviews/${reviewId}`, {\r\n                credentials: 'include',\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ restaurantId: restaurantId }),\r\n            });\r\n            const data = await res.json();\r\n            if (data.success) {\r\n                window.location.href = `/search/${restaurantId}`;\r\n            } else {\r\n                alert('다시 시도해주세요.');\r\n            }\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n    return <li onClick={handleClick}>🗑️ 삭제하기</li>;\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../renderer/store/hooks';\r\nimport {\r\n    PROFILE_IMAGE_MODAL,\r\n    PROFILE_NICKNAME_MODAL,\r\n    SET_NICKNAME,\r\n    EDIT_NICKNAME,\r\n    PROFILE_PASSWORD_MODAL,\r\n    PASS_CURRENT_PASSWORD,\r\n    SET_USERID,\r\n} from '../../../renderer/_reducers/_slices/profileSlice';\r\nimport { EditProfileImageModal } from './EditProfileImageModal/EditProfileImageModal';\r\nimport { EditNickNameModal } from './EditNickNameModal/EditNickNameModal';\r\nimport { EditPasswordModal } from './EditPasswordModal/EditPasswordModal';\r\nimport { EditDeleteNotifyModal } from './EditDeleteNotifyModal/EditDeleteNotifyModal';\r\nimport {\r\n    EDIT_DELETE_NOTIFY_MODAL,\r\n    SAME_USER_OWNER,\r\n    SET_RESTAURANT_ID,\r\n    SET_REVIEW_ID,\r\n} from '../../../renderer/_reducers/_slices/reviewSlice';\r\n\r\nexport { ModalGroup };\r\n\r\nfunction ModalGroup() {\r\n    const on = useAppSelector(\r\n        (state) =>\r\n            state.profileSlice.profileImageModalOn ||\r\n            state.profileSlice.profileNickNameModalOn ||\r\n            state.profileSlice.profilePasswordModalOn ||\r\n            state.reviewSlice.editDeleteNotifyModalOn // 리뷰 슬라이스 재사용\r\n    );\r\n    const [show, setShow] = useState(false);\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        if (on === true) setShow(true);\r\n        else setShow(false);\r\n    }, [on]);\r\n\r\n    useEffect(() => {\r\n        if (show) {\r\n            document.addEventListener('click', handleClose);\r\n        }\r\n\r\n        return () => {\r\n            document.removeEventListener('click', handleClose);\r\n        };\r\n    }, [show]);\r\n\r\n    function handleClose(event: MouseEvent) {\r\n        if ((event.target as HTMLElement).className === 'app modal-mode') {\r\n            const app = document.querySelector('.app');\r\n            app?.classList.remove('modal-mode');\r\n\r\n            dispatch(PROFILE_IMAGE_MODAL(false));\r\n\r\n            dispatch(PROFILE_NICKNAME_MODAL(false));\r\n            dispatch(SET_NICKNAME(''));\r\n            dispatch(EDIT_NICKNAME(''));\r\n\r\n            dispatch(PROFILE_PASSWORD_MODAL(false));\r\n            dispatch(PASS_CURRENT_PASSWORD(false));\r\n            dispatch(SET_USERID(''));\r\n\r\n            dispatch(EDIT_DELETE_NOTIFY_MODAL(false)); // 리뷰 슬라이스 재사용\r\n            dispatch(SAME_USER_OWNER(false));\r\n            dispatch(SET_REVIEW_ID(''));\r\n            dispatch(SET_RESTAURANT_ID(''));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={`modal-group ${show ? 'on' : ''}`}>\r\n            <EditProfileImageModal />\r\n            <EditNickNameModal />\r\n            <EditPasswordModal />\r\n            <EditDeleteNotifyModal />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { TopBar } from '../../components/topBar/topBar';\r\nimport { NavBar } from '../../components/navBar';\r\nimport { ModalGroup } from './ModalGroup/ModalGroup';\r\nimport { useCheckLoginStatus } from '../../renderer/_hooks/useCheckLoginStatus';\r\nimport { API_URL } from '../../renderer/CONSTANT_URL';\r\nimport LoadingMain from '../../components/Loading/LoadingMain';\r\nimport type { PageContext } from '../../renderer/types';\r\nimport type { Review } from '../../server/models/Review';\r\nimport type { UserInfo } from '../../server/models/User';\r\n\r\nexport const documentProps = {\r\n    title: '내 정보 | Green Maps',\r\n    description: '채식 식당 지도 서비스 마이 페이지',\r\n};\r\n\r\nconst MyMain = React.lazy(() => import('./MyMain'));\r\n\r\nexport function Page() {\r\n    const [isLoggedIn, info] = useCheckLoginStatus();\r\n    const [reviews, setReviews] = useState<Review[]>([]);\r\n\r\n    useEffect(() => {\r\n        try {\r\n            if (info !== null) {\r\n                getMyReviews(info).then((data) => {\r\n                    if (data.success) {\r\n                        setReviews(data.reviews);\r\n                    } else {\r\n                        setReviews([]);\r\n                    }\r\n                });\r\n            }\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    }, [info]);\r\n\r\n    async function getMyReviews(info: UserInfo) {\r\n        const res = await fetch(`${API_URL}/reviews/my?owner=${info.userId}`);\r\n        const data = (await res.json()) as { success: boolean; reviews: Review[] };\r\n\r\n        return data;\r\n    }\r\n\r\n    return isLoggedIn && info ? (\r\n        <>\r\n            <TopBar title=\"내 정보\" />\r\n            <React.Suspense fallback={<LoadingMain />}>\r\n                <MyMain userInfo={info} reviews={reviews} />\r\n            </React.Suspense>\r\n            <NavBar isLoggedIn={isLoggedIn} />\r\n            <ModalGroup />\r\n        </>\r\n    ) : (\r\n        <LoadingMain />\r\n    );\r\n}\r\n"],"names":["res","data","info"],"mappings":"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"}