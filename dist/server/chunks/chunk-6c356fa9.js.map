{"version":3,"file":"chunk-6c356fa9.js","sources":["../../../pages/my-lists/bookmark/BookmarkListMain/BookmarkList/formatDistance.ts","../../../pages/my-lists/bookmark/BookmarkListMain/BookmarkList/Distance.tsx"],"sourcesContent":["export default function formatDistance(distance: number): string {\r\n    if (distance < 1000) {\r\n        let arrDistance = distance.toLocaleString('ko-KR').split('');\r\n        arrDistance.pop();\r\n        return arrDistance.join('') + 'm';\r\n    } else {\r\n        // (distance / 1000).toFixed(2) + 'km'\r\n        let arrDistance = (distance / 1000).toLocaleString('ko-KR').split('');\r\n        arrDistance.pop();\r\n        return arrDistance.join('') + 'km';\r\n    }\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport formatDistance from './formatDistance';\r\nimport { API_URL } from '../../../../../renderer/CONSTANT_URL';\r\n\r\nexport { Distance };\r\n\r\nfunction Distance({ location }: { location: number[] }) {\r\n    const [currentLocation, setCurrentLocation] = useState<number[] | null>(null);\r\n    const [distance, setDistance] = useState<number>(0);\r\n\r\n    useEffect(() => {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition((position) => {\r\n                const lat = position.coords.latitude;\r\n                const lng = position.coords.longitude;\r\n\r\n                setCurrentLocation([lng, lat]);\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    // 현재 위치가 결정되면 거리 구하기\r\n    useEffect(() => {\r\n        if (currentLocation !== null && location.every((v) => v !== 0)) {\r\n            getDistance().then((result) => {\r\n                setDistance(result.distance);\r\n            });\r\n        }\r\n        async function getDistance() {\r\n            const res = await fetch(`${API_URL}/map/distance`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ currentLocation: currentLocation, targetLocation: location }),\r\n            });\r\n\r\n            const data = await res.json();\r\n\r\n            return data;\r\n        }\r\n    }, [currentLocation, location]);\r\n\r\n    return <span className=\"txt-distance\">{formatDistance(distance)}</span>;\r\n}\r\n"],"names":[],"mappings":";;;AAAA,SAAwB,eAAe,UAA0B;AAC7D,MAAI,WAAW,KAAM;AACjB,QAAI,cAAc,SAAS,eAAe,OAAO,EAAE,MAAM,EAAE;AAC3D,gBAAY,IAAI;AACT,WAAA,YAAY,KAAK,EAAE,IAAI;AAAA,EAAA,OAC3B;AAEH,QAAI,eAAe,WAAW,KAAM,eAAe,OAAO,EAAE,MAAM,EAAE;AACpE,gBAAY,IAAI;AACT,WAAA,YAAY,KAAK,EAAE,IAAI;AAAA,EAClC;AACJ;ACLA,SAAS,SAAS,EAAE,YAAoC;AACpD,QAAM,CAAC,iBAAiB,kBAAkB,IAAI,SAA0B,IAAI;AAC5E,QAAM,CAAC,UAAU,WAAW,IAAI,SAAiB,CAAC;AAElD,YAAU,MAAM;AACZ,QAAI,UAAU,aAAa;AACb,gBAAA,YAAY,mBAAmB,CAAC,aAAa;AAC7C,cAAA,MAAM,SAAS,OAAO;AACtB,cAAA,MAAM,SAAS,OAAO;AAET,2BAAA,CAAC,KAAK,GAAG,CAAC;AAAA,MAAA,CAChC;AAAA,IACL;AAAA,EACJ,GAAG,CAAE,CAAA;AAGL,YAAU,MAAM;AACR,QAAA,oBAAoB,QAAQ,SAAS,MAAM,CAAC,MAAM,MAAM,CAAC,GAAG;AAChD,kBAAA,EAAE,KAAK,CAAC,WAAW;AAC3B,oBAAY,OAAO,QAAQ;AAAA,MAAA,CAC9B;AAAA,IACL;AACA,mBAAe,cAAc;AACzB,YAAM,MAAM,MAAM,MAAM,GAAG,wBAAwB;AAAA,QAC/C,QAAQ;AAAA,QACR,SAAS;AAAA,UACL,gBAAgB;AAAA,QACpB;AAAA,QACA,MAAM,KAAK,UAAU,EAAE,iBAAkC,gBAAgB,UAAU;AAAA,MAAA,CACtF;AAEK,YAAA,OAAO,MAAM,IAAI;AAEhB,aAAA;AAAA,IACX;AAAA,EAAA,GACD,CAAC,iBAAiB,QAAQ,CAAC;AAE9B,6BAAQ,QAAK,EAAA,WAAU,gBAAgB,UAAA,eAAe,QAAQ,EAAE,CAAA;AACpE;"}