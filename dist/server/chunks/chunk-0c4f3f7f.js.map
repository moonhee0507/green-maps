{"version":3,"file":"chunk-0c4f3f7f.js","sources":["../../../pages/search/restaurant/reviews/create/ReviewForm/component/PictureSection.tsx","../../../pages/search/restaurant/reviews/create/ReviewForm/component/WriteSection.tsx","../../../components/image/uploadImageToStorage.ts","../../../pages/search/restaurant/reviews/create/ReviewForm/component/SubmitButton.tsx","../../../pages/search/restaurant/reviews/create/ReviewForm/ReviewForm.tsx"],"sourcesContent":["import React, { ChangeEvent, useEffect, useRef, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport randomizeFileName from '../../../../../../../components/image/randomizeFileName';\r\nimport { IMG_URL } from '../../../../../../../renderer/CONSTANT_URL';\r\nimport type { PhotoInReview } from '../../../../../../../server/models/Review';\r\n\r\n/**\r\n * @SelectedImage\r\n * [0]: ObjectURL\r\n * [1]: file.type\r\n */\r\nexport type SelectedImage = [string, string];\r\nexport type RandomFileName = string;\r\n\r\nexport function PictureSection({ photos }: { photos?: PhotoInReview }) {\r\n    const fileInput = useRef<HTMLInputElement>(null);\r\n\r\n    const handleClick = () => {\r\n        if (images.length > 0) {\r\n            setImages([]);\r\n        } else {\r\n            fileInput.current?.click();\r\n        }\r\n    };\r\n\r\n    const [images, setImages] = useState<Array<SelectedImage>>(() => {\r\n        const inEditPage = window.location.pathname.includes('/edit');\r\n\r\n        if (inEditPage && photos && photos.length > 0) {\r\n            const temp: Array<SelectedImage> = [];\r\n\r\n            for (let photo of photos) {\r\n                temp.push([`${IMG_URL}/${photo.src}`, photo.src.split('.').at(-1) as string]);\r\n            }\r\n\r\n            return temp;\r\n        } else {\r\n            return [];\r\n        }\r\n    });\r\n\r\n    const handleFileInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const files: any = event.target.files;\r\n\r\n        if (event.target.files !== null) {\r\n            const temp: Array<SelectedImage> = [];\r\n            for (let file of files) {\r\n                temp.push([URL.createObjectURL(file), file.type]);\r\n            }\r\n            setImages(temp);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * store에는 직렬화 불가능한 File 객체가 저장되지 않기 때문에\r\n     * ObjectURL로 저장\r\n     */\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (images) {\r\n            const temp: Array<RandomFileName> = [];\r\n            for (let image of images) {\r\n                const fileName = randomizeFileName() + '.' + image[1]?.replace('image/', '');\r\n                temp.push(fileName);\r\n            }\r\n\r\n            dispatch({ type: 'reviewSlice/IMAGE_STATE', FILE_INFO: images, RANDOM_NAME: temp });\r\n        }\r\n    }, [images]);\r\n\r\n    return (\r\n        <fieldset className=\"section-add-picture\">\r\n            <legend className=\"sr-only\">사진 첨부</legend>\r\n            <div className=\"container-notice\">\r\n                <em>음식 사진이나 메뉴판 사진을 첨부해주세요. (최대 3장)</em>\r\n            </div>\r\n            <ul className=\"container-picture\">\r\n                <li className={`list-add-picture ${images.length > 0 ? 'reset' : ''}`} onClick={handleClick}>\r\n                    <label className=\"sr-only\" htmlFor=\"fileInput\"></label>\r\n                    <input\r\n                        type=\"file\"\r\n                        id=\"fileInput\"\r\n                        accept=\"image/*\"\r\n                        onChange={handleFileInputChange}\r\n                        style={{ display: 'none' }}\r\n                        multiple\r\n                        ref={fileInput}\r\n                    />\r\n                </li>\r\n                <li className=\"list-picture\" area-label=\"추가한 이미지 리스트\">\r\n                    {images.length > 0 ? <img src={images[0][0]} alt=\"첫번째 이미지\" /> : null}\r\n                </li>\r\n                <li className=\"list-picture\" area-label=\"추가한 이미지 리스트\">\r\n                    {images.length > 1 ? <img src={images[1][0]} alt=\"두번째 이미지\" /> : null}\r\n                </li>\r\n                <li className=\"list-picture\" area-label=\"추가한 이미지 리스트\">\r\n                    {images.length > 2 ? <img src={images[2][0]} alt=\"세번째 이미지\" /> : null}\r\n                </li>\r\n            </ul>\r\n        </fieldset>\r\n    );\r\n}\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nexport { WriteSection };\r\n\r\nfunction WriteSection({ title, content }: { title: string; content?: string }) {\r\n    const dispatch = useDispatch();\r\n\r\n    const [value, setValue] = useState<string>(() => {\r\n        const editPage = window.location.pathname.includes('/edit');\r\n\r\n        if (editPage) {\r\n            dispatch({\r\n                type: 'reviewSlice/TXT_REVIEW_STATE',\r\n                CONTENT: content,\r\n            });\r\n\r\n            return content as string;\r\n        } else {\r\n            return '';\r\n        }\r\n    });\r\n\r\n    function handleChange(event: ChangeEvent<{ value: string }>): void {\r\n        setValue(event.currentTarget.value);\r\n\r\n        dispatch({\r\n            type: 'reviewSlice/TXT_REVIEW_STATE',\r\n            CONTENT: event.currentTarget.value,\r\n        });\r\n    }\r\n\r\n    return (\r\n        <fieldset className=\"section-write-review\">\r\n            <legend className=\"sr-only\">글 작성</legend>\r\n\r\n            <label className=\"sr-only\" htmlFor=\"restaurantInput\">\r\n                식당이름\r\n            </label>\r\n            <input type=\"text\" value={title} id=\"restaurantInput\" readOnly />\r\n\r\n            <label htmlFor=\"txtReview\" className=\"sr-only\">\r\n                리뷰 작성란\r\n            </label>\r\n            <textarea\r\n                id=\"txtReview\"\r\n                placeholder={'채식에 대한 이야기를 자유롭게 공유해주세요.\\n(10자이상 100자 이내)'}\r\n                autoComplete=\"on\"\r\n                maxLength={100}\r\n                minLength={10}\r\n                required\r\n                onChange={handleChange}\r\n                value={value}\r\n            />\r\n        </fieldset>\r\n    );\r\n}\r\n","import {\r\n    RandomFileName,\r\n    SelectedImage,\r\n} from '../../pages/search/restaurant/reviews/create/ReviewForm/component/PictureSection';\r\n\r\n/**\r\n * @SelectedImage\r\n * [0]: ObjectURL\r\n * [1]: file.type\r\n */\r\n\r\nexport default async function uploadImageToStorage(\r\n    selectedImages: Array<SelectedImage>,\r\n    randomFileNames: Array<RandomFileName>\r\n) {\r\n    if (selectedImages.length === randomFileNames.length) {\r\n        for (let i = 0; i < selectedImages.length; i++) {\r\n            /**\r\n             * 스토어에 저장되어 있는 ObjectURL을 File 객체로 변환\r\n             */\r\n            const file = await fetch(selectedImages[i][0])\r\n                .then((res) => res.blob())\r\n                .then((blob) => new File([blob], `${randomFileNames[i]}`, { type: `${blob.type}` }));\r\n\r\n            const body = {\r\n                name: `client/${randomFileNames[i]}`,\r\n                type: file.type,\r\n            };\r\n\r\n            try {\r\n                // signed url 얻어오기\r\n                const resUrl = await fetch(\r\n                    `${\r\n                        process.env.NODE_ENV === 'production'\r\n                            ? 'https://api.green-maps.site/v1'\r\n                            : 'https://localhost:5000/v1'\r\n                    }/images/client`,\r\n                    {\r\n                        credentials: 'include',\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                        },\r\n                        body: JSON.stringify(body),\r\n                    }\r\n                );\r\n\r\n                /**\r\n                 * @data {success: true, signedUrl: 'https://버킷네임.s3.지역.amazon…c0be46ae2&X-Amz-SignedHeaders=host&x-id=PutObject'}\r\n                 */\r\n                const data = await resUrl.json();\r\n                const signedUrl = data.signedUrl;\r\n\r\n                // 가져온 url로 PUT 요청 보내기\r\n                /**\r\n                 * Response 객체{ body: (...), bodyUser: boolean, headers: { ok: boolean, redirected: boolean, status: number, url: signedUrl } }\r\n                 */\r\n                await fetch(signedUrl, {\r\n                    method: 'PUT',\r\n                    headers: {\r\n                        'Content-Type': file.type,\r\n                    },\r\n                    body: file,\r\n                });\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        }\r\n    } else throw Error('이미지 네이밍 처리에 오류가 발생했습니다.');\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppSelector } from '../../../../../../../renderer/store/hooks';\r\nimport { RandomFileName, SelectedImage } from './PictureSection';\r\nimport { API_URL } from '../../../../../../../renderer/CONSTANT_URL';\r\nimport { PhotoInReview } from '../../../../../../../server/models/Review';\r\nimport store from '../../../../../../../renderer/store';\r\nimport uploadImageToStorage from '../../../../../../../components/image/uploadImageToStorage';\r\nimport imgLoading from '/images/spinner.webp';\r\nimport type { UserInfo } from '../../../../../../../server/models/User';\r\n\r\ntype SelectedImages = Array<SelectedImage>;\r\ntype RandomFileNames = Array<RandomFileName>;\r\n\r\nexport { SubmitButton };\r\n\r\nfunction SubmitButton({\r\n    restaurantId,\r\n    reviewId,\r\n    userInfo,\r\n}: {\r\n    restaurantId: string;\r\n    reviewId?: string;\r\n    userInfo: UserInfo | null;\r\n}) {\r\n    const [editPage] = useState(window.location.pathname.includes('/edit'));\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const app = document.querySelector('.app');\r\n        const LoadingElement = () => {\r\n            const imgElement = document.createElement('img');\r\n\r\n            imgElement.src = imgLoading;\r\n            imgElement.alt = '좌표 생성 로딩';\r\n            imgElement.style.width = '50px';\r\n            imgElement.style.position = 'absolute';\r\n            imgElement.style.top = '50%';\r\n            imgElement.style.left = '50%';\r\n            imgElement.style.transform = 'translate(-50%, -50%)';\r\n            imgElement.id = '__LOADING__';\r\n\r\n            return imgElement;\r\n        };\r\n\r\n        if (isLoading) {\r\n            if (app !== null) {\r\n                app.appendChild(LoadingElement());\r\n            }\r\n        } else {\r\n            if (app !== null) {\r\n                const LoadingElement = document.getElementById('__LOADING__');\r\n                if (LoadingElement) {\r\n                    app.removeChild(LoadingElement);\r\n                }\r\n            }\r\n        }\r\n    }, [isLoading]);\r\n\r\n    const content = useAppSelector((state) => state.reviewSlice.CONTENT);\r\n    const randomFileNames: RandomFileNames = useAppSelector((state) => state.reviewSlice.image.RANDOM_NAME);\r\n\r\n    async function handleSubmit() {\r\n        try {\r\n            setIsLoading(true);\r\n\r\n            let photo: PhotoInReview = [];\r\n\r\n            const selectedImages: SelectedImages = store.getState().reviewSlice.image.FILE_INFO;\r\n\r\n            if (selectedImages.length > 0) {\r\n                // 새로운 이미지로 바꾸는 경우\r\n                if (!selectedImages[0][0].includes('amazon')) {\r\n                    await uploadImageToStorage(selectedImages, randomFileNames);\r\n\r\n                    const temp = [];\r\n                    for (let i = 0; i < selectedImages.length; i++) {\r\n                        temp.push({ src: `client/${randomFileNames[i]}`, pick: true });\r\n                    }\r\n\r\n                    photo = temp;\r\n                    // 이미지 교체 안하는 경우\r\n                } else if (selectedImages[0][0].includes('amazon')) {\r\n                    const temp = [];\r\n                    for (let selectedImage of selectedImages) {\r\n                        temp.push({ src: 'client/' + selectedImage[0].split('client/').at(-1), pick: true });\r\n                    }\r\n\r\n                    photo = temp;\r\n                }\r\n            }\r\n\r\n            let body;\r\n\r\n            if (!editPage) {\r\n                body = {\r\n                    owner: userInfo ? userInfo.userId : '',\r\n                    restaurant: restaurantId,\r\n                    photo: photo,\r\n                    content: content,\r\n                };\r\n            } else {\r\n                body = {\r\n                    restaurant: restaurantId,\r\n                    photo: photo,\r\n                    content: content,\r\n                };\r\n            }\r\n\r\n            try {\r\n                const res = await fetch(`${API_URL}/reviews/${editPage ? reviewId + '/edit' : ''}`, {\r\n                    credentials: 'include',\r\n                    method: editPage ? 'PATCH' : 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify(body),\r\n                });\r\n\r\n                const data = await res.json();\r\n\r\n                if (data.success === true) {\r\n                    alert('리뷰가 등록되었습니다.');\r\n                } else {\r\n                    alert('리뷰 등록에 실패했습니다.\\n다시 시도해주세요.');\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n            } finally {\r\n                window.history.back();\r\n            }\r\n        } catch (err) {\r\n            console.error('handleSubmit Error');\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <button type=\"button\" onClick={handleSubmit} className=\"styled-button review\">\r\n                {editPage ? '수정 완료' : '작성 완료'}\r\n            </button>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { PictureSection } from './component/PictureSection';\r\nimport { WriteSection } from './component/WriteSection';\r\nimport { SubmitButton } from './component/SubmitButton';\r\nimport type { PhotoInReview } from '../../../../../../server/models/Review';\r\nimport type { UserInfo } from '../../../../../../server/models/User';\r\n\r\nexport { ReviewForm };\r\n\r\nfunction ReviewForm({\r\n    restaurantId,\r\n    reviewId,\r\n    title,\r\n    photos,\r\n    content,\r\n    userInfo,\r\n}: {\r\n    restaurantId: string;\r\n    reviewId?: string;\r\n    title: string;\r\n    photos?: PhotoInReview;\r\n    content?: string;\r\n    userInfo: UserInfo | null;\r\n}) {\r\n    return (\r\n        <main className=\"wrapper-review\">\r\n            <form>\r\n                <PictureSection photos={photos} />\r\n                <WriteSection title={title} content={content} />\r\n                <SubmitButton restaurantId={restaurantId} reviewId={reviewId} userInfo={userInfo} />\r\n            </form>\r\n        </main>\r\n    );\r\n}\r\n"],"names":["LoadingElement"],"mappings":"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"}