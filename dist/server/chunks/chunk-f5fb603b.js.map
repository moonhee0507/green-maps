{"version":3,"file":"chunk-f5fb603b.js","sources":["../../../pages/community/component/ButtonGroup/ButtonGroup.tsx","../../../pages/community/component/CommunityDetail/CommunityDetail.tsx","../../../pages/community/component/PostSection/NoticePostOnly.tsx","../../../pages/community/component/PostSection/PostListItem.tsx","../../../pages/community/component/PostSection/PostList.tsx","../../../pages/community/component/PostSection/PostSection.tsx","../../../pages/community/Community.tsx","../../../pages/community/CommunityMain.tsx"],"sourcesContent":["import React from 'react';\r\n\r\nexport { ButtonGroup };\r\n\r\nfunction ButtonGroup({ isLoggedIn }: { isLoggedIn: boolean }) {\r\n    function goToWrite() {\r\n        if (isLoggedIn) {\r\n            window.location.href = `/community/create`;\r\n        } else {\r\n            if (confirm('로그인이 필요한 서비스입니다.\\n로그인 하시겠습니까?')) {\r\n                window.location.href = `/login`;\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <button type=\"button\" className=\"link-create\" onClick={goToWrite}>\r\n            글쓰기\r\n        </button>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { SubjectBox } from './SubjectBox';\r\nimport { useSelector } from 'react-redux';\r\nimport { API_URL } from '../../../../renderer/CONSTANT_URL';\r\nimport type { Post } from '../../../../server/models/Post';\r\nimport type { RootState } from '../../../../renderer/store';\r\n\r\nexport { CommunityDetail };\r\n\r\nfunction CommunityDetail(props: { posts: Array<Post> }) {\r\n    const total = useSelector((state: RootState) => state.postSlice.post.TOTAL);\r\n    const subject = useSelector((state: RootState) => state.postSlice.SUBJECT);\r\n\r\n    const [todayCount, setTodayCount] = useState<number>(0);\r\n\r\n    useEffect(() => {\r\n        getTodayCount(subject).then((res: { todayCount: number }) => setTodayCount(res.todayCount));\r\n\r\n        async function getTodayCount(subjectName: string) {\r\n            const encodeSubjectName = encodeURIComponent(subjectName);\r\n            const res = await fetch(`${API_URL}/today/${encodeSubjectName}`, {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            });\r\n            const count = await res.json();\r\n            return count;\r\n        }\r\n    }, [props.posts]);\r\n\r\n    return (\r\n        <div className=\"container-newpost-selectbox\">\r\n            <p className=\"txt-postinfo\">\r\n                새글 <span>{todayCount}</span>/{total}\r\n            </p>\r\n            <SubjectBox />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { API_URL } from '../../../../renderer/CONSTANT_URL';\r\nimport type { Post } from '../../../../server/models/Post';\r\n\r\nexport { NoticePostOnly };\r\n\r\nfunction NoticePostOnly() {\r\n    const [notices, setNotices] = useState<Post[] | null>(null);\r\n\r\n    const ulElement = useRef<HTMLUListElement>(null);\r\n\r\n    useEffect(() => {\r\n        getNotice().then((data) => {\r\n            if (data.total >= 1) {\r\n                setNotices(data.lists);\r\n            } else {\r\n                setNotices(null);\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    async function getNotice() {\r\n        const subjectName = '공지사항';\r\n\r\n        const res = await fetch(`${API_URL}/subjects/${encodeURIComponent(subjectName)}`, {\r\n            headers: {\r\n                'Cache-Control': 'max-age=31536000',\r\n            },\r\n        });\r\n        const data = await res.json();\r\n\r\n        return data;\r\n    }\r\n\r\n    return (\r\n        <article className=\"article-notice\">\r\n            <h3 className=\"sr-only\">공지사항</h3>\r\n            {notices !== null ? (\r\n                <ul className=\"ul-notice\" ref={ulElement}>\r\n                    {notices.map((notice, index) => {\r\n                        return <NoticeListItem key={Math.random()} posts={notice} />;\r\n                    })}\r\n                </ul>\r\n            ) : null}\r\n        </article>\r\n    );\r\n}\r\n\r\nfunction NoticeListItem({ posts }: { posts: Post }) {\r\n    const { _id, title, registeredAt, updatedAt } = posts;\r\n\r\n    // 1줄 말줄임 처리하기\r\n    return (\r\n        <li className=\"li-notice\">\r\n            <a href={`/community/${_id}`}>\r\n                <p className=\"txt-title\">\r\n                    <span>[공지사항] </span>\r\n                    <em>{title}</em>\r\n                </p>\r\n            </a>\r\n        </li>\r\n    );\r\n}\r\n","import React, { ForwardedRef, forwardRef } from 'react';\r\nimport { Title } from './component/Title';\r\nimport { PreviewText } from './component/PreviewText';\r\nimport { PostItemDetail } from './component/PostItemDetail';\r\nimport { Subject } from './component/Subject';\r\nimport type { Post } from '../../../../server/models/Post';\r\n\r\nexport default forwardRef(PostListItem);\r\n\r\nfunction PostListItem(props: { postInfo: Post }, ref: ForwardedRef<HTMLLIElement>) {\r\n    const { _id, subject, owner, title, content, photo, like, registeredAt, comments } = props.postInfo;\r\n    const removeTagContent = removeUnnecessaryString(content);\r\n    const imageSize = '80px';\r\n\r\n    return (\r\n        <li ref={ref}>\r\n            <a\r\n                href={`/community/${_id}`}\r\n                style={{\r\n                    width: '100%',\r\n                    display: 'flex',\r\n                    padding: '20px',\r\n                }}\r\n            >\r\n                <dl\r\n                    style={{\r\n                        width: `calc(100% - ${photo && photo.length > 0 ? imageSize : '0px'})`,\r\n                    }}\r\n                >\r\n                    <Subject subject={subject} />\r\n                    <Title title={title} />\r\n                    <PreviewText content={removeTagContent} />\r\n                    <PostItemDetail owner={owner} like={like} registeredAt={registeredAt} comments={comments} />\r\n                </dl>\r\n                {photo && photo.length > 0 ? (\r\n                    <dd>\r\n                        <img\r\n                            src={photo[0].src}\r\n                            alt=\"\"\r\n                            style={{\r\n                                width: imageSize,\r\n                                height: imageSize,\r\n                                objectFit: 'cover',\r\n                            }}\r\n                        />\r\n                    </dd>\r\n                ) : null}\r\n            </a>\r\n        </li>\r\n    );\r\n}\r\n\r\n/**\r\n * Tag와 &nbsp;같은 특수문자 제거 함수\r\n */\r\nfunction removeUnnecessaryString(html: string): string {\r\n    return html.replaceAll(/<[^>]*>/g, '').replaceAll(/&[a-zA-Z0-9]*;/g, '');\r\n}\r\n","import React, { useEffect, useRef } from 'react';\r\nimport PostListItem from './PostListItem';\r\nimport useIntersectionObserver from '../../useIntersectionObserver';\r\nimport { useDispatch, useStore } from 'react-redux';\r\nimport type { Post } from '../../../../server/models/Post';\r\n\r\nexport { PostList };\r\n\r\nfunction PostList(props: { posts: Array<Post>; limit: number }) {\r\n    const { posts, limit } = props;\r\n    const target = useRef<HTMLLIElement>(null);\r\n\r\n    const store = useStore<any>();\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [observe, unobserve] = useIntersectionObserver(() => {\r\n        // 현재 페이지가 마지막 페이지가 아닐 때만 페이지 증가\r\n        const lastPage = Math.ceil(store.getState().postSlice.post.TOTAL / limit);\r\n        const currentPage = store.getState().postSlice.post.CURRENT_PAGE;\r\n\r\n        if (currentPage < lastPage) {\r\n            dispatch({\r\n                type: 'postSlice/POST_IN_PAGE',\r\n                TOTAL: store.getState().postSlice.post.TOTAL,\r\n                CURRENT_PAGE: store.getState().postSlice.post.CURRENT_PAGE + 1,\r\n            });\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        const lastPage = Math.ceil(store.getState().postSlice.post.TOTAL / limit);\r\n        const currentPage = store.getState().postSlice.post.CURRENT_PAGE;\r\n\r\n        if (currentPage === lastPage) {\r\n            unobserve(target.current);\r\n            // console.log(`currentPage가 ${currentPage}이고 lastPage가 ${lastPage}여서 감시 중단`);\r\n        } else if (currentPage < lastPage) {\r\n            observe(target.current);\r\n            // console.log(`currentPage가 ${currentPage}이고 lastPage가 ${lastPage}여서 감시 계속 =======`);\r\n        }\r\n    }, [observe, unobserve]);\r\n\r\n    return (\r\n        <ul className=\"wrapper-posts\">\r\n            {posts.map((post, i) => {\r\n                if (i === posts.length - 1) {\r\n                    return <PostListItem key={post._id} postInfo={post} ref={target} />;\r\n                } else return <PostListItem key={post._id} postInfo={post} />;\r\n            })}\r\n        </ul>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { NoticePostOnly } from './NoticePostOnly';\r\nimport { PostList } from './PostList';\r\nimport type { Post } from '../../../../server/models/Post';\r\n\r\nexport { PostSection };\r\n\r\nfunction PostSection(props: { posts: Array<Post>; limit: number }) {\r\n    const { posts, limit } = props;\r\n\r\n    return (\r\n        <section>\r\n            <h3 className=\"sr-only\">게시글 목록</h3>\r\n            <NoticePostOnly />\r\n            <PostList posts={posts} limit={limit} />\r\n        </section>\r\n    );\r\n}\r\n","import React, { useRef, useState } from 'react';\r\nimport { CommunityDetail } from './component/CommunityDetail/CommunityDetail.js';\r\nimport { PostSection } from './component/PostSection/PostSection.js';\r\nimport type { Post } from '../../server/models/Post.js';\r\n\r\nexport { Community };\r\n\r\nexport type PostProps = {\r\n    total: number;\r\n    countLimit?: number;\r\n    currentPage?: number;\r\n    lists: Array<Post>;\r\n};\r\n\r\nfunction Community({ posts, limit, isLoggedIn }: { posts: Array<Post>; limit: number; isLoggedIn: boolean }) {\r\n    const mainElement = useRef<HTMLElement>(null);\r\n    const [scroll, setScroll] = useState(false);\r\n\r\n    function clickGoUpButton() {\r\n        mainElement?.current?.scrollTo({ top: 0, left: 0, behavior: 'auto' });\r\n    }\r\n\r\n    function handleScroll() {\r\n        if (mainElement?.current?.scrollTop === 0) setScroll(false);\r\n        else setScroll(true);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <main className=\"main-community\" ref={mainElement} onScroll={handleScroll}>\r\n                <CommunityDetail posts={posts} />\r\n                <PostSection posts={posts} limit={limit} />\r\n            </main>\r\n            {scroll && (\r\n                <button id=\"buttonGoUp\" onClick={clickGoUpButton} type=\"button\">\r\n                    맨위로\r\n                </button>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { ButtonGroup } from './component/ButtonGroup/ButtonGroup';\r\nimport { Community } from './Community';\r\nimport type { Post } from '../../server/models/Post';\r\n\r\nexport default function CommunityMain({\r\n    isLoggedIn,\r\n    posts,\r\n    limit,\r\n}: {\r\n    isLoggedIn: boolean;\r\n    posts: Array<Post>;\r\n    limit: number;\r\n}) {\r\n    return (\r\n        <>\r\n            <ButtonGroup isLoggedIn={isLoggedIn} />\r\n            <Community posts={posts} limit={limit} isLoggedIn={isLoggedIn} />\r\n        </>\r\n    );\r\n}\r\n"],"names":["PostListItem"],"mappings":"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"}