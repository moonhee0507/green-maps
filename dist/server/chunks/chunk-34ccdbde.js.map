{"version":3,"file":"chunk-34ccdbde.js","sources":["../../../pages/community/create/component/Title.tsx","../../../pages/community/create/component/Content/toolbar.ts","../../../pages/community/create/component/Content/TextEditor.tsx","../../../pages/community/create/component/Content/Content.tsx","../../../pages/community/create/component/Create.tsx"],"sourcesContent":["import React, { ChangeEvent, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useAppSelector } from '../../../../renderer/store/hooks';\r\nimport type { Post } from '../../../../server/models/Post';\r\n\r\nexport { Title };\r\n\r\nfunction Title({ postInfo }: { postInfo?: Post | null }) {\r\n    const dispatch = useDispatch();\r\n\r\n    const title = useAppSelector((state) => state.postSlice.TITLE);\r\n\r\n    useEffect(() => {\r\n        if (postInfo !== null && postInfo !== undefined) {\r\n            dispatch({ type: 'postSlice/TITLE_STATE', TITLE: postInfo.title });\r\n        } else {\r\n            dispatch({ type: 'postSlice/TITLE_STATE', TITLE: '' });\r\n        }\r\n    }, [postInfo]);\r\n\r\n    function handleChange(event: ChangeEvent<HTMLInputElement>) {\r\n        dispatch({ type: 'postSlice/TITLE_STATE', TITLE: event.target.value });\r\n    }\r\n\r\n    return (\r\n        <label className=\"label-create-post-title\">\r\n            <span className=\"sr-only\">제목</span>\r\n            <input type=\"text\" placeholder=\"제목\" maxLength={30} onChange={handleChange} value={title} />\r\n        </label>\r\n    );\r\n}\r\n","const toolbar = {\r\n    options: ['inline', 'blockType', 'fontSize'],\r\n    inline: {\r\n        inDropdown: false,\r\n        options: ['bold', 'italic', 'underline', 'strikethrough', 'monospace'],\r\n    },\r\n    blockType: {\r\n        inDropdown: false,\r\n        options: ['Normal', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6'],\r\n    },\r\n    fontSize: {\r\n        options: [8, 9, 10, 11, 12, 14, 16, 18, 24, 30, 36, 48, 60, 72, 96],\r\n    },\r\n    image: {\r\n        urlEnabled: true,\r\n        uploadEnabled: true,\r\n        alignmentEnabled: true,\r\n        uploadCallback: undefined,\r\n        previewImage: true,\r\n        inputAccept: 'image/gif,image/jpeg,image/jpg,image/png,image/svg',\r\n        alt: { present: false, mandatory: false },\r\n        defaultSize: {\r\n            height: 'auto',\r\n            width: 'auto',\r\n        },\r\n    },\r\n};\r\n\r\nexport default toolbar;\r\n","import React, { useEffect, useState, Suspense } from 'react';\r\nimport * as draftJs from 'draft-js';\r\nconst { EditorState, convertToRaw, convertFromHTML, ContentState } = ((draftJs as any).default ??\r\n    draftJs) as typeof draftJs;\r\n\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\r\nimport draftToHtml from 'draftjs-to-html';\r\nimport toolbar from './toolbar';\r\nimport { useDispatch } from 'react-redux';\r\nimport type { Post } from '../../../../../server/models/Post';\r\n\r\nexport { TextEditor };\r\n\r\nfunction TextEditor({ postInfo }: { postInfo?: Post | null }) {\r\n    const dispatch = useDispatch();\r\n\r\n    const [isMounted, setIsMounted] = useState<boolean>(false);\r\n    const [Component, setComponent] = useState<React.ComponentType<any> | null>(null);\r\n    const [editorState, setEditorState] = useState<draftJs.EditorState>(EditorState.createEmpty());\r\n\r\n    useEffect(() => {\r\n        const loadComponent = async () => {\r\n            const module = await import('react-draft-wysiwyg');\r\n            setComponent(() => module.Editor);\r\n        };\r\n\r\n        loadComponent();\r\n        setIsMounted(true);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (postInfo !== null && postInfo !== undefined) {\r\n            /**\r\n             * @convertFromHTML HTML 문자열을 객체(2개의 키)로 반환. 하나는 ContentBlock 객체의 배열을 가지고, 다른 하나는 entityMap에 대한 참조를 갖는다\r\n             * @createFromBlockArray ContentBlock 객체의 배열에서 ContentState 생성.\r\n             */\r\n            dispatch({ type: 'postSlice/CONTENT_STATE', CONTENT: postInfo.content });\r\n            const blocksFromHTML = convertFromHTML(postInfo.content); // HTML을 배열로 만들고\r\n            const state = ContentState.createFromBlockArray(blocksFromHTML.contentBlocks, blocksFromHTML.entityMap); // 그 배열로 ContentState를 생성한다.\r\n            setEditorState(EditorState.createWithContent(state));\r\n        } else {\r\n            setEditorState(EditorState.createEmpty());\r\n        }\r\n    }, [isMounted, postInfo]);\r\n\r\n    const handleChange = (newEditorState: draftJs.EditorState) => {\r\n        if (isMounted) {\r\n            setEditorState(newEditorState);\r\n            dispatch({\r\n                type: 'postSlice/CONTENT_STATE',\r\n                CONTENT: draftToHtml(convertToRaw(newEditorState.getCurrentContent())),\r\n            });\r\n        }\r\n    };\r\n\r\n    if (!Component) {\r\n        return <Loading />;\r\n    }\r\n\r\n    return (\r\n        <Suspense fallback={<Loading />}>\r\n            <Component editorState={editorState} onEditorStateChange={handleChange} toolbar={toolbar} />\r\n        </Suspense>\r\n    );\r\n}\r\n\r\nfunction Loading() {\r\n    return <div>텍스트 에디터 로드 중</div>;\r\n}\r\n","import React from 'react';\r\nimport { TextEditor } from './TextEditor';\r\nimport type { Post } from '../../../../../server/models/Post';\r\n\r\nexport { Content };\r\n\r\nfunction Content({ postInfo }: { postInfo?: Post | null }) {\r\n    return (\r\n        <label className=\"label-create-post-content\">\r\n            <span className=\"sr-only\">내용</span>\r\n            <TextEditor postInfo={postInfo} />\r\n        </label>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { SubjectBox } from '../../component/CommunityDetail/SubjectBox';\r\nimport { Title } from './Title';\r\nimport { Content } from './Content/Content';\r\nimport type { Post } from '../../../../server/models/Post';\r\n\r\nexport { Create };\r\n\r\nfunction Create({ postInfo }: { postInfo?: Post | null }) {\r\n    return (\r\n        <main className=\"main-create-post\">\r\n            <form className=\"form-create-post\">\r\n                <SubjectBox postInfo={postInfo} />\r\n                <Title postInfo={postInfo} />\r\n                <Content postInfo={postInfo} />\r\n            </form>\r\n        </main>\r\n    );\r\n}\r\n"],"names":[],"mappings":"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"}