{"version":3,"file":"chunk-c696f9eb.js","sources":["../../../pages/search/ControlButton/ControlButton.tsx","../../../pages/search/KakaoMap.tsx","../../../components/button/BackCurrentLocation.tsx","../../../pages/search/ResultInRadius/CountMessage.tsx","../../../pages/search/ResultInRadius/ResultInRadius.tsx","../../../pages/search/MapView.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../renderer/store/hooks';\r\nimport {\r\n    CATEGORY_FILTER_MODAL,\r\n    CHANGE_RADIUS_MODAL,\r\n    CHANGE_REGION_MODAL,\r\n    SET_MAP_MODE,\r\n    SHOW_LIST_IN_REGION_MODAL,\r\n} from '../../../renderer/_reducers/_slices/mapSlice';\r\nimport appModalMode from '../../../components/modal/appModalMode';\r\n\r\nexport { ControlButton };\r\n\r\nfunction ControlButton() {\r\n    return (\r\n        <div className=\"wrapper-map-control-button\">\r\n            <div className=\"container-button-map-mode\">\r\n                <ChangeRadius />\r\n                <SelectRegion />\r\n            </div>\r\n            <div>\r\n                <CategoryFilter />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction CategoryFilter() {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const handleClick = () => {\r\n        initializeMapMode();\r\n        dispatch(CATEGORY_FILTER_MODAL(true));\r\n    };\r\n\r\n    function initializeMapMode() {\r\n        dispatch(CHANGE_RADIUS_MODAL(false));\r\n        dispatch(CHANGE_REGION_MODAL(false));\r\n        dispatch(SHOW_LIST_IN_REGION_MODAL(false));\r\n        dispatch(CATEGORY_FILTER_MODAL(false));\r\n    }\r\n\r\n    return (\r\n        <button type=\"button\" onClick={handleClick}>\r\n            업종 필터\r\n        </button>\r\n    );\r\n}\r\n\r\nfunction SelectRegion() {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const mapMode = useAppSelector((state) => state.mapSlice.mapMode);\r\n\r\n    function handleClick() {\r\n        appModalMode(true);\r\n        initializeMapMode();\r\n\r\n        dispatch(CHANGE_REGION_MODAL(true));\r\n\r\n        // 지역버튼 클릭 시 지역리스트 결과모달 켜져 있을 때는 끄기\r\n        dispatch(SET_MAP_MODE('지역탐색 모드'));\r\n    }\r\n\r\n    function initializeMapMode() {\r\n        dispatch(CHANGE_RADIUS_MODAL(false));\r\n        dispatch(CHANGE_REGION_MODAL(false));\r\n        dispatch(SHOW_LIST_IN_REGION_MODAL(false));\r\n        dispatch(CATEGORY_FILTER_MODAL(false));\r\n    }\r\n\r\n    return (\r\n        <button onClick={handleClick} className={`button-map-mode ${mapMode === '지역탐색 모드' ? 'on' : ''}`}>\r\n            지역 탐색 모드\r\n        </button>\r\n    );\r\n}\r\n\r\nfunction ChangeRadius() {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const mapMode = useAppSelector((state) => state.mapSlice.mapMode);\r\n\r\n    const radius = useAppSelector((state) => state.mapSlice.radius);\r\n    const [calcRadius, setCalcRadius] = useState(radius);\r\n    const [unit, setUnit] = useState('m');\r\n\r\n    useEffect(() => {\r\n        if (radius < 1000) {\r\n            setCalcRadius(radius);\r\n            setUnit('m');\r\n        } else {\r\n            setCalcRadius(radius / 1000);\r\n            setUnit('km');\r\n        }\r\n    }, [radius]);\r\n\r\n    const handleClick = () => {\r\n        appModalMode(true);\r\n        initializeMapMode();\r\n\r\n        dispatch(CHANGE_RADIUS_MODAL(true));\r\n        dispatch(SET_MAP_MODE('반경탐색 모드'));\r\n    };\r\n\r\n    function initializeMapMode() {\r\n        dispatch(CHANGE_RADIUS_MODAL(false));\r\n        dispatch(CHANGE_REGION_MODAL(false));\r\n        dispatch(SHOW_LIST_IN_REGION_MODAL(false));\r\n        dispatch(CATEGORY_FILTER_MODAL(false));\r\n    }\r\n\r\n    return (\r\n        <button\r\n            type=\"button\"\r\n            onClick={handleClick}\r\n            className={`button-map-mode ${mapMode === '반경탐색 모드' ? 'on' : ''}`}\r\n        >\r\n            <span>반경 </span>\r\n            <span>{calcRadius}</span>\r\n            <span>{unit}</span>\r\n            <span> 탐색 모드</span>\r\n        </button>\r\n    );\r\n}\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../renderer/store/hooks';\r\nimport { checkLoginForInfoWindow, clearCircle, init, optimizeMapLevel, setCircle } from './kakaoApi/index.js';\r\nimport { API_URL } from '../../renderer/CONSTANT_URL';\r\nimport { SET_NEAREST_LIST, SET_RESULT_IN_RADIUS } from '../../renderer/_reducers/_slices/mapSlice';\r\nimport { MongoLocation } from './kakaoApi/types';\r\n\r\nexport { KakaoMap };\r\n\r\nfunction KakaoMap({ isLoggedIn }: { isLoggedIn: boolean }) {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const radius = useAppSelector((state) => state.mapSlice.radius);\r\n    const [isInitialized, setIsInitialized] = useState(false);\r\n    const [currentLocation, setCurrentLocation] = useState<MongoLocation | null>(null);\r\n\r\n    const selectedCategory = useAppSelector((state) => state.mapSlice.selectedCategory);\r\n\r\n    useEffect(() => {\r\n        checkLoginForInfoWindow(isLoggedIn);\r\n\r\n        init().then((locPosition: kakao.maps.LatLng) => {\r\n            setIsInitialized(true);\r\n            setCurrentLocation([locPosition.getLng(), locPosition.getLat()] as MongoLocation);\r\n        });\r\n    }, []);\r\n\r\n    const getListInRadius = useCallback(\r\n        async (currentLocation: MongoLocation) => {\r\n            if (Array.isArray(currentLocation)) {\r\n                const res = await fetch(`${API_URL}/map/within-radius-of?radius=${radius}`, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({ currentLocation: currentLocation, category: selectedCategory }),\r\n                });\r\n\r\n                const data = await res.json();\r\n\r\n                return data;\r\n            }\r\n        },\r\n        [radius, selectedCategory, currentLocation]\r\n    );\r\n\r\n    // 반경 내 식당이 없을 경우 보여주는 데이터\r\n    const getNearestList = useCallback(\r\n        async (currentLocation: MongoLocation) => {\r\n            if (Array.isArray(currentLocation)) {\r\n                const count = 5;\r\n\r\n                const res = await fetch(`${API_URL}/map/nearest?top=${count}`, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({ currentLocation: currentLocation }),\r\n                });\r\n\r\n                const data = await res.json();\r\n\r\n                return data;\r\n            }\r\n        },\r\n        [radius, currentLocation]\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (isInitialized) {\r\n            clearCircle();\r\n            setCircle(radius);\r\n\r\n            if (currentLocation) {\r\n                getListInRadius(currentLocation).then((data) => {\r\n                    if (data.success) {\r\n                        dispatch(SET_RESULT_IN_RADIUS(data.lists));\r\n                        optimizeMapLevel(radius);\r\n                    }\r\n                });\r\n\r\n                getNearestList(currentLocation).then((data) => {\r\n                    if (data.success) {\r\n                        dispatch(SET_NEAREST_LIST(data.lists));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }, [radius, isInitialized, selectedCategory, currentLocation]);\r\n\r\n    return <div id=\"map\" />;\r\n}\r\n","import React from 'react';\r\nimport { useAppDispatch } from '../../renderer/store/hooks';\r\nimport { moveToCurrentLocation } from '../../pages/search/kakaoApi';\r\nimport { SHOW_LIST_IN_REGION_MODAL } from '../../renderer/_reducers/_slices/mapSlice';\r\n\r\nexport { BackCurrentLocation };\r\n\r\nfunction BackCurrentLocation() {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const handleClick = () => {\r\n        moveToCurrentLocation();\r\n        // 지역탐색 결과 모달 끄기\r\n        dispatch(SHOW_LIST_IN_REGION_MODAL(false));\r\n    };\r\n\r\n    return (\r\n        <button\r\n            type=\"button\"\r\n            onClick={handleClick}\r\n            className=\"button-move-to-my\"\r\n            title=\"내 위치로\"\r\n            aria-label=\"내 위치로 이동 버튼\"\r\n        />\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { useAppSelector } from '../../../renderer/store/hooks';\r\n\r\nexport { CountMessage };\r\n\r\nfunction CountMessage() {\r\n    const currentSido = useAppSelector((state) => state.mapSlice.currentSido);\r\n    const currentSigungu = useAppSelector((state) => state.mapSlice.currentSigungu);\r\n    const resultInRadius = useAppSelector((state) => state.mapSlice.resultInRadius);\r\n\r\n    return resultInRadius.length > 0 ? (\r\n        <p className=\"txt-result-in-radius\">\r\n            내 위치({`${currentSido} ${currentSigungu}`})에 검색된 식당 <span>{resultInRadius.length}</span>개\r\n        </p>\r\n    ) : (\r\n        <p className=\"txt-result-in-radius\">\r\n            결과가 없어요!😥\r\n            <br />\r\n            가장 가까운 식당 TOP 5\r\n        </p>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { CountMessage } from './CountMessage';\r\nimport { RestaurantList } from './RestaurantList';\r\n\r\nexport { ResultInRadius };\r\n\r\nfunction ResultInRadius() {\r\n    return (\r\n        <div className=\"wrapper-result-in-radius\">\r\n            <CountMessage />\r\n            <RestaurantList />\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { ControlButton } from './ControlButton/ControlButton';\r\nimport { KakaoMap } from './KakaoMap';\r\nimport { BackCurrentLocation } from '../../components/button/BackCurrentLocation';\r\nimport { ResultInRadius } from './ResultInRadius/ResultInRadius';\r\n\r\nexport default function MapView({ isLoggedIn }: { isLoggedIn: boolean }) {\r\n    return (\r\n        <main className=\"main-map\">\r\n            <ControlButton />\r\n            <KakaoMap isLoggedIn={isLoggedIn} />\r\n            <BackCurrentLocation />\r\n            <ResultInRadius />\r\n        </main>\r\n    );\r\n}\r\n"],"names":["currentLocation"],"mappings":"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"}