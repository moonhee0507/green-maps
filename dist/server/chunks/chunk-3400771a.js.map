{"version":3,"file":"chunk-3400771a.js","sources":["../../../pages/my-lists/ModalGroup/GroupOrderModal.tsx","../../../pages/my-lists/ModalGroup/AddGroupModal/GroupNameInput.tsx","../../../pages/my-lists/ModalGroup/AddGroupModal/CompleteButton.tsx","../../../pages/my-lists/ModalGroup/AddGroupModal/AddGroupModal.tsx","../../../pages/my-lists/ModalGroup/MoveListModal/Form/List.tsx","../../../pages/my-lists/ModalGroup/MoveListModal/Form/ButtonGroup.tsx","../../../pages/my-lists/ModalGroup/MoveListModal/MoveListModal.tsx","../../../pages/my-lists/ModalGroup/WhereToCopyModal/GroupNameList.tsx","../../../pages/my-lists/ModalGroup/WhereToCopyModal/CloseButton.tsx","../../../pages/my-lists/ModalGroup/WhereToCopyModal/WhereToCopyModal.tsx","../../../pages/my-lists/ModalGroup/DeleteMultiLike/Form/ListItem.tsx","../../../pages/my-lists/ModalGroup/DeleteMultiLike/Form/List.tsx","../../../pages/my-lists/ModalGroup/DeleteMultiLike/Form/ButtonGroup.tsx","../../../pages/my-lists/ModalGroup/DeleteMultiLike/Form/Form.tsx","../../../pages/my-lists/ModalGroup/DeleteMultiLike/CloseButton.tsx","../../../pages/my-lists/ModalGroup/DeleteMultiLike/DeleteMultiLike.tsx","../../../pages/my-lists/ModalGroup/ModalGroup.tsx"],"sourcesContent":["import React, { MouseEvent, useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../renderer/store/hooks';\r\nimport { ORDER_MODAL, ORDER_STANDARD } from '../../../renderer/_reducers/_slices/myListSlice';\r\nimport imgClose from '/images/icon-plus.svg';\r\n\r\nexport { GroupOrderModal };\r\n\r\nfunction GroupOrderModal() {\r\n    const dispatch = useAppDispatch();\r\n    const orderStandard = useAppSelector((state) => state.myListSlice.groupNameOrder);\r\n    const orderModalOn = useAppSelector((state) => state.myListSlice.orderModalOn);\r\n    const [show, setShow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (orderModalOn === true) setShow(true);\r\n        else setShow(false);\r\n    }, [orderModalOn]);\r\n\r\n    function handleOrder(event: MouseEvent<HTMLButtonElement>) {\r\n        dispatch(ORDER_STANDARD(event.currentTarget.innerText));\r\n        handleClose();\r\n    }\r\n\r\n    function handleClose() {\r\n        const app = document.querySelector('.app');\r\n        app?.classList.remove('modal-mode');\r\n\r\n        dispatch(ORDER_MODAL(false));\r\n    }\r\n\r\n    return (\r\n        <article className={`modal-group-item ${show ? 'on' : ''}`}>\r\n            <h4>정렬기준</h4>\r\n            <div className=\"container-button\">\r\n                <button\r\n                    type=\"button\"\r\n                    onClick={handleOrder}\r\n                    className={`button-groupname-order ${orderStandard === '등록순' ? 'on' : ''}`}\r\n                >\r\n                    등록순\r\n                </button>\r\n                <button\r\n                    type=\"button\"\r\n                    onClick={handleOrder}\r\n                    className={`button-groupname-order ${orderStandard === '이름순' ? 'on' : ''}`}\r\n                >\r\n                    이름순\r\n                </button>\r\n            </div>\r\n            <button type=\"button\" className=\"button-close\" onClick={handleClose}>\r\n                <img src={imgClose} alt=\"X 아이콘\" className=\"img-close\" />\r\n            </button>\r\n        </article>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../renderer/store/hooks';\r\nimport { SET_GROUP_NAME } from '../../../../renderer/_reducers/_slices/myListSlice';\r\n\r\nexport { GroupNameInput };\r\n\r\nfunction GroupNameInput() {\r\n    const dispatch = useAppDispatch();\r\n    const groupName = useAppSelector((state) => state.myListSlice.groupName);\r\n    const [inputValue, setInputValue] = useState<string>('');\r\n\r\n    useEffect(() => {\r\n        if (groupName === '') {\r\n            setInputValue('');\r\n        }\r\n    }, [groupName]);\r\n\r\n    function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n        setInputValue(event.target.value);\r\n        dispatch(SET_GROUP_NAME(event.target.value));\r\n    }\r\n    return (\r\n        <>\r\n            <label htmlFor=\"groupName\" className=\"sr-only\">\r\n                그룹명\r\n            </label>\r\n            <input\r\n                type=\"text\"\r\n                id=\"groupName\"\r\n                placeholder=\"그룹명을 입력해 주세요.\"\r\n                maxLength={20}\r\n                minLength={1}\r\n                onChange={handleChange}\r\n                value={inputValue}\r\n            />\r\n        </>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppSelector } from '../../../../renderer/store/hooks';\r\nimport { API_URL } from '../../../../renderer/CONSTANT_URL';\r\nimport type { UserInfo } from '../../../../server/models/User';\r\n\r\nexport { CompleteButton };\r\n\r\nfunction CompleteButton({ userInfo }: { userInfo: UserInfo | null }) {\r\n    const [show, setShow] = useState({ disabled: true });\r\n    const groupName = useAppSelector((state) => state.myListSlice.groupName);\r\n    const groupIcon = useAppSelector((state) => state.myListSlice.selectedIcon);\r\n\r\n    useEffect(() => {\r\n        if (groupName !== null) {\r\n            if (groupName.length !== 0) setShow({ disabled: false });\r\n            else setShow({ disabled: true });\r\n        } else {\r\n            setShow({ disabled: true });\r\n        }\r\n    }, [groupName]);\r\n\r\n    async function handleClick() {\r\n        if (userInfo !== null) {\r\n            const { userId } = userInfo;\r\n\r\n            const res = await fetch(`${API_URL}/bookmark/create`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ userId: userId, name: groupName, groupIcon: groupIcon }),\r\n            });\r\n\r\n            const data = await res.json();\r\n\r\n            if (data.success === true) {\r\n                window.location.reload();\r\n            } else {\r\n                alert('다시 시도해주세요.');\r\n            }\r\n        } else {\r\n            alert('로그아웃 되었습니다.\\n다시 로그인해주세요.');\r\n            window.location.href = '/login';\r\n        }\r\n    }\r\n    return (\r\n        <button type=\"button\" className={`button-groupname-complete ${show ? 'on' : ''}`} onClick={handleClick}>\r\n            완료\r\n        </button>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../renderer/store/hooks';\r\nimport { ADD_GROUP_MODAL, SET_GROUP_NAME, ICON_STANDARD } from '../../../../renderer/_reducers/_slices/myListSlice';\r\nimport { GroupNameInput } from './GroupNameInput';\r\nimport { IconSelection } from './IconSelection';\r\nimport { CompleteButton } from './CompleteButton';\r\nimport imgClose from '/images/icon-plus.svg';\r\nimport type { UserInfo } from '../../../../server/models/User';\r\n\r\nexport function AddGroupModal({ userInfo }: { userInfo: UserInfo | null }) {\r\n    const dispatch = useAppDispatch();\r\n    const addGroupModalOn = useAppSelector((state) => state.myListSlice.addGroupModalOn);\r\n\r\n    const [show, setShow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (addGroupModalOn === true) setShow(true);\r\n        else setShow(false);\r\n    }, [addGroupModalOn]);\r\n\r\n    function handleClose() {\r\n        const app = document.querySelector('.app');\r\n        app?.classList.remove('modal-mode');\r\n\r\n        dispatch(ADD_GROUP_MODAL(false));\r\n        dispatch(SET_GROUP_NAME('')); // 새그룹추가 모달 인풋창 초기화\r\n        dispatch(ICON_STANDARD('/images/icon-star.svg'));\r\n    }\r\n\r\n    return (\r\n        <article className={`modal-group-item ${show ? 'on' : ''}`}>\r\n            <h4>새 그룹 추가</h4>\r\n            <form>\r\n                <GroupNameInput />\r\n                <IconSelection />\r\n                <CompleteButton userInfo={userInfo} />\r\n            </form>\r\n            <button type=\"button\" className=\"button-close\" onClick={handleClose}>\r\n                <img src={imgClose} alt=\"X 아이콘\" className=\"img-close\" />\r\n            </button>\r\n        </article>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../../renderer/store/hooks';\r\nimport {\r\n    INCREASE_CHECKED,\r\n    DECREASE_CHECKED,\r\n    PUSH_RESTAURANT_LIST,\r\n    DELETE_RESTAURANT_LIST,\r\n} from '../../../../../renderer/_reducers/_slices/myListSlice';\r\nimport type { Restaurant } from '../../../../../server/models/Restaurant';\r\nimport type { Bookmark } from '../../../../../server/models/User';\r\n\r\nexport { List };\r\n\r\nfunction List({ bookmarkList }: { bookmarkList: Bookmark[] }) {\r\n    return (\r\n        <div>\r\n            {bookmarkList.length > 0 ? (\r\n                bookmarkList.map((list) => {\r\n                    return <ListItem key={Math.random()} list={list._id as Restaurant} />;\r\n                })\r\n            ) : (\r\n                <div className=\"style-wrapper-no-review\">\r\n                    <div className=\"txt-no-review\">😭</div>\r\n                    <p>목록이 없어요.</p>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction ListItem({ list }: { list: Restaurant }) {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const { _id, title, address, category } = list;\r\n    const [isChecked, setIsChecked] = useState(false);\r\n    const restaurantToMove = useAppSelector((state) => state.myListSlice.restaurantToMove);\r\n\r\n    // 전체해제를 countChecked로 감시\r\n    const countChecked = useAppSelector((state) => state.myListSlice.countChecked);\r\n    useEffect(() => {\r\n        if (countChecked === 0) {\r\n            setIsChecked(false);\r\n        }\r\n    }, [countChecked]);\r\n\r\n    const handleCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setIsChecked(event.target.checked);\r\n        if (event.target.checked) {\r\n            dispatch(INCREASE_CHECKED(1));\r\n            dispatch(PUSH_RESTAURANT_LIST([...restaurantToMove, _id]));\r\n        } else {\r\n            dispatch(DECREASE_CHECKED(1));\r\n            const newArray = [...restaurantToMove];\r\n            const index = newArray.indexOf(_id);\r\n            newArray.splice(index, 1);\r\n            dispatch(DELETE_RESTAURANT_LIST(newArray));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <label className=\"label-bookmarklist\">\r\n            <input\r\n                type=\"checkbox\"\r\n                className=\"checkbox-bookmarklist\"\r\n                checked={isChecked}\r\n                onChange={handleCheckboxChange}\r\n            />\r\n            <div className=\"wrapper-bookmarklist-edit\">\r\n                <dl>\r\n                    <dl className=\"container-title-category\">\r\n                        <dt className=\"sr-only\">식당 이름</dt>\r\n                        <dd className=\"txt-title\">{title}</dd>\r\n                        <dt className=\"sr-only\">업종</dt>\r\n                        <dd className=\"txt-category\">{category}</dd>\r\n                    </dl>\r\n                    <dl>\r\n                        <dt className=\"sr-only\">주소</dt>\r\n                        <dd className=\"txt-address\">{address}</dd>\r\n                    </dl>\r\n                </dl>\r\n            </div>\r\n        </label>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../../renderer/store/hooks';\r\nimport {\r\n    COPY_MODAL,\r\n    MOVE_LIST_MODAL,\r\n    RESET_CHECKED,\r\n    RESET_RESTAURANT_LIST,\r\n} from '../../../../../renderer/_reducers/_slices/myListSlice';\r\nimport { API_URL } from '../../../../../renderer/CONSTANT_URL';\r\n\r\nexport { ButtonGroup };\r\n\r\nfunction ButtonGroup() {\r\n    const dispatch = useAppDispatch();\r\n    const countChecked = useAppSelector((state) => state.myListSlice.countChecked);\r\n    const restaurantToDelete = useAppSelector((state) => state.myListSlice.restaurantToMove);\r\n\r\n    function handleCopy() {\r\n        dispatch(MOVE_LIST_MODAL(false));\r\n        dispatch(COPY_MODAL(true));\r\n    }\r\n\r\n    async function handleDelete() {\r\n        if (restaurantToDelete.length > 0) {\r\n            const deletePromise = restaurantToDelete.map((item) => deleteBookmarks(item));\r\n\r\n            try {\r\n                // Promise.all은 deletePromise 배열 내 모든 값의 fulfill 혹은 첫 reject를 기다린다.\r\n                const result = await Promise.all(deletePromise);\r\n\r\n                result.forEach((_, i) => {\r\n                    if (i === result.length - 1) window.location.reload();\r\n                });\r\n            } catch (err) {\r\n                console.error('삭제 중 오류가 발생했습니다.', err);\r\n            }\r\n        }\r\n    }\r\n\r\n    async function deleteBookmarks(id: string) {\r\n        const res = await fetch(`${API_URL}/users/bookmark/${id}`, {\r\n            credentials: 'include',\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n\r\n        const data = await res.json();\r\n\r\n        return data;\r\n    }\r\n\r\n    function clearCheckbox() {\r\n        dispatch(RESET_CHECKED()); // 체크박스 해제\r\n        dispatch(RESET_RESTAURANT_LIST([])); // 리스트 비우기\r\n    }\r\n\r\n    return (\r\n        <div className=\"container-button-move\">\r\n            <button type=\"reset\" onClick={clearCheckbox}>\r\n                선택 해제\r\n            </button>\r\n            <button type=\"button\" onClick={handleCopy} disabled={countChecked ? false : true}>\r\n                <span className=\"txt-copy-del\">복사</span>\r\n                <span>{countChecked}</span>\r\n            </button>\r\n            <button type=\"button\" disabled={countChecked ? false : true} onClick={handleDelete}>\r\n                <span className=\"txt-copy-del\">삭제</span>\r\n                <span>{countChecked}</span>\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport store from '../../../../renderer/store';\r\nimport { useAppDispatch, useAppSelector } from '../../../../renderer/store/hooks';\r\nimport {\r\n    MOVE_LIST_MODAL,\r\n    RESET_CHECKED,\r\n    RESET_RESTAURANT_LIST,\r\n} from '../../../../renderer/_reducers/_slices/myListSlice';\r\nimport { List } from './Form/List';\r\nimport { ButtonGroup } from './Form/ButtonGroup';\r\nimport { API_URL } from '../../../../renderer/CONSTANT_URL';\r\nimport appModalMode from '../../../../components/modal/appModalMode';\r\nimport imgClose from '/images/icon-plus.svg';\r\nimport type { Bookmark, UserInfo } from '../../../../server/models/User';\r\n\r\nexport function MoveListModal({ userInfo }: { userInfo: UserInfo | null }) {\r\n    const [show, setShow] = useState(false);\r\n    const [bookmarkListInSameGroup, setBookmarkListInSameGroup] = useState<Bookmark[]>([]);\r\n\r\n    const moveListModalOn = useAppSelector((state) => state.myListSlice.moveListModalOn);\r\n\r\n    useEffect(() => {\r\n        if (moveListModalOn === true) setShow(true);\r\n        else setShow(false);\r\n    }, [moveListModalOn]);\r\n\r\n    const groupName = useAppSelector((state) => state.myListSlice.targetGroup);\r\n\r\n    useEffect(() => {\r\n        if (userInfo !== null) {\r\n            getBookmarkList().then((data) => {\r\n                if (data.success) {\r\n                    const groupName = store.getState().myListSlice.targetGroup;\r\n                    const sameGroup = data.bookmarkList.filter((list) => list.groupName === groupName);\r\n                    setBookmarkListInSameGroup(sameGroup);\r\n                }\r\n            });\r\n        }\r\n    }, [groupName]);\r\n\r\n    async function getBookmarkList() {\r\n        const res = await fetch(`${API_URL}/users/bookmark`, {\r\n            credentials: 'include',\r\n            method: 'GET',\r\n        });\r\n        const data = (await res.json()) as { success: boolean; bookmarkList: Bookmark[]; message?: string };\r\n\r\n        return data;\r\n    }\r\n\r\n    return (\r\n        <article className={`modal-group-item ${show ? 'on' : ''}`}>\r\n            <h4>목록 편집</h4>\r\n            <Form bookmarkList={bookmarkListInSameGroup} />\r\n            <CloseButton />\r\n        </article>\r\n    );\r\n}\r\n\r\nfunction Form({ bookmarkList }: { bookmarkList: Bookmark[] }) {\r\n    return (\r\n        <form>\r\n            <List bookmarkList={bookmarkList} />\r\n            <ButtonGroup />\r\n        </form>\r\n    );\r\n}\r\n\r\nfunction CloseButton() {\r\n    const dispatch = useAppDispatch();\r\n\r\n    function handleClose() {\r\n        appModalMode(false);\r\n\r\n        dispatch(MOVE_LIST_MODAL(false));\r\n        dispatch(RESET_CHECKED());\r\n        dispatch(RESET_RESTAURANT_LIST([]));\r\n    }\r\n\r\n    return (\r\n        <button type=\"button\" className=\"button-close\" onClick={handleClose}>\r\n            <img src={imgClose} alt=\"X 아이콘\" className=\"img-close\" />\r\n        </button>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Bookmark, UserInfo } from '../../../../server/models/User';\r\nimport { GroupList } from '../../../../server/models/Bookmark';\r\nimport { useAppSelector } from '../../../../renderer/store/hooks';\r\nimport { API_URL } from '../../../../renderer/CONSTANT_URL';\r\n\r\nexport { GroupNameList };\r\n\r\nfunction GroupNameList({\r\n    userInfo,\r\n    groupInfo,\r\n    lists,\r\n}: {\r\n    userInfo: UserInfo | null;\r\n    groupInfo: GroupList;\r\n    lists: Bookmark[];\r\n}) {\r\n    const { name, registeredAt, groupIcon } = groupInfo;\r\n    const [date] = useState<string>(registeredAt.slice(0, 13));\r\n    const [count, setCount] = useState<number>(0);\r\n    const [user, setUser] = useState<UserInfo | null>(null);\r\n\r\n    useEffect(() => {\r\n        if (lists.length === 0) setCount(0);\r\n        if (lists.length > 0) {\r\n            const sameName = lists.filter((list) => list.groupName === name);\r\n            setCount(sameName.length);\r\n        }\r\n\r\n        if (userInfo !== null) {\r\n            setUser(userInfo);\r\n        }\r\n    }, []);\r\n\r\n    const restaurantToMove = useAppSelector((state) => state.myListSlice.restaurantToMove);\r\n\r\n    function handleCopy() {\r\n        if (user !== null) {\r\n            submit(user.userId, name, restaurantToMove);\r\n        }\r\n    }\r\n\r\n    async function submit(userId: string, newGroupName: string, selectedRestaurant: string[]) {\r\n        const res = await fetch(`${API_URL}/users/update/bookmark`, {\r\n            credentials: 'include',\r\n            method: 'PATCH',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                userId: userId,\r\n                newGroupName: newGroupName,\r\n                selectedRestaurant: selectedRestaurant,\r\n            }),\r\n        });\r\n\r\n        const data = await res.json();\r\n\r\n        if (data.success) {\r\n            alert('복사가 완료되었습니다.\\n복사가 완료된 원본은 삭제됩니다.');\r\n            window.location.href = '/my-lists';\r\n        } else {\r\n            console.error(data);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <li className=\"li-bookmarkgroup copy\">\r\n            <button onClick={handleCopy}>\r\n                <div className=\"style-wrapper-groupname\">\r\n                    <div className=\"style-wrapper-groupname-info\">\r\n                        <div className=\"container-groupicon\">\r\n                            <img src={groupIcon} alt=\"그룹 아이콘\" />\r\n                        </div>\r\n                        <div>\r\n                            <p className=\"txt-groupname\">{name}</p>\r\n                            <p className=\"txt-restaurant-count\">\r\n                                개수 <span className=\"num-restaurant-count\">{count}</span>\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"txt-group-date\">{date}</div>\r\n                </div>\r\n            </button>\r\n        </li>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { useAppDispatch } from '../../../../renderer/store/hooks';\r\nimport {\r\n    COPY_MODAL,\r\n    MOVE_LIST_MODAL,\r\n    RESET_CHECKED,\r\n    RESET_RESTAURANT_LIST,\r\n} from '../../../../renderer/_reducers/_slices/myListSlice';\r\nimport closeImg from '/images/icon-plus.svg';\r\n\r\nexport { CloseButton };\r\n\r\nfunction CloseButton() {\r\n    const dispatch = useAppDispatch();\r\n\r\n    function handleClose() {\r\n        dispatch(COPY_MODAL(false));\r\n        dispatch(MOVE_LIST_MODAL(true));\r\n        dispatch(RESET_CHECKED());\r\n        dispatch(RESET_RESTAURANT_LIST([]));\r\n    }\r\n\r\n    return (\r\n        <button type=\"button\" className=\"button-close\" onClick={handleClose}>\r\n            <img src={closeImg} alt=\"X 아이콘\" className=\"img-close\" />\r\n        </button>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Bookmark, UserInfo } from '../../../../server/models/User';\r\nimport { useAppSelector } from '../../../../renderer/store/hooks';\r\nimport { GroupNameList } from './GroupNameList';\r\nimport { CloseButton } from './CloseButton';\r\nimport { API_URL } from '../../../../renderer/CONSTANT_URL';\r\nimport type { GroupList } from '../../../../server/models/Bookmark';\r\n\r\nexport { WhereToCopyModal };\r\n\r\nfunction WhereToCopyModal({ userInfo }: { userInfo: UserInfo | null }) {\r\n    const copyModalOn = useAppSelector((state) => state.myListSlice.copyModalOn);\r\n    const targetGroup = useAppSelector((state) => state.myListSlice.targetGroup);\r\n\r\n    const [show, setShow] = useState(false);\r\n    const [groupList, setGroupList] = useState<GroupList[]>([]);\r\n    const [bookmarkList, setBookmarkList] = useState<Bookmark[]>([]);\r\n\r\n    useEffect(() => {\r\n        if (copyModalOn === true) setShow(true);\r\n        else setShow(false);\r\n    }, [copyModalOn]);\r\n\r\n    useEffect(() => {\r\n        if (userInfo !== null) {\r\n            getBookmarkGroupList(userInfo.userId).then((data) => {\r\n                if (data.success) {\r\n                    setGroupList(data.groupList);\r\n                }\r\n            });\r\n\r\n            setBookmarkList(userInfo.bookmarkList);\r\n        }\r\n    }, []);\r\n\r\n    async function getBookmarkGroupList(userId: string) {\r\n        const res = await fetch(`${API_URL}/bookmark/${userId}`);\r\n        const data = await res.json();\r\n\r\n        return data;\r\n    }\r\n\r\n    return (\r\n        <article className={`modal-group-item ${show ? 'on' : ''}`}>\r\n            <h4>복사할 그룹 선택</h4>\r\n            {groupList.length - 1 > 0 ? (\r\n                <ul className=\"ul-groupname\">\r\n                    {groupList\r\n                        .filter((groupInfo) => groupInfo.name !== targetGroup) // 현재 그룹 제외\r\n                        .map((groupInfo) => {\r\n                            return (\r\n                                <GroupNameList\r\n                                    key={Math.random()}\r\n                                    groupInfo={groupInfo}\r\n                                    lists={bookmarkList}\r\n                                    userInfo={userInfo}\r\n                                />\r\n                            );\r\n                        })}\r\n                </ul>\r\n            ) : (\r\n                <div className=\"style-wrapper-no-review\">\r\n                    <div className=\"txt-no-review\">😭</div>\r\n                    <p>다른 그룹이 없어요.</p>\r\n                </div>\r\n            )}\r\n            <CloseButton />\r\n        </article>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../../renderer/store/hooks';\r\nimport {\r\n    DECREASE_CHECKED,\r\n    DELETE_RESTAURANT_LIST,\r\n    INCREASE_CHECKED,\r\n    PUSH_RESTAURANT_LIST,\r\n} from '../../../../../renderer/_reducers/_slices/myListSlice';\r\nimport type { Restaurant } from '../../../../../server/models/Restaurant';\r\n\r\nexport { ListItem };\r\n\r\nfunction ListItem({ list }: { list: Restaurant }) {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const { _id, title, address, category } = list;\r\n    const [isChecked, setIsChecked] = useState(false);\r\n    const restaurantToDelete = useAppSelector((state) => state.myListSlice.restaurantToMove);\r\n\r\n    // 전체해제를 countChecked로 감시\r\n    const countChecked = useAppSelector((state) => state.myListSlice.countChecked);\r\n    useEffect(() => {\r\n        if (countChecked === 0) {\r\n            setIsChecked(false);\r\n        }\r\n    }, [countChecked]);\r\n\r\n    const handleCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setIsChecked(event.target.checked);\r\n\r\n        if (event.target.checked) {\r\n            dispatch(INCREASE_CHECKED(1));\r\n            dispatch(PUSH_RESTAURANT_LIST([...restaurantToDelete, _id]));\r\n        } else {\r\n            dispatch(DECREASE_CHECKED(1));\r\n            const newArray = [...restaurantToDelete];\r\n            const index = newArray.indexOf(_id);\r\n            newArray.splice(index, 1);\r\n            dispatch(DELETE_RESTAURANT_LIST(newArray));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <label className=\"label-bookmarklist\">\r\n            <input\r\n                type=\"checkbox\"\r\n                className=\"checkbox-bookmarklist\"\r\n                checked={isChecked}\r\n                onChange={handleCheckboxChange}\r\n            />\r\n            <div className=\"wrapper-bookmarklist-edit\">\r\n                <dl>\r\n                    <dl className=\"container-title-category\">\r\n                        <dt className=\"sr-only\">식당 이름</dt>\r\n                        <dd className=\"txt-title\">{title}</dd>\r\n                        <dt className=\"sr-only\">업종</dt>\r\n                        <dd className=\"txt-category\">{category}</dd>\r\n                    </dl>\r\n                    <dl>\r\n                        <dt className=\"sr-only\">주소</dt>\r\n                        <dd className=\"txt-address\">{address}</dd>\r\n                    </dl>\r\n                </dl>\r\n            </div>\r\n        </label>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { ListItem } from './ListItem';\r\nimport type { Like } from '../../../../../server/models/User';\r\nimport type { Restaurant } from '../../../../../server/models/Restaurant';\r\n\r\nexport { List };\r\n\r\nfunction List({ likeList }: { likeList: Like[] }) {\r\n    return (\r\n        <div>\r\n            {likeList.length > 0 ? (\r\n                likeList.map((list) => {\r\n                    return <ListItem key={Math.random()} list={list._id as Restaurant} />;\r\n                })\r\n            ) : (\r\n                <div className=\"style-wrapper-no-review\">\r\n                    <div className=\"txt-no-review\">😭</div>\r\n                    <p>목록이 없어요.</p>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../../../renderer/store/hooks';\r\nimport { RESET_CHECKED, RESET_RESTAURANT_LIST } from '../../../../../renderer/_reducers/_slices/myListSlice';\r\nimport { API_URL } from '../../../../../renderer/CONSTANT_URL';\r\n\r\nexport { ButtonGroup };\r\n\r\nfunction ButtonGroup() {\r\n    const dispatch = useAppDispatch();\r\n    const countChecked = useAppSelector((state) => state.myListSlice.countChecked);\r\n    const restaurantToDelete = useAppSelector((state) => state.myListSlice.restaurantToMove);\r\n\r\n    async function handleDelete() {\r\n        if (restaurantToDelete.length > 0) {\r\n            const deletePromise = restaurantToDelete.map((item) => deleteLikeList(item));\r\n\r\n            try {\r\n                // Promise.all은 deletePromise 배열 내 모든 값의 fulfill 혹은 첫 reject를 기다린다.\r\n                const result = await Promise.all(deletePromise);\r\n\r\n                result.forEach((_, i) => {\r\n                    if (i === result.length - 1) window.location.reload();\r\n                });\r\n            } catch (err) {\r\n                console.error('삭제 중 오류가 발생했습니다.', err);\r\n            }\r\n        }\r\n    }\r\n\r\n    async function deleteLikeList(id: string) {\r\n        const res = await fetch(`${API_URL}/users/like/${id}`, {\r\n            credentials: 'include',\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n\r\n        const data = await res.json();\r\n\r\n        return data;\r\n    }\r\n\r\n    function clearCheckbox() {\r\n        dispatch(RESET_CHECKED()); // 체크박스 해제\r\n        dispatch(RESET_RESTAURANT_LIST([])); // 리스트 비우기\r\n    }\r\n\r\n    return (\r\n        <div className=\"container-button-move like\">\r\n            <button type=\"reset\" onClick={clearCheckbox}>\r\n                선택 해제\r\n            </button>\r\n            <button type=\"button\" disabled={countChecked ? false : true} onClick={handleDelete}>\r\n                <span className=\"txt-copy-del\">삭제</span>\r\n                <span>{countChecked}</span>\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { List } from './List';\r\nimport { ButtonGroup } from './ButtonGroup';\r\nimport type { Like } from '../../../../../server/models/User';\r\n\r\nexport { Form };\r\n\r\nfunction Form({ likeList }: { likeList: Like[] }) {\r\n    return (\r\n        <form>\r\n            <List likeList={likeList} />\r\n            <ButtonGroup />\r\n        </form>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { useAppDispatch } from '../../../../renderer/store/hooks';\r\nimport {\r\n    DELETE_LIKELIST_MODAL,\r\n    RESET_CHECKED,\r\n    RESET_RESTAURANT_LIST,\r\n} from '../../../../renderer/_reducers/_slices/myListSlice';\r\nimport imgClose from '/images/icon-plus.svg';\r\n\r\nexport { CloseButton };\r\n\r\nfunction CloseButton() {\r\n    const dispatch = useAppDispatch();\r\n\r\n    function handleClose() {\r\n        const app = document.querySelector('.app');\r\n        app?.classList.remove('modal-mode');\r\n\r\n        dispatch(DELETE_LIKELIST_MODAL(false));\r\n        dispatch(RESET_CHECKED());\r\n        dispatch(RESET_RESTAURANT_LIST([]));\r\n    }\r\n\r\n    return (\r\n        <button type=\"button\" className=\"button-close\" onClick={handleClose}>\r\n            <img src={imgClose} alt=\"X 아이콘\" className=\"img-close\" />\r\n        </button>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppSelector } from '../../../../renderer/store/hooks';\r\nimport { API_URL } from '../../../../renderer/CONSTANT_URL';\r\nimport { Form } from './Form/Form';\r\nimport { CloseButton } from './CloseButton';\r\nimport type { Like, UserInfo } from '../../../../server/models/User';\r\n\r\nexport { DeleteMultiLike };\r\n\r\nfunction DeleteMultiLike({ userInfo }: { userInfo: UserInfo | null }) {\r\n    const [show, setShow] = useState(false);\r\n    const [likeList, setLikeList] = useState<Like[]>([]);\r\n\r\n    const deleteLikeListModelOn = useAppSelector((state) => state.myListSlice.deleteLikeListModalOn);\r\n\r\n    useEffect(() => {\r\n        if (deleteLikeListModelOn) setShow(true);\r\n        else setShow(false);\r\n    }, [deleteLikeListModelOn]);\r\n\r\n    useEffect(() => {\r\n        if (userInfo !== null) {\r\n            getLikeList().then((data) => {\r\n                if (data.success) {\r\n                    setLikeList(data.likeList);\r\n                }\r\n            });\r\n        }\r\n    }, [userInfo]);\r\n\r\n    async function getLikeList() {\r\n        const res = await fetch(`${API_URL}/users/like`, {\r\n            credentials: 'include',\r\n            method: 'GET',\r\n        });\r\n        const data = (await res.json()) as { success: boolean; likeList: Like[] };\r\n\r\n        return data;\r\n    }\r\n\r\n    return (\r\n        <article className={`modal-group-item ${show ? 'on' : ''}`}>\r\n            <h4>목록 삭제</h4>\r\n            <Form likeList={likeList} />\r\n            <CloseButton />\r\n        </article>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../renderer/store/hooks';\r\nimport {\r\n    ADD_GROUP_MODAL,\r\n    ORDER_MODAL,\r\n    SET_GROUP_NAME,\r\n    ICON_STANDARD,\r\n    MOVE_LIST_MODAL,\r\n    RESET_CHECKED,\r\n    COPY_MODAL,\r\n    RESET_RESTAURANT_LIST,\r\n    DELETE_LIKELIST_MODAL,\r\n} from '../../../renderer/_reducers/_slices/myListSlice';\r\nimport { GroupOrderModal } from './GroupOrderModal';\r\nimport { AddGroupModal } from './AddGroupModal/AddGroupModal';\r\nimport { MoveListModal } from './MoveListModal/MoveListModal';\r\nimport { WhereToCopyModal } from './WhereToCopyModal/WhereToCopyModal';\r\nimport type { UserInfo } from '../../../server/models/User';\r\nimport { DeleteMultiLike } from './DeleteMultiLike/DeleteMultiLike';\r\n\r\nexport function ModalGroup({ userInfo }: { userInfo: UserInfo | null }) {\r\n    const on = useAppSelector(\r\n        (state) =>\r\n            state.myListSlice.orderModalOn ||\r\n            state.myListSlice.addGroupModalOn ||\r\n            state.myListSlice.moveListModalOn ||\r\n            state.myListSlice.copyModalOn ||\r\n            state.myListSlice.deleteLikeListModalOn\r\n    );\r\n    const [show, setShow] = useState(false);\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        if (on === true) setShow(true);\r\n        else setShow(false);\r\n    }, [on]);\r\n\r\n    useEffect(() => {\r\n        if (show) {\r\n            document.addEventListener('click', handleClose);\r\n        }\r\n\r\n        return () => {\r\n            document.removeEventListener('click', handleClose);\r\n        };\r\n    }, [show]);\r\n\r\n    function handleClose(event: any) {\r\n        if (event.target.className === 'app modal-mode') {\r\n            const app = document.querySelector('.app');\r\n            app?.classList.remove('modal-mode');\r\n\r\n            dispatch(ORDER_MODAL(false));\r\n            dispatch(ADD_GROUP_MODAL(false));\r\n            dispatch(MOVE_LIST_MODAL(false));\r\n            dispatch(COPY_MODAL(false));\r\n            dispatch(DELETE_LIKELIST_MODAL(false));\r\n\r\n            // 새그룹추가 모달 인풋창 초기화\r\n            dispatch(SET_GROUP_NAME(''));\r\n            // 선택 아이콘 초기화\r\n            dispatch(ICON_STANDARD('/images/icon-star.svg'));\r\n            // 체크박스 카운트 초기화\r\n            dispatch(RESET_CHECKED());\r\n            // 체크된 식당의 Id 배열 초기화\r\n            dispatch(RESET_RESTAURANT_LIST([]));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={`modal-group ${show ? 'on' : ''}`}>\r\n            <GroupOrderModal />\r\n            <AddGroupModal userInfo={userInfo} />\r\n            <MoveListModal userInfo={userInfo} />\r\n            <WhereToCopyModal userInfo={userInfo} />\r\n            <DeleteMultiLike userInfo={userInfo} />\r\n        </div>\r\n    );\r\n}\r\n"],"names":["List","ListItem","ButtonGroup","groupName","Form","CloseButton","closeImg"],"mappings":"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"}