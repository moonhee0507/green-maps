{"version":3,"file":"chunk-b0bdffa2.js","sources":["../../../pages/search/restaurant/RestaurantDetail/ReviewSection/component/Owner.tsx","../../../pages/search/restaurant/RestaurantDetail/ReviewSection/component/Date.tsx","../../../pages/search/restaurant/RestaurantDetail/ReviewSection/component/ReviewLikeButton.tsx","../../../pages/search/restaurant/RestaurantDetail/ReviewSection/component/Content.tsx","../../../pages/search/restaurant/RestaurantDetail/ReviewSection/component/MoreButton.tsx","../../../pages/search/restaurant/RestaurantDetail/ReviewSection/ReviewListItem.tsx"],"sourcesContent":["import React from 'react';\r\n\r\nexport { Owner };\r\n\r\nfunction Owner(props: { owner: string }) {\r\n    return (\r\n        <>\r\n            <dt className=\"sr-only\">작성자</dt>\r\n            <dd className=\"txt-review-owner\">{props.owner}</dd>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { isSameDay } from '../../../../../../components/Date/isSameDay';\r\n\r\nexport { Date };\r\n\r\nfunction Date(props: { registeredAt: string }) {\r\n    const { registeredAt } = props;\r\n\r\n    const date = isSameDay(registeredAt)\r\n        ? `${registeredAt.split('. ').at(-1)?.split(':')[0]}:${registeredAt.split('. ').at(-1)?.split(':')[1]}`\r\n        : registeredAt.slice(0, 13);\r\n\r\n    return (\r\n        <>\r\n            <dt className=\"sr-only\">작성일자</dt>\r\n            <dd className=\"txt-review-date\">{date}</dd>\r\n        </>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { API_URL } from '../../../../../../renderer/CONSTANT_URL';\r\nimport imgHeart from '/images/icon-heart.svg';\r\n\r\nexport { ReviewLikeButton };\r\n\r\nfunction ReviewLikeButton(props: { reviewId: string; like: Array<{ user: string }> | undefined }) {\r\n    const { reviewId, like } = props;\r\n    const [userId, setUserId] = useState<string | null>(null);\r\n    const [likeCount, setLikeCount] = useState<number>(like ? like.length : 0);\r\n    const [buttonOn, setButtonOn] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        getUserId();\r\n        async function getUserId() {\r\n            try {\r\n                const res = await fetch(`${API_URL}/users`);\r\n                const data = await res.json();\r\n\r\n                if (data.success) {\r\n                    setUserId(data.user.userId);\r\n                } else {\r\n                    setUserId(null);\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (like) {\r\n            setButtonOn(like.some((userInfo) => userInfo.user === userId));\r\n        }\r\n    }, [userId]);\r\n\r\n    function handleClick() {\r\n        buttonOn ? delLike() : addLike();\r\n        setButtonOn(buttonOn ? false : true);\r\n    }\r\n\r\n    async function addLike() {\r\n        const res = await fetch(`${API_URL}/reviews/${reviewId}/like`, {\r\n            credentials: 'include',\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ user: userId }),\r\n        });\r\n\r\n        if (res.ok) {\r\n            setLikeCount(likeCount + 1);\r\n        } else throw new Error();\r\n    }\r\n\r\n    async function delLike() {\r\n        const res = await fetch(`${API_URL}/reviews/${reviewId}/like`, {\r\n            credentials: 'include',\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ user: userId }),\r\n        });\r\n\r\n        if (res.ok) {\r\n            setLikeCount(likeCount - 1);\r\n        } else throw new Error();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <dt className=\"sr-only\">좋아요</dt>\r\n            <dd className=\"container-button-txt\">\r\n                <button className=\"button-review-like\" type=\"button\" onClick={handleClick}>\r\n                    <img src={imgHeart} alt=\"좋아요 이미지\" className={`img-like review ${buttonOn ? 'on' : ''}`} />\r\n                </button>\r\n                <span aria-label=\"좋아요 개수\">{likeCount}</span>\r\n            </dd>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nexport { Content };\r\n\r\nfunction Content(props: { content: string }) {\r\n    return (\r\n        <dl>\r\n            <dt className=\"sr-only\">내용</dt>\r\n            <dd className=\"txt-review-content\">{props.content}</dd>\r\n        </dl>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch } from '../../../../../../renderer/store/hooks';\r\nimport {\r\n    EDIT_DELETE_NOTIFY_MODAL,\r\n    SAME_USER_OWNER,\r\n    SET_RESTAURANT_ID,\r\n    SET_REVIEW_ID,\r\n} from '../../../../../../renderer/_reducers/_slices/reviewSlice';\r\nimport type { UserInfo } from '../../../../../../server/models/User';\r\n\r\nexport { MoreButton };\r\n\r\nfunction MoreButton({\r\n    userInfo,\r\n    owner,\r\n    reviewId,\r\n    restaurantId,\r\n}: {\r\n    userInfo: UserInfo | null;\r\n    owner: string;\r\n    reviewId: string;\r\n    restaurantId: string;\r\n}) {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const [user, setUser] = useState<UserInfo | null>(null);\r\n\r\n    useEffect(() => {\r\n        if (userInfo) setUser(userInfo);\r\n    }, [userInfo]);\r\n\r\n    const handleClick = () => {\r\n        const app = document.querySelector('.app');\r\n        app?.classList.add('modal-mode');\r\n\r\n        // 수정 삭제 신고 모달\r\n        dispatch(EDIT_DELETE_NOTIFY_MODAL(true));\r\n        dispatch(SAME_USER_OWNER(user?.userId === owner));\r\n        dispatch(SET_REVIEW_ID(reviewId));\r\n        dispatch(SET_RESTAURANT_ID(restaurantId));\r\n    };\r\n\r\n    return <button className=\"button-more reviewitem\" aria-label=\"더보기 버튼\" onClick={handleClick} />;\r\n}\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Owner, Date, MoreButton, Image, ReviewLikeButton, Content } from './component/index.js';\r\nimport { useAppSelector } from '../../../../../renderer/store/hooks.js';\r\nimport type { Review } from '../../../../../server/models/Review';\r\nimport type { UserInfo } from '../../../../../server/models/User';\r\n\r\nexport { ReviewListItem };\r\n\r\nfunction ReviewListItem({\r\n    item,\r\n    userInfo,\r\n    restaurantId,\r\n    isFirst,\r\n}: {\r\n    item: Review;\r\n    userInfo: UserInfo | null;\r\n    restaurantId: string;\r\n    isFirst: boolean;\r\n}) {\r\n    const { _id, owner, registeredAt, photo, content, like, restaurant } = item;\r\n    const [myPage] = useState(window.location.pathname === '/my');\r\n\r\n    const listElement = useRef<HTMLLIElement>(null);\r\n    const currentPage = useAppSelector((state) => state.paginationSlice.currentPage);\r\n\r\n    useEffect(() => {\r\n        if (isFirst && listElement.current) {\r\n            if (currentPage !== 1) {\r\n                listElement.current.scrollIntoView({ block: 'center' });\r\n            }\r\n        }\r\n    }, [currentPage]);\r\n\r\n    return (\r\n        <li ref={listElement} className=\"list-review\">\r\n            {myPage ? (\r\n                <p className=\"txt-restaurant-in-my\">\r\n                    <em>{typeof restaurant !== 'string' ? restaurant.title : ''}</em>에 작성한 리뷰입니다.\r\n                </p>\r\n            ) : null}\r\n            <article className=\"container-reviewitem\">\r\n                <h5 className=\"sr-only\">개별 리뷰</h5>\r\n                <dl>\r\n                    <div className=\"style-wrapper-reviewitem\">\r\n                        <Owner owner={owner} />\r\n                        <Date registeredAt={registeredAt} />\r\n                        <MoreButton userInfo={userInfo} owner={owner} reviewId={_id} restaurantId={restaurantId} />\r\n                    </div>\r\n                    {photo && photo.length > 0 ? (\r\n                        <>\r\n                            <Image photoList={photo} />\r\n                            <div className=\"style-wrapper-reviewitem\">\r\n                                <ButtonGroup reviewId={_id} like={like || []} />\r\n                                <Content content={content} />\r\n                            </div>\r\n                        </>\r\n                    ) : (\r\n                        <div className=\"style-wrapper-reviewitem only-text\">\r\n                            <Content content={content} />\r\n                            <ButtonGroup reviewId={_id} like={like || []} />\r\n                        </div>\r\n                    )}\r\n                </dl>\r\n            </article>\r\n        </li>\r\n    );\r\n}\r\n\r\nfunction ButtonGroup({ reviewId, like }: { reviewId: string; like: Array<{ user: string }> }) {\r\n    return (\r\n        <dl className=\"container-like-comment\">\r\n            <ReviewLikeButton reviewId={reviewId} like={like} />\r\n            <ReviewCommentButton />\r\n        </dl>\r\n    );\r\n}\r\n\r\nfunction ReviewCommentButton() {\r\n    const handleClick = () => {\r\n        window.alert('준비 중인 서비스입니다.');\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <dt className=\"sr-only\">댓글</dt>\r\n            <dd className=\"container-button-txt\">\r\n                <button\r\n                    type=\"button\"\r\n                    aria-label=\"리뷰 댓글 쓰기\"\r\n                    className=\"button-review-comment\"\r\n                    onClick={handleClick}\r\n                />\r\n                <span aria-label=\"댓글 개수\">0</span>\r\n            </dd>\r\n        </>\r\n    );\r\n}\r\n"],"names":[],"mappings":"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"}